
HMI_ECU_M1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ffe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00800060  00003ffe  00004092  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800116  00800116  00004148  2**0
                  ALLOC
  3 .stab         00003564  00000000  00000000  00004148  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000171b  00000000  00000000  000076ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009077  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000acc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bbab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c958  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cd45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d513  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 31       	cpi	r26, 0x16	; 22
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e1       	ldi	r26, 0x16	; 22
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 32       	cpi	r26, 0x26	; 38
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 98 17 	call	0x2f30	; 0x2f30 <main>
      8a:	0c 94 fd 1f 	jmp	0x3ffa	; 0x3ffa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e0       	ldi	r26, 0x07	; 7
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a8 1f 	jmp	0x3f50	; 0x3f50 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 98 1f 	jmp	0x3f30	; 0x3f30 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 98 1f 	jmp	0x3f30	; 0x3f30 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e0       	ldi	r24, 0x07	; 7
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a8 1f 	jmp	0x3f50	; 0x3f50 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 98 1f 	jmp	0x3f30	; 0x3f30 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 98 1f 	jmp	0x3f30	; 0x3f30 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 98 1f 	jmp	0x3f30	; 0x3f30 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9c 1f 	jmp	0x3f38	; 0x3f38 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b8 1f 	jmp	0x3f70	; 0x3f70 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	2d 97       	sbiw	r28, 0x0d	; 13
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	6a 83       	std	Y+2, r22	; 0x02
     d34:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	88 30       	cpi	r24, 0x08	; 8
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <GPIO_writePin+0x22>
     d3c:	db c0       	rjmp	.+438    	; 0xef4 <GPIO_writePin+0x1d8>
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	84 30       	cpi	r24, 0x04	; 4
     d42:	08 f0       	brcs	.+2      	; 0xd46 <GPIO_writePin+0x2a>
     d44:	d7 c0       	rjmp	.+430    	; 0xef4 <GPIO_writePin+0x1d8>
	{
		// do nothing
	}
	else{

		switch(port_num)
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	3d 87       	std	Y+13, r19	; 0x0d
     d4e:	2c 87       	std	Y+12, r18	; 0x0c
     d50:	8c 85       	ldd	r24, Y+12	; 0x0c
     d52:	9d 85       	ldd	r25, Y+13	; 0x0d
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	91 05       	cpc	r25, r1
     d58:	09 f4       	brne	.+2      	; 0xd5c <GPIO_writePin+0x40>
     d5a:	44 c0       	rjmp	.+136    	; 0xde4 <GPIO_writePin+0xc8>
     d5c:	2c 85       	ldd	r18, Y+12	; 0x0c
     d5e:	3d 85       	ldd	r19, Y+13	; 0x0d
     d60:	22 30       	cpi	r18, 0x02	; 2
     d62:	31 05       	cpc	r19, r1
     d64:	2c f4       	brge	.+10     	; 0xd70 <GPIO_writePin+0x54>
     d66:	8c 85       	ldd	r24, Y+12	; 0x0c
     d68:	9d 85       	ldd	r25, Y+13	; 0x0d
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	71 f0       	breq	.+28     	; 0xd8a <GPIO_writePin+0x6e>
     d6e:	c2 c0       	rjmp	.+388    	; 0xef4 <GPIO_writePin+0x1d8>
     d70:	2c 85       	ldd	r18, Y+12	; 0x0c
     d72:	3d 85       	ldd	r19, Y+13	; 0x0d
     d74:	22 30       	cpi	r18, 0x02	; 2
     d76:	31 05       	cpc	r19, r1
     d78:	09 f4       	brne	.+2      	; 0xd7c <GPIO_writePin+0x60>
     d7a:	62 c0       	rjmp	.+196    	; 0xe40 <GPIO_writePin+0x124>
     d7c:	8c 85       	ldd	r24, Y+12	; 0x0c
     d7e:	9d 85       	ldd	r25, Y+13	; 0x0d
     d80:	83 30       	cpi	r24, 0x03	; 3
     d82:	91 05       	cpc	r25, r1
     d84:	09 f4       	brne	.+2      	; 0xd88 <GPIO_writePin+0x6c>
     d86:	89 c0       	rjmp	.+274    	; 0xe9a <GPIO_writePin+0x17e>
     d88:	b5 c0       	rjmp	.+362    	; 0xef4 <GPIO_writePin+0x1d8>
		{
		case PORTA_ID:
			value ? SET_BIT(PORTA, pin_num) : CLEAR_BIT(PORTA, pin_num);
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	88 23       	and	r24, r24
     d8e:	a9 f0       	breq	.+42     	; 0xdba <GPIO_writePin+0x9e>
     d90:	ab e3       	ldi	r26, 0x3B	; 59
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	eb e3       	ldi	r30, 0x3B	; 59
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	48 2f       	mov	r20, r24
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 2e       	mov	r0, r18
     da8:	02 c0       	rjmp	.+4      	; 0xdae <GPIO_writePin+0x92>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	0a 94       	dec	r0
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <GPIO_writePin+0x8e>
     db2:	84 2b       	or	r24, r20
     db4:	8c 93       	st	X, r24
     db6:	9c 91       	ld	r25, X
     db8:	9d c0       	rjmp	.+314    	; 0xef4 <GPIO_writePin+0x1d8>
     dba:	ab e3       	ldi	r26, 0x3B	; 59
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	eb e3       	ldi	r30, 0x3B	; 59
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <GPIO_writePin+0xba>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	2a 95       	dec	r18
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <GPIO_writePin+0xb6>
     dda:	80 95       	com	r24
     ddc:	84 23       	and	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	2c 91       	ld	r18, X
     de2:	88 c0       	rjmp	.+272    	; 0xef4 <GPIO_writePin+0x1d8>
			break;

		case PORTB_ID:
			value ? SET_BIT(PORTB, pin_num) : CLEAR_BIT(PORTB, pin_num);
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	88 23       	and	r24, r24
     de8:	a9 f0       	breq	.+42     	; 0xe14 <GPIO_writePin+0xf8>
     dea:	a8 e3       	ldi	r26, 0x38	; 56
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e8 e3       	ldi	r30, 0x38	; 56
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <GPIO_writePin+0xec>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <GPIO_writePin+0xe8>
     e0c:	84 2b       	or	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	3c 91       	ld	r19, X
     e12:	70 c0       	rjmp	.+224    	; 0xef4 <GPIO_writePin+0x1d8>
     e14:	a8 e3       	ldi	r26, 0x38	; 56
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e8 e3       	ldi	r30, 0x38	; 56
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <GPIO_writePin+0x116>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <GPIO_writePin+0x112>
     e36:	80 95       	com	r24
     e38:	84 23       	and	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	8c 91       	ld	r24, X
     e3e:	5a c0       	rjmp	.+180    	; 0xef4 <GPIO_writePin+0x1d8>
			break;
		case PORTC_ID:
			value ? SET_BIT(PORTC, pin_num) : CLEAR_BIT(PORTC, pin_num);
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	88 23       	and	r24, r24
     e44:	a9 f0       	breq	.+42     	; 0xe70 <GPIO_writePin+0x154>
     e46:	a5 e3       	ldi	r26, 0x35	; 53
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e5 e3       	ldi	r30, 0x35	; 53
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <GPIO_writePin+0x148>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <GPIO_writePin+0x144>
     e68:	84 2b       	or	r24, r20
     e6a:	8c 93       	st	X, r24
     e6c:	9c 91       	ld	r25, X
     e6e:	42 c0       	rjmp	.+132    	; 0xef4 <GPIO_writePin+0x1d8>
     e70:	a5 e3       	ldi	r26, 0x35	; 53
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e5 e3       	ldi	r30, 0x35	; 53
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <GPIO_writePin+0x170>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	2a 95       	dec	r18
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <GPIO_writePin+0x16c>
     e90:	80 95       	com	r24
     e92:	84 23       	and	r24, r20
     e94:	8c 93       	st	X, r24
     e96:	2c 91       	ld	r18, X
     e98:	2d c0       	rjmp	.+90     	; 0xef4 <GPIO_writePin+0x1d8>
			break;
		case PORTD_ID:
			value ? SET_BIT(PORTD, pin_num) : CLEAR_BIT(PORTD, pin_num);
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	88 23       	and	r24, r24
     e9e:	a9 f0       	breq	.+42     	; 0xeca <GPIO_writePin+0x1ae>
     ea0:	a2 e3       	ldi	r26, 0x32	; 50
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e2 e3       	ldi	r30, 0x32	; 50
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <GPIO_writePin+0x1a2>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <GPIO_writePin+0x19e>
     ec2:	84 2b       	or	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	3c 91       	ld	r19, X
     ec8:	15 c0       	rjmp	.+42     	; 0xef4 <GPIO_writePin+0x1d8>
     eca:	a2 e3       	ldi	r26, 0x32	; 50
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e2 e3       	ldi	r30, 0x32	; 50
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <GPIO_writePin+0x1cc>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <GPIO_writePin+0x1c8>
     eec:	80 95       	com	r24
     eee:	84 23       	and	r24, r20
     ef0:	8c 93       	st	X, r24
     ef2:	8c 91       	ld	r24, X
			break;

		}
	}
}
     ef4:	2d 96       	adiw	r28, 0x0d	; 13
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
     efa:	de bf       	out	0x3e, r29	; 62
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	cd bf       	out	0x3d, r28	; 61
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <GPIO_readPin+0x6>
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <GPIO_readPin+0x8>
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <GPIO_readPin+0xa>
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	89 83       	std	Y+1, r24	; 0x01
     f16:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	88 30       	cpi	r24, 0x08	; 8
     f1c:	18 f4       	brcc	.+6      	; 0xf24 <GPIO_readPin+0x1e>
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	84 30       	cpi	r24, 0x04	; 4
     f22:	10 f0       	brcs	.+4      	; 0xf28 <GPIO_readPin+0x22>
	{
		return 0;
     f24:	1d 82       	std	Y+5, r1	; 0x05
     f26:	82 c0       	rjmp	.+260    	; 0x102c <GPIO_readPin+0x126>
	}
	else{
		switch(port_num)
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	3c 83       	std	Y+4, r19	; 0x04
     f30:	2b 83       	std	Y+3, r18	; 0x03
     f32:	4b 81       	ldd	r20, Y+3	; 0x03
     f34:	5c 81       	ldd	r21, Y+4	; 0x04
     f36:	41 30       	cpi	r20, 0x01	; 1
     f38:	51 05       	cpc	r21, r1
     f3a:	79 f1       	breq	.+94     	; 0xf9a <GPIO_readPin+0x94>
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	91 05       	cpc	r25, r1
     f44:	34 f4       	brge	.+12     	; 0xf52 <GPIO_readPin+0x4c>
     f46:	2b 81       	ldd	r18, Y+3	; 0x03
     f48:	3c 81       	ldd	r19, Y+4	; 0x04
     f4a:	21 15       	cp	r18, r1
     f4c:	31 05       	cpc	r19, r1
     f4e:	69 f0       	breq	.+26     	; 0xf6a <GPIO_readPin+0x64>
     f50:	6c c0       	rjmp	.+216    	; 0x102a <GPIO_readPin+0x124>
     f52:	4b 81       	ldd	r20, Y+3	; 0x03
     f54:	5c 81       	ldd	r21, Y+4	; 0x04
     f56:	42 30       	cpi	r20, 0x02	; 2
     f58:	51 05       	cpc	r21, r1
     f5a:	b9 f1       	breq	.+110    	; 0xfca <GPIO_readPin+0xc4>
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	83 30       	cpi	r24, 0x03	; 3
     f62:	91 05       	cpc	r25, r1
     f64:	09 f4       	brne	.+2      	; 0xf68 <GPIO_readPin+0x62>
     f66:	49 c0       	rjmp	.+146    	; 0xffa <GPIO_readPin+0xf4>
     f68:	60 c0       	rjmp	.+192    	; 0x102a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(PINA & (1<<pin_num))
     f6a:	e9 e3       	ldi	r30, 0x39	; 57
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	88 2f       	mov	r24, r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	a9 01       	movw	r20, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <GPIO_readPin+0x7c>
     f7e:	55 95       	asr	r21
     f80:	47 95       	ror	r20
     f82:	8a 95       	dec	r24
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <GPIO_readPin+0x78>
     f86:	ca 01       	movw	r24, r20
     f88:	81 70       	andi	r24, 0x01	; 1
     f8a:	90 70       	andi	r25, 0x00	; 0
     f8c:	88 23       	and	r24, r24
     f8e:	19 f0       	breq	.+6      	; 0xf96 <GPIO_readPin+0x90>
			{
				return LOGIC_HIGH;
     f90:	51 e0       	ldi	r21, 0x01	; 1
     f92:	5d 83       	std	Y+5, r21	; 0x05
     f94:	4b c0       	rjmp	.+150    	; 0x102c <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
     f96:	1d 82       	std	Y+5, r1	; 0x05
     f98:	49 c0       	rjmp	.+146    	; 0x102c <GPIO_readPin+0x126>
			}

		case PORTB_ID:
			if(PINB & (1<<pin_num))
     f9a:	e6 e3       	ldi	r30, 0x36	; 54
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a9 01       	movw	r20, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <GPIO_readPin+0xac>
     fae:	55 95       	asr	r21
     fb0:	47 95       	ror	r20
     fb2:	8a 95       	dec	r24
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <GPIO_readPin+0xa8>
     fb6:	ca 01       	movw	r24, r20
     fb8:	81 70       	andi	r24, 0x01	; 1
     fba:	90 70       	andi	r25, 0x00	; 0
     fbc:	88 23       	and	r24, r24
     fbe:	19 f0       	breq	.+6      	; 0xfc6 <GPIO_readPin+0xc0>
			{
				return LOGIC_HIGH;
     fc0:	51 e0       	ldi	r21, 0x01	; 1
     fc2:	5d 83       	std	Y+5, r21	; 0x05
     fc4:	33 c0       	rjmp	.+102    	; 0x102c <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
     fc6:	1d 82       	std	Y+5, r1	; 0x05
     fc8:	31 c0       	rjmp	.+98     	; 0x102c <GPIO_readPin+0x126>
			}
		case PORTC_ID:
			if(PINC & (1<<pin_num))
     fca:	e3 e3       	ldi	r30, 0x33	; 51
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a9 01       	movw	r20, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <GPIO_readPin+0xdc>
     fde:	55 95       	asr	r21
     fe0:	47 95       	ror	r20
     fe2:	8a 95       	dec	r24
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <GPIO_readPin+0xd8>
     fe6:	ca 01       	movw	r24, r20
     fe8:	81 70       	andi	r24, 0x01	; 1
     fea:	90 70       	andi	r25, 0x00	; 0
     fec:	88 23       	and	r24, r24
     fee:	19 f0       	breq	.+6      	; 0xff6 <GPIO_readPin+0xf0>
			{
				return LOGIC_HIGH;
     ff0:	51 e0       	ldi	r21, 0x01	; 1
     ff2:	5d 83       	std	Y+5, r21	; 0x05
     ff4:	1b c0       	rjmp	.+54     	; 0x102c <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
     ff6:	1d 82       	std	Y+5, r1	; 0x05
     ff8:	19 c0       	rjmp	.+50     	; 0x102c <GPIO_readPin+0x126>
			}
			case PORTD_ID:
				if(PIND & (1<<pin_num))
     ffa:	e0 e3       	ldi	r30, 0x30	; 48
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a9 01       	movw	r20, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <GPIO_readPin+0x10c>
    100e:	55 95       	asr	r21
    1010:	47 95       	ror	r20
    1012:	8a 95       	dec	r24
    1014:	e2 f7       	brpl	.-8      	; 0x100e <GPIO_readPin+0x108>
    1016:	ca 01       	movw	r24, r20
    1018:	81 70       	andi	r24, 0x01	; 1
    101a:	90 70       	andi	r25, 0x00	; 0
    101c:	88 23       	and	r24, r24
    101e:	19 f0       	breq	.+6      	; 0x1026 <GPIO_readPin+0x120>
				{
					return LOGIC_HIGH;
    1020:	51 e0       	ldi	r21, 0x01	; 1
    1022:	5d 83       	std	Y+5, r21	; 0x05
    1024:	03 c0       	rjmp	.+6      	; 0x102c <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1026:	1d 82       	std	Y+5, r1	; 0x05
    1028:	01 c0       	rjmp	.+2      	; 0x102c <GPIO_readPin+0x126>
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <GPIO_readPin+0x12a>
		}

	}


}
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	8e 83       	std	Y+6, r24	; 0x06
    1030:	8e 81       	ldd	r24, Y+6	; 0x06
    1032:	26 96       	adiw	r28, 0x06	; 6
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <GPIO_setupPortDirection+0x6>
    104a:	00 d0       	rcall	.+0      	; 0x104c <GPIO_setupPortDirection+0x8>
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	84 30       	cpi	r24, 0x04	; 4
    1058:	90 f5       	brcc	.+100    	; 0x10be <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	3c 83       	std	Y+4, r19	; 0x04
    1062:	2b 83       	std	Y+3, r18	; 0x03
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	91 05       	cpc	r25, r1
    106c:	d1 f0       	breq	.+52     	; 0x10a2 <GPIO_setupPortDirection+0x5e>
    106e:	2b 81       	ldd	r18, Y+3	; 0x03
    1070:	3c 81       	ldd	r19, Y+4	; 0x04
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	2c f4       	brge	.+10     	; 0x1082 <GPIO_setupPortDirection+0x3e>
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	61 f0       	breq	.+24     	; 0x1098 <GPIO_setupPortDirection+0x54>
    1080:	1e c0       	rjmp	.+60     	; 0x10be <GPIO_setupPortDirection+0x7a>
    1082:	2b 81       	ldd	r18, Y+3	; 0x03
    1084:	3c 81       	ldd	r19, Y+4	; 0x04
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	81 f0       	breq	.+32     	; 0x10ac <GPIO_setupPortDirection+0x68>
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	91 05       	cpc	r25, r1
    1094:	81 f0       	breq	.+32     	; 0x10b6 <GPIO_setupPortDirection+0x72>
    1096:	13 c0       	rjmp	.+38     	; 0x10be <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1098:	ea e3       	ldi	r30, 0x3A	; 58
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	80 83       	st	Z, r24
    10a0:	0e c0       	rjmp	.+28     	; 0x10be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    10a2:	e7 e3       	ldi	r30, 0x37	; 55
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	80 83       	st	Z, r24
    10aa:	09 c0       	rjmp	.+18     	; 0x10be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    10ac:	e4 e3       	ldi	r30, 0x34	; 52
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	80 83       	st	Z, r24
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    10b6:	e1 e3       	ldi	r30, 0x31	; 49
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	80 83       	st	Z, r24
			break;
		}
	}
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <GPIO_writePort+0x6>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <GPIO_writePort+0x8>
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_num)
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	3c 83       	std	Y+4, r19	; 0x04
    10e4:	2b 83       	std	Y+3, r18	; 0x03
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	91 05       	cpc	r25, r1
    10ee:	d1 f0       	breq	.+52     	; 0x1124 <GPIO_writePort+0x58>
    10f0:	2b 81       	ldd	r18, Y+3	; 0x03
    10f2:	3c 81       	ldd	r19, Y+4	; 0x04
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	31 05       	cpc	r19, r1
    10f8:	2c f4       	brge	.+10     	; 0x1104 <GPIO_writePort+0x38>
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	61 f0       	breq	.+24     	; 0x111a <GPIO_writePort+0x4e>
    1102:	1e c0       	rjmp	.+60     	; 0x1140 <GPIO_writePort+0x74>
    1104:	2b 81       	ldd	r18, Y+3	; 0x03
    1106:	3c 81       	ldd	r19, Y+4	; 0x04
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	81 f0       	breq	.+32     	; 0x112e <GPIO_writePort+0x62>
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	83 30       	cpi	r24, 0x03	; 3
    1114:	91 05       	cpc	r25, r1
    1116:	81 f0       	breq	.+32     	; 0x1138 <GPIO_writePort+0x6c>
    1118:	13 c0       	rjmp	.+38     	; 0x1140 <GPIO_writePort+0x74>
	{
	case PORTA_ID:
		//DDRA = 0;
		PORTA = value;
    111a:	eb e3       	ldi	r30, 0x3B	; 59
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	80 83       	st	Z, r24
    1122:	0e c0       	rjmp	.+28     	; 0x1140 <GPIO_writePort+0x74>
		break;
	case PORTB_ID:
		//DDRB = 0;
		PORTB = value;
    1124:	e8 e3       	ldi	r30, 0x38	; 56
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	80 83       	st	Z, r24
    112c:	09 c0       	rjmp	.+18     	; 0x1140 <GPIO_writePort+0x74>
		break;
	case PORTC_ID:
		//DDRC = 0;
		PORTC = value;
    112e:	e5 e3       	ldi	r30, 0x35	; 53
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	80 83       	st	Z, r24
    1136:	04 c0       	rjmp	.+8      	; 0x1140 <GPIO_writePort+0x74>
		break;
	case PORTD_ID:
		//DDRD = 0;
		PORTD = value;
    1138:	e2 e3       	ldi	r30, 0x32	; 50
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	80 83       	st	Z, r24
		break;
	}


}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <GPIO_readPort+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <GPIO_readPort+0x8>
    1156:	0f 92       	push	r0
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	84 30       	cpi	r24, 0x04	; 4
    1162:	10 f0       	brcs	.+4      	; 0x1168 <GPIO_readPort+0x1a>
	{
		return 0;
    1164:	1c 82       	std	Y+4, r1	; 0x04
    1166:	34 c0       	rjmp	.+104    	; 0x11d0 <GPIO_readPort+0x82>
	}
	else{
		switch(port_num){
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3b 83       	std	Y+3, r19	; 0x03
    1170:	2a 83       	std	Y+2, r18	; 0x02
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	9b 81       	ldd	r25, Y+3	; 0x03
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	91 05       	cpc	r25, r1
    117a:	d1 f0       	breq	.+52     	; 0x11b0 <GPIO_readPort+0x62>
    117c:	2a 81       	ldd	r18, Y+2	; 0x02
    117e:	3b 81       	ldd	r19, Y+3	; 0x03
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	2c f4       	brge	.+10     	; 0x1190 <GPIO_readPort+0x42>
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	9b 81       	ldd	r25, Y+3	; 0x03
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	61 f0       	breq	.+24     	; 0x11a6 <GPIO_readPort+0x58>
    118e:	1f c0       	rjmp	.+62     	; 0x11ce <GPIO_readPort+0x80>
    1190:	2a 81       	ldd	r18, Y+2	; 0x02
    1192:	3b 81       	ldd	r19, Y+3	; 0x03
    1194:	22 30       	cpi	r18, 0x02	; 2
    1196:	31 05       	cpc	r19, r1
    1198:	81 f0       	breq	.+32     	; 0x11ba <GPIO_readPort+0x6c>
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	9b 81       	ldd	r25, Y+3	; 0x03
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	91 05       	cpc	r25, r1
    11a2:	81 f0       	breq	.+32     	; 0x11c4 <GPIO_readPort+0x76>
    11a4:	14 c0       	rjmp	.+40     	; 0x11ce <GPIO_readPort+0x80>
		case PORTA_ID:
			return(PINA);
    11a6:	e9 e3       	ldi	r30, 0x39	; 57
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	90 81       	ld	r25, Z
    11ac:	9c 83       	std	Y+4, r25	; 0x04
    11ae:	10 c0       	rjmp	.+32     	; 0x11d0 <GPIO_readPort+0x82>
		case PORTB_ID:
			return(PINB);
    11b0:	e6 e3       	ldi	r30, 0x36	; 54
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	20 81       	ld	r18, Z
    11b6:	2c 83       	std	Y+4, r18	; 0x04
    11b8:	0b c0       	rjmp	.+22     	; 0x11d0 <GPIO_readPort+0x82>
		case PORTC_ID:
			return(PINC);
    11ba:	e3 e3       	ldi	r30, 0x33	; 51
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	30 81       	ld	r19, Z
    11c0:	3c 83       	std	Y+4, r19	; 0x04
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <GPIO_readPort+0x82>
		case PORTD_ID:
			return(PIND);
    11c4:	e0 e3       	ldi	r30, 0x30	; 48
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	8c 83       	std	Y+4, r24	; 0x04
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <GPIO_readPort+0x82>
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <GPIO_readPort+0x86>

		}

	}

}
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	9d 83       	std	Y+5, r25	; 0x05
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <Timer1_init>:
 *
 */

static volatile void (*g_callBackPtr) (void) = NULL_PTR;
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <Timer1_init+0x6>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <Timer1_init+0x8>
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	89 83       	std	Y+1, r24	; 0x01

	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    11f6:	ef e4       	ldi	r30, 0x4F	; 79
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	8c e0       	ldi	r24, 0x0C	; 12
    11fc:	80 83       	st	Z, r24
	TCNT1 = (Config_Ptr->initial_value);
    11fe:	ac e4       	ldi	r26, 0x4C	; 76
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e9 81       	ldd	r30, Y+1	; 0x01
    1204:	fa 81       	ldd	r31, Y+2	; 0x02
    1206:	80 81       	ld	r24, Z
    1208:	91 81       	ldd	r25, Z+1	; 0x01
    120a:	11 96       	adiw	r26, 0x01	; 1
    120c:	9c 93       	st	X, r25
    120e:	8e 93       	st	-X, r24
	//TCNT1L = (Config_Ptr->initial_value) & (0xFF);

	switch(Config_Ptr->prescaler)
    1210:	e9 81       	ldd	r30, Y+1	; 0x01
    1212:	fa 81       	ldd	r31, Y+2	; 0x02
    1214:	84 81       	ldd	r24, Z+4	; 0x04
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	3c 83       	std	Y+4, r19	; 0x04
    121c:	2b 83       	std	Y+3, r18	; 0x03
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	91 05       	cpc	r25, r1
    1226:	41 f1       	breq	.+80     	; 0x1278 <Timer1_init+0x92>
    1228:	2b 81       	ldd	r18, Y+3	; 0x03
    122a:	3c 81       	ldd	r19, Y+4	; 0x04
    122c:	23 30       	cpi	r18, 0x03	; 3
    122e:	31 05       	cpc	r19, r1
    1230:	54 f4       	brge	.+20     	; 0x1246 <Timer1_init+0x60>
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	b1 f0       	breq	.+44     	; 0x1266 <Timer1_init+0x80>
    123a:	2b 81       	ldd	r18, Y+3	; 0x03
    123c:	3c 81       	ldd	r19, Y+4	; 0x04
    123e:	21 30       	cpi	r18, 0x01	; 1
    1240:	31 05       	cpc	r19, r1
    1242:	a9 f0       	breq	.+42     	; 0x126e <Timer1_init+0x88>
    1244:	2c c0       	rjmp	.+88     	; 0x129e <Timer1_init+0xb8>
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	84 30       	cpi	r24, 0x04	; 4
    124c:	91 05       	cpc	r25, r1
    124e:	f1 f0       	breq	.+60     	; 0x128c <Timer1_init+0xa6>
    1250:	2b 81       	ldd	r18, Y+3	; 0x03
    1252:	3c 81       	ldd	r19, Y+4	; 0x04
    1254:	24 30       	cpi	r18, 0x04	; 4
    1256:	31 05       	cpc	r19, r1
    1258:	a4 f0       	brlt	.+40     	; 0x1282 <Timer1_init+0x9c>
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	9c 81       	ldd	r25, Y+4	; 0x04
    125e:	85 30       	cpi	r24, 0x05	; 5
    1260:	91 05       	cpc	r25, r1
    1262:	c9 f0       	breq	.+50     	; 0x1296 <Timer1_init+0xb0>
    1264:	1c c0       	rjmp	.+56     	; 0x129e <Timer1_init+0xb8>
	{
	case NO_CLOCK:
		TCCR1B = (0<<CS12) | (0<<CS11) | (0<<CS10);
    1266:	ee e4       	ldi	r30, 0x4E	; 78
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	10 82       	st	Z, r1
    126c:	18 c0       	rjmp	.+48     	; 0x129e <Timer1_init+0xb8>
		break;
	case F_CPU_1:
		TCCR1B = (0<<CS12) | (0<<CS11) | (1<<CS10);
    126e:	ee e4       	ldi	r30, 0x4E	; 78
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	80 83       	st	Z, r24
    1276:	13 c0       	rjmp	.+38     	; 0x129e <Timer1_init+0xb8>
		break;
	case F_CPU_8:
		TCCR1B = (0<<CS12) | (1<<CS11) | (0<<CS10);
    1278:	ee e4       	ldi	r30, 0x4E	; 78
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	80 83       	st	Z, r24
    1280:	0e c0       	rjmp	.+28     	; 0x129e <Timer1_init+0xb8>
		break;
	case F_CPU_64:
		TCCR1B = (0<<CS12) | (1<<CS11) | (1<<CS10);
    1282:	ee e4       	ldi	r30, 0x4E	; 78
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	83 e0       	ldi	r24, 0x03	; 3
    1288:	80 83       	st	Z, r24
    128a:	09 c0       	rjmp	.+18     	; 0x129e <Timer1_init+0xb8>
		break;
	case F_CPU_256:
		TCCR1B = (1<<CS12) | (0<<CS11) | (0<<CS10);
    128c:	ee e4       	ldi	r30, 0x4E	; 78
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	84 e0       	ldi	r24, 0x04	; 4
    1292:	80 83       	st	Z, r24
    1294:	04 c0       	rjmp	.+8      	; 0x129e <Timer1_init+0xb8>
		break;
	case F_CPU_1024:
		TCCR1B = (1<<CS12) | (0<<CS11) | (1<<CS10);
    1296:	ee e4       	ldi	r30, 0x4E	; 78
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	85 e0       	ldi	r24, 0x05	; 5
    129c:	80 83       	st	Z, r24

	/*
	 * In case of CTC mode
	 * enable the compare match interrupt enable
	 */
	if(Config_Ptr->mode == COMPARE_MODE)
    129e:	e9 81       	ldd	r30, Y+1	; 0x01
    12a0:	fa 81       	ldd	r31, Y+2	; 0x02
    12a2:	85 81       	ldd	r24, Z+5	; 0x05
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	c1 f4       	brne	.+48     	; 0x12d8 <Timer1_init+0xf2>
	{
		/*WGM12 must be set to 1 in case of CTC mode*/
		TCCR1B |= (1<<WGM12);
    12a8:	ae e4       	ldi	r26, 0x4E	; 78
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	ee e4       	ldi	r30, 0x4E	; 78
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	88 60       	ori	r24, 0x08	; 8
    12b4:	8c 93       	st	X, r24
		/*loading the compare value to the OCR1 compare reg*/
		OCR1A = (Config_Ptr->compare_value);
    12b6:	aa e4       	ldi	r26, 0x4A	; 74
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e9 81       	ldd	r30, Y+1	; 0x01
    12bc:	fa 81       	ldd	r31, Y+2	; 0x02
    12be:	82 81       	ldd	r24, Z+2	; 0x02
    12c0:	93 81       	ldd	r25, Z+3	; 0x03
    12c2:	11 96       	adiw	r26, 0x01	; 1
    12c4:	9c 93       	st	X, r25
    12c6:	8e 93       	st	-X, r24

		/* enable interrupt Timer/Counter1, Output Compare A Match Interrupt Enable
		 * on compare match with OCR1A
		 */
		TIMSK |= (1<<OCIE1A);
    12c8:	a9 e5       	ldi	r26, 0x59	; 89
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e9 e5       	ldi	r30, 0x59	; 89
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	80 61       	ori	r24, 0x10	; 16
    12d4:	8c 93       	st	X, r24
    12d6:	0c c0       	rjmp	.+24     	; 0x12f0 <Timer1_init+0x10a>

	/*
	 * In case of normal mode
	 * enable the overflow interrupt enable
	 */
	else if (Config_Ptr->mode == NORMAL_MODE)
    12d8:	e9 81       	ldd	r30, Y+1	; 0x01
    12da:	fa 81       	ldd	r31, Y+2	; 0x02
    12dc:	85 81       	ldd	r24, Z+5	; 0x05
    12de:	88 23       	and	r24, r24
    12e0:	39 f4       	brne	.+14     	; 0x12f0 <Timer1_init+0x10a>
	{
		/*Timer/Counter1, Overflow Interrupt Enable*/
		TIMSK |= (1<<TOIE1);
    12e2:	a9 e5       	ldi	r26, 0x59	; 89
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e9 e5       	ldi	r30, 0x59	; 89
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	84 60       	ori	r24, 0x04	; 4
    12ee:	8c 93       	st	X, r24
	}

}
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <Timer1_deInit>:
 * compare reg to zero
 * initial value count to zero
 * disabling all time driven interrupts
 */
void Timer1_deInit(void)
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
	/*setting clock select in TCCR1B = 0 */
	TCCR1B = 0;
    1306:	ee e4       	ldi	r30, 0x4E	; 78
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	10 82       	st	Z, r1
	/*setting compare register OCR1A = 0 */
	OCR1A = 0;
    130c:	ea e4       	ldi	r30, 0x4A	; 74
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	11 82       	std	Z+1, r1	; 0x01
    1312:	10 82       	st	Z, r1
	TCNT1 = 0;
    1314:	ec e4       	ldi	r30, 0x4C	; 76
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	11 82       	std	Z+1, r1	; 0x01
    131a:	10 82       	st	Z, r1
	/*disabling overflow and ctc interrupts*/
	TIMSK &= ~((1<<TOIE1) | (1<<OCIE1A));
    131c:	a9 e5       	ldi	r26, 0x59	; 89
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e9 e5       	ldi	r30, 0x59	; 89
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	8b 7e       	andi	r24, 0xEB	; 235
    1328:	8c 93       	st	X, r24
	g_callBackPtr = NULL_PTR;
    132a:	10 92 17 01 	sts	0x0117, r1
    132e:	10 92 16 01 	sts	0x0116, r1


}
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	00 d0       	rcall	.+0      	; 0x133e <Timer1_setCallBack+0x6>
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	9a 83       	std	Y+2, r25	; 0x02
    1344:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	9a 81       	ldd	r25, Y+2	; 0x02
    134a:	90 93 17 01 	sts	0x0117, r25
    134e:	80 93 16 01 	sts	0x0116, r24

}
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <__vector_7>:

// Interrupt Service Routine for timer1 compare mode channel A
ISR(TIMER1_COMPA_vect)
{
    135c:	1f 92       	push	r1
    135e:	0f 92       	push	r0
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	0f 92       	push	r0
    1364:	11 24       	eor	r1, r1
    1366:	2f 93       	push	r18
    1368:	3f 93       	push	r19
    136a:	4f 93       	push	r20
    136c:	5f 93       	push	r21
    136e:	6f 93       	push	r22
    1370:	7f 93       	push	r23
    1372:	8f 93       	push	r24
    1374:	9f 93       	push	r25
    1376:	af 93       	push	r26
    1378:	bf 93       	push	r27
    137a:	ef 93       	push	r30
    137c:	ff 93       	push	r31
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1386:	80 91 16 01 	lds	r24, 0x0116
    138a:	90 91 17 01 	lds	r25, 0x0117
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	29 f0       	breq	.+10     	; 0x139c <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    1392:	e0 91 16 01 	lds	r30, 0x0116
    1396:	f0 91 17 01 	lds	r31, 0x0117
    139a:	09 95       	icall
	}
}
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	ff 91       	pop	r31
    13a2:	ef 91       	pop	r30
    13a4:	bf 91       	pop	r27
    13a6:	af 91       	pop	r26
    13a8:	9f 91       	pop	r25
    13aa:	8f 91       	pop	r24
    13ac:	7f 91       	pop	r23
    13ae:	6f 91       	pop	r22
    13b0:	5f 91       	pop	r21
    13b2:	4f 91       	pop	r20
    13b4:	3f 91       	pop	r19
    13b6:	2f 91       	pop	r18
    13b8:	0f 90       	pop	r0
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	0f 90       	pop	r0
    13be:	1f 90       	pop	r1
    13c0:	18 95       	reti

000013c2 <TIMER1_OVF_Vect>:

ISR(TIMER1_OVF_Vect)
{
    13c2:	1f 92       	push	r1
    13c4:	0f 92       	push	r0
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	0f 92       	push	r0
    13ca:	11 24       	eor	r1, r1
    13cc:	2f 93       	push	r18
    13ce:	3f 93       	push	r19
    13d0:	4f 93       	push	r20
    13d2:	5f 93       	push	r21
    13d4:	6f 93       	push	r22
    13d6:	7f 93       	push	r23
    13d8:	8f 93       	push	r24
    13da:	9f 93       	push	r25
    13dc:	af 93       	push	r26
    13de:	bf 93       	push	r27
    13e0:	ef 93       	push	r30
    13e2:	ff 93       	push	r31
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    13ec:	80 91 16 01 	lds	r24, 0x0116
    13f0:	90 91 17 01 	lds	r25, 0x0117
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	29 f0       	breq	.+10     	; 0x1402 <TIMER1_OVF_Vect+0x40>
	{
		(*g_callBackPtr)();
    13f8:	e0 91 16 01 	lds	r30, 0x0116
    13fc:	f0 91 17 01 	lds	r31, 0x0117
    1400:	09 95       	icall
	}

}
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	ff 91       	pop	r31
    1408:	ef 91       	pop	r30
    140a:	bf 91       	pop	r27
    140c:	af 91       	pop	r26
    140e:	9f 91       	pop	r25
    1410:	8f 91       	pop	r24
    1412:	7f 91       	pop	r23
    1414:	6f 91       	pop	r22
    1416:	5f 91       	pop	r21
    1418:	4f 91       	pop	r20
    141a:	3f 91       	pop	r19
    141c:	2f 91       	pop	r18
    141e:	0f 90       	pop	r0
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	0f 90       	pop	r0
    1424:	1f 90       	pop	r1
    1426:	18 95       	reti

00001428 <UART_init>:
 * Configures frame format
 * enables UART
 * Sets up baud rate
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	2a 97       	sbiw	r28, 0x0a	; 10
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	9c 83       	std	Y+4, r25	; 0x04
    143e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1440:	1a 82       	std	Y+2, r1	; 0x02
    1442:	19 82       	std	Y+1, r1	; 0x01

	/* Double transmission speed for asynchronous mode */
	UCSRA = (1<<U2X);
    1444:	eb e2       	ldi	r30, 0x2B	; 43
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	80 83       	st	Z, r24


	/*Enable transmit and receive for the UART*/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    144c:	ea e2       	ldi	r30, 0x2A	; 42
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	88 e1       	ldi	r24, 0x18	; 24
    1452:	80 83       	st	Z, r24

	/*URSEL bit is set to 1 to specify that we are working on UCRSC to UBRRH*/
	UCSRC_R.Bits.URSEL_Val = 1;
    1454:	e0 e4       	ldi	r30, 0x40	; 64
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	80 68       	ori	r24, 0x80	; 128
    145c:	80 83       	st	Z, r24

	switch(Config_Ptr->bit_data)
    145e:	eb 81       	ldd	r30, Y+3	; 0x03
    1460:	fc 81       	ldd	r31, Y+4	; 0x04
    1462:	80 81       	ld	r24, Z
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	3a 87       	std	Y+10, r19	; 0x0a
    146a:	29 87       	std	Y+9, r18	; 0x09
    146c:	89 85       	ldd	r24, Y+9	; 0x09
    146e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1470:	82 30       	cpi	r24, 0x02	; 2
    1472:	91 05       	cpc	r25, r1
    1474:	a9 f1       	breq	.+106    	; 0x14e0 <UART_init+0xb8>
    1476:	29 85       	ldd	r18, Y+9	; 0x09
    1478:	3a 85       	ldd	r19, Y+10	; 0x0a
    147a:	23 30       	cpi	r18, 0x03	; 3
    147c:	31 05       	cpc	r19, r1
    147e:	54 f4       	brge	.+20     	; 0x1494 <UART_init+0x6c>
    1480:	89 85       	ldd	r24, Y+9	; 0x09
    1482:	9a 85       	ldd	r25, Y+10	; 0x0a
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	89 f0       	breq	.+34     	; 0x14aa <UART_init+0x82>
    1488:	29 85       	ldd	r18, Y+9	; 0x09
    148a:	3a 85       	ldd	r19, Y+10	; 0x0a
    148c:	21 30       	cpi	r18, 0x01	; 1
    148e:	31 05       	cpc	r19, r1
    1490:	c9 f0       	breq	.+50     	; 0x14c4 <UART_init+0x9c>
    1492:	4d c0       	rjmp	.+154    	; 0x152e <UART_init+0x106>
    1494:	89 85       	ldd	r24, Y+9	; 0x09
    1496:	9a 85       	ldd	r25, Y+10	; 0x0a
    1498:	83 30       	cpi	r24, 0x03	; 3
    149a:	91 05       	cpc	r25, r1
    149c:	79 f1       	breq	.+94     	; 0x14fc <UART_init+0xd4>
    149e:	29 85       	ldd	r18, Y+9	; 0x09
    14a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    14a2:	24 30       	cpi	r18, 0x04	; 4
    14a4:	31 05       	cpc	r19, r1
    14a6:	b9 f1       	breq	.+110    	; 0x1516 <UART_init+0xee>
    14a8:	42 c0       	rjmp	.+132    	; 0x152e <UART_init+0x106>
	{
	case FIVE_BIT_DATA_MODE:
		UCSRC_R.Bits.UCSZ1To0_Val = 0;
    14aa:	e0 e4       	ldi	r30, 0x40	; 64
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	89 7f       	andi	r24, 0xF9	; 249
    14b2:	80 83       	st	Z, r24
		UCSRB &= ~(1<<UCSZ2);
    14b4:	aa e2       	ldi	r26, 0x2A	; 42
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	ea e2       	ldi	r30, 0x2A	; 42
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	8b 7f       	andi	r24, 0xFB	; 251
    14c0:	8c 93       	st	X, r24
    14c2:	35 c0       	rjmp	.+106    	; 0x152e <UART_init+0x106>
		break;
	case SIX_BIT_DATA_MODE:
		UCSRC_R.Bits.UCSZ1To0_Val = 1;
    14c4:	e0 e4       	ldi	r30, 0x40	; 64
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	89 7f       	andi	r24, 0xF9	; 249
    14cc:	82 60       	ori	r24, 0x02	; 2
    14ce:	80 83       	st	Z, r24
		UCSRB &= ~(1<<UCSZ2);
    14d0:	aa e2       	ldi	r26, 0x2A	; 42
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ea e2       	ldi	r30, 0x2A	; 42
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	8b 7f       	andi	r24, 0xFB	; 251
    14dc:	8c 93       	st	X, r24
    14de:	27 c0       	rjmp	.+78     	; 0x152e <UART_init+0x106>
		break;
	case SEVEN_BIT_DATA_MODE:
		UCSRC_R.Bits.UCSZ1To0_Val = 2;
    14e0:	e0 e4       	ldi	r30, 0x40	; 64
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	89 7f       	andi	r24, 0xF9	; 249
    14e8:	84 60       	ori	r24, 0x04	; 4
    14ea:	80 83       	st	Z, r24
		UCSRB &= ~(1<<UCSZ2);
    14ec:	aa e2       	ldi	r26, 0x2A	; 42
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ea e2       	ldi	r30, 0x2A	; 42
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	8b 7f       	andi	r24, 0xFB	; 251
    14f8:	8c 93       	st	X, r24
    14fa:	19 c0       	rjmp	.+50     	; 0x152e <UART_init+0x106>
		break;
	case EIGHT_BIT_DATA_MODE:
		UCSRC_R.Bits.UCSZ1To0_Val = 3;
    14fc:	e0 e4       	ldi	r30, 0x40	; 64
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	86 60       	ori	r24, 0x06	; 6
    1504:	80 83       	st	Z, r24
		UCSRB &= ~(1<<UCSZ2);
    1506:	aa e2       	ldi	r26, 0x2A	; 42
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ea e2       	ldi	r30, 0x2A	; 42
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	8b 7f       	andi	r24, 0xFB	; 251
    1512:	8c 93       	st	X, r24
    1514:	0c c0       	rjmp	.+24     	; 0x152e <UART_init+0x106>
		break;
	case NINE_BIT_DATA_MODE:
		UCSRC_R.Bits.UCSZ1To0_Val = 3;
    1516:	e0 e4       	ldi	r30, 0x40	; 64
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	86 60       	ori	r24, 0x06	; 6
    151e:	80 83       	st	Z, r24
		UCSRB = UCSRB | (1<<UCSZ2);
    1520:	aa e2       	ldi	r26, 0x2A	; 42
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	ea e2       	ldi	r30, 0x2A	; 42
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	84 60       	ori	r24, 0x04	; 4
    152c:	8c 93       	st	X, r24
		break;
	}

	switch(Config_Ptr->parity)
    152e:	eb 81       	ldd	r30, Y+3	; 0x03
    1530:	fc 81       	ldd	r31, Y+4	; 0x04
    1532:	81 81       	ldd	r24, Z+1	; 0x01
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	38 87       	std	Y+8, r19	; 0x08
    153a:	2f 83       	std	Y+7, r18	; 0x07
    153c:	8f 81       	ldd	r24, Y+7	; 0x07
    153e:	98 85       	ldd	r25, Y+8	; 0x08
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	91 05       	cpc	r25, r1
    1544:	79 f0       	breq	.+30     	; 0x1564 <UART_init+0x13c>
    1546:	2f 81       	ldd	r18, Y+7	; 0x07
    1548:	38 85       	ldd	r19, Y+8	; 0x08
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	89 f0       	breq	.+34     	; 0x1572 <UART_init+0x14a>
    1550:	8f 81       	ldd	r24, Y+7	; 0x07
    1552:	98 85       	ldd	r25, Y+8	; 0x08
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	91 f4       	brne	.+36     	; 0x157c <UART_init+0x154>
	{
	case DISABLED_PARITY_MODE:
		UCSRC_R.Bits.UPM1To0_Val = 0;
    1558:	e0 e4       	ldi	r30, 0x40	; 64
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8f 7c       	andi	r24, 0xCF	; 207
    1560:	80 83       	st	Z, r24
    1562:	0c c0       	rjmp	.+24     	; 0x157c <UART_init+0x154>
		break;
	case EVEN_PARITY_MODE:
		UCSRC_R.Bits.UPM1To0_Val = 2;
    1564:	e0 e4       	ldi	r30, 0x40	; 64
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	8f 7c       	andi	r24, 0xCF	; 207
    156c:	80 62       	ori	r24, 0x20	; 32
    156e:	80 83       	st	Z, r24
    1570:	05 c0       	rjmp	.+10     	; 0x157c <UART_init+0x154>
		break;
	case ODD_PARITY_MODE:
		UCSRC_R.Bits.UPM1To0_Val = 3;
    1572:	e0 e4       	ldi	r30, 0x40	; 64
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	80 63       	ori	r24, 0x30	; 48
    157a:	80 83       	st	Z, r24
		break;
	}

	switch(Config_Ptr->stop_bit)
    157c:	eb 81       	ldd	r30, Y+3	; 0x03
    157e:	fc 81       	ldd	r31, Y+4	; 0x04
    1580:	82 81       	ldd	r24, Z+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	3e 83       	std	Y+6, r19	; 0x06
    1588:	2d 83       	std	Y+5, r18	; 0x05
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	31 f0       	breq	.+12     	; 0x159e <UART_init+0x176>
    1592:	2d 81       	ldd	r18, Y+5	; 0x05
    1594:	3e 81       	ldd	r19, Y+6	; 0x06
    1596:	21 30       	cpi	r18, 0x01	; 1
    1598:	31 05       	cpc	r19, r1
    159a:	39 f0       	breq	.+14     	; 0x15aa <UART_init+0x182>
    159c:	0b c0       	rjmp	.+22     	; 0x15b4 <UART_init+0x18c>
	{
	case ONE_BIT_MODE:
		UCSRC_R.Bits.USBS_Val = 0;
    159e:	e0 e4       	ldi	r30, 0x40	; 64
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	87 7f       	andi	r24, 0xF7	; 247
    15a6:	80 83       	st	Z, r24
    15a8:	05 c0       	rjmp	.+10     	; 0x15b4 <UART_init+0x18c>
		break;
	case TWO_BIT_MODE:
		UCSRC_R.Bits.USBS_Val = 1;
    15aa:	e0 e4       	ldi	r30, 0x40	; 64
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	88 60       	ori	r24, 0x08	; 8
    15b2:	80 83       	st	Z, r24
		break;


	}
	UCSRC_R.Bits.UCPOL_Val = 0;
    15b4:	e0 e4       	ldi	r30, 0x40	; 64
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	8e 7f       	andi	r24, 0xFE	; 254
    15bc:	80 83       	st	Z, r24
	UCSRC_R.Bits.UMSEL_Val = 0;
    15be:	e0 e4       	ldi	r30, 0x40	; 64
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8f 7b       	andi	r24, 0xBF	; 191
    15c6:	80 83       	st	Z, r24

	/*
	 * URSEL = 1
	 * UCSZ1:0 = 11 for enabling 8-bit mode
	 */
	ubrr_value = (uint16)(((F_CPU/((Config_Ptr->baud_rate) * 8UL)))-1);
    15c8:	eb 81       	ldd	r30, Y+3	; 0x03
    15ca:	fc 81       	ldd	r31, Y+4	; 0x04
    15cc:	83 81       	ldd	r24, Z+3	; 0x03
    15ce:	94 81       	ldd	r25, Z+4	; 0x04
    15d0:	a5 81       	ldd	r26, Z+5	; 0x05
    15d2:	b6 81       	ldd	r27, Z+6	; 0x06
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	aa 1f       	adc	r26, r26
    15da:	bb 1f       	adc	r27, r27
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	aa 1f       	adc	r26, r26
    15e2:	bb 1f       	adc	r27, r27
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	aa 1f       	adc	r26, r26
    15ea:	bb 1f       	adc	r27, r27
    15ec:	9c 01       	movw	r18, r24
    15ee:	ad 01       	movw	r20, r26
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	92 e1       	ldi	r25, 0x12	; 18
    15f4:	aa e7       	ldi	r26, 0x7A	; 122
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	bc 01       	movw	r22, r24
    15fa:	cd 01       	movw	r24, r26
    15fc:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__udivmodsi4>
    1600:	da 01       	movw	r26, r20
    1602:	c9 01       	movw	r24, r18
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = ubrr_value>>8;
    160a:	e0 e4       	ldi	r30, 0x40	; 64
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	9a 81       	ldd	r25, Y+2	; 0x02
    1612:	89 2f       	mov	r24, r25
    1614:	99 27       	eor	r25, r25
    1616:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1618:	e9 e2       	ldi	r30, 0x29	; 41
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	80 83       	st	Z, r24
}
    1620:	2a 96       	adiw	r28, 0x0a	; 10
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <UART_sendByte>:
/*
 * Description:
 * Send byte to another UART device
 */
void UART_sendByte(const uint8 data)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	0f 92       	push	r0
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * wait for the data buffer to be empty
	 * so we can send a byte of data
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    163e:	eb e2       	ldi	r30, 0x2B	; 43
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	80 72       	andi	r24, 0x20	; 32
    164a:	90 70       	andi	r25, 0x00	; 0
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	b9 f3       	breq	.-18     	; 0x163e <UART_sendByte+0xc>
	UDR = data;
    1650:	ec e2       	ldi	r30, 0x2C	; 44
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	80 83       	st	Z, r24
}
    1658:	0f 90       	pop	r0
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <UART_receiveByte>:
/*
 * Description:
 * Receive byte from another UART device
 */
uint8 UART_receiveByte(void)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    1668:	eb e2       	ldi	r30, 0x2B	; 43
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	88 23       	and	r24, r24
    1670:	dc f7       	brge	.-10     	; 0x1668 <UART_receiveByte+0x8>
	return UDR;
    1672:	ec e2       	ldi	r30, 0x2C	; 44
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z

}
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	00 d0       	rcall	.+0      	; 0x1684 <UART_sendString+0x6>
    1684:	0f 92       	push	r0
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	9b 83       	std	Y+3, r25	; 0x03
    168c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 index = 0;
    168e:	19 82       	std	Y+1, r1	; 0x01
    1690:	0e c0       	rjmp	.+28     	; 0x16ae <UART_sendString+0x30>
	while(Str[index] != '\0')
	{
		UART_sendByte(Str[index]);
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	9b 81       	ldd	r25, Y+3	; 0x03
    169c:	fc 01       	movw	r30, r24
    169e:	e2 0f       	add	r30, r18
    16a0:	f3 1f       	adc	r31, r19
    16a2:	80 81       	ld	r24, Z
    16a4:	0e 94 19 0b 	call	0x1632	; 0x1632 <UART_sendByte>
		index++;
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	8f 5f       	subi	r24, 0xFF	; 255
    16ac:	89 83       	std	Y+1, r24	; 0x01
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
	uint8 index = 0;
	while(Str[index] != '\0')
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	9b 81       	ldd	r25, Y+3	; 0x03
    16b8:	fc 01       	movw	r30, r24
    16ba:	e2 0f       	add	r30, r18
    16bc:	f3 1f       	adc	r31, r19
    16be:	80 81       	ld	r24, Z
    16c0:	88 23       	and	r24, r24
    16c2:	39 f7       	brne	.-50     	; 0x1692 <UART_sendString+0x14>
	{
		UART_sendByte(Str[index]);
		index++;
	}

}
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	00 d0       	rcall	.+0      	; 0x16da <UART_receiveString+0xa>
    16da:	0f 92       	push	r0
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	9b 83       	std	Y+3, r25	; 0x03
    16e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    16e4:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = UART_receiveByte();
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	9b 81       	ldd	r25, Y+3	; 0x03
    16f0:	8c 01       	movw	r16, r24
    16f2:	02 0f       	add	r16, r18
    16f4:	13 1f       	adc	r17, r19
    16f6:	0e 94 30 0b 	call	0x1660	; 0x1660 <UART_receiveByte>
    16fa:	f8 01       	movw	r30, r16
    16fc:	80 83       	st	Z, r24
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <UART_receiveString+0x4e>

	while(Str[i] != '#')
	{
		i++;
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	8f 5f       	subi	r24, 0xFF	; 255
    1704:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	9b 81       	ldd	r25, Y+3	; 0x03
    1710:	8c 01       	movw	r16, r24
    1712:	02 0f       	add	r16, r18
    1714:	13 1f       	adc	r17, r19
    1716:	0e 94 30 0b 	call	0x1660	; 0x1660 <UART_receiveByte>
    171a:	f8 01       	movw	r30, r16
    171c:	80 83       	st	Z, r24
{
	uint8 i = 0;

	Str[i] = UART_receiveByte();

	while(Str[i] != '#')
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	9b 81       	ldd	r25, Y+3	; 0x03
    1728:	fc 01       	movw	r30, r24
    172a:	e2 0f       	add	r30, r18
    172c:	f3 1f       	adc	r31, r19
    172e:	80 81       	ld	r24, Z
    1730:	83 32       	cpi	r24, 0x23	; 35
    1732:	31 f7       	brne	.-52     	; 0x1700 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_receiveByte();
	}

	Str[i] = '\0';
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	9b 81       	ldd	r25, Y+3	; 0x03
    173e:	fc 01       	movw	r30, r24
    1740:	e2 0f       	add	r30, r18
    1742:	f3 1f       	adc	r31, r19
    1744:	10 82       	st	Z, r1
}
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	08 95       	ret

00001756 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	60 97       	sbiw	r28, 0x10	; 16
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	64 e0       	ldi	r22, 0x04	; 4
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	65 e0       	ldi	r22, 0x05	; 5
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	66 e0       	ldi	r22, 0x06	; 6
    1782:	40 e0       	ldi	r20, 0x00	; 0
    1784:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	67 e0       	ldi	r22, 0x07	; 7
    178c:	40 e0       	ldi	r20, 0x00	; 0
    178e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1792:	83 e0       	ldi	r24, 0x03	; 3
    1794:	62 e0       	ldi	r22, 0x02	; 2
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    179c:	83 e0       	ldi	r24, 0x03	; 3
    179e:	63 e0       	ldi	r22, 0x03	; 3
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    17a6:	83 e0       	ldi	r24, 0x03	; 3
    17a8:	64 e0       	ldi	r22, 0x04	; 4
    17aa:	40 e0       	ldi	r20, 0x00	; 0
    17ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    17b0:	83 e0       	ldi	r24, 0x03	; 3
    17b2:	65 e0       	ldi	r22, 0x05	; 5
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    17ba:	1f 86       	std	Y+15, r1	; 0x0f
    17bc:	b4 c0       	rjmp	.+360    	; 0x1926 <KEYPAD_getPressedKey+0x1d0>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    17be:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c0:	98 2f       	mov	r25, r24
    17c2:	9c 5f       	subi	r25, 0xFC	; 252
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	69 2f       	mov	r22, r25
    17c8:	41 e0       	ldi	r20, 0x01	; 1
    17ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    17ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d0:	98 2f       	mov	r25, r24
    17d2:	9c 5f       	subi	r25, 0xFC	; 252
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	69 2f       	mov	r22, r25
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    17de:	18 8a       	std	Y+16, r1	; 0x10
    17e0:	22 c0       	rjmp	.+68     	; 0x1826 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    17e2:	88 89       	ldd	r24, Y+16	; 0x10
    17e4:	98 2f       	mov	r25, r24
    17e6:	9e 5f       	subi	r25, 0xFE	; 254
    17e8:	83 e0       	ldi	r24, 0x03	; 3
    17ea:	69 2f       	mov	r22, r25
    17ec:	0e 94 83 07 	call	0xf06	; 0xf06 <GPIO_readPin>
    17f0:	88 23       	and	r24, r24
    17f2:	b1 f4       	brne	.+44     	; 0x1820 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    17f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f6:	88 2f       	mov	r24, r24
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	98 2f       	mov	r25, r24
    1804:	88 89       	ldd	r24, Y+16	; 0x10
    1806:	89 0f       	add	r24, r25
    1808:	8f 5f       	subi	r24, 0xFF	; 255
    180a:	0e 94 98 0c 	call	0x1930	; 0x1930 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    180e:	60 96       	adiw	r28, 0x10	; 16
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1820:	88 89       	ldd	r24, Y+16	; 0x10
    1822:	8f 5f       	subi	r24, 0xFF	; 255
    1824:	88 8b       	std	Y+16, r24	; 0x10
    1826:	88 89       	ldd	r24, Y+16	; 0x10
    1828:	84 30       	cpi	r24, 0x04	; 4
    182a:	d8 f2       	brcs	.-74     	; 0x17e2 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    182c:	8f 85       	ldd	r24, Y+15	; 0x0f
    182e:	98 2f       	mov	r25, r24
    1830:	9c 5f       	subi	r25, 0xFC	; 252
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	69 2f       	mov	r22, r25
    1836:	40 e0       	ldi	r20, 0x00	; 0
    1838:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	a0 ea       	ldi	r26, 0xA0	; 160
    1842:	b0 e4       	ldi	r27, 0x40	; 64
    1844:	8b 87       	std	Y+11, r24	; 0x0b
    1846:	9c 87       	std	Y+12, r25	; 0x0c
    1848:	ad 87       	std	Y+13, r26	; 0x0d
    184a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184c:	6b 85       	ldd	r22, Y+11	; 0x0b
    184e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1850:	8d 85       	ldd	r24, Y+13	; 0x0d
    1852:	9e 85       	ldd	r25, Y+14	; 0x0e
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	4a ef       	ldi	r20, 0xFA	; 250
    185a:	54 e4       	ldi	r21, 0x44	; 68
    185c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	8f 83       	std	Y+7, r24	; 0x07
    1866:	98 87       	std	Y+8, r25	; 0x08
    1868:	a9 87       	std	Y+9, r26	; 0x09
    186a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    186c:	6f 81       	ldd	r22, Y+7	; 0x07
    186e:	78 85       	ldd	r23, Y+8	; 0x08
    1870:	89 85       	ldd	r24, Y+9	; 0x09
    1872:	9a 85       	ldd	r25, Y+10	; 0x0a
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e8       	ldi	r20, 0x80	; 128
    187a:	5f e3       	ldi	r21, 0x3F	; 63
    187c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1880:	88 23       	and	r24, r24
    1882:	2c f4       	brge	.+10     	; 0x188e <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	9e 83       	std	Y+6, r25	; 0x06
    188a:	8d 83       	std	Y+5, r24	; 0x05
    188c:	3f c0       	rjmp	.+126    	; 0x190c <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    188e:	6f 81       	ldd	r22, Y+7	; 0x07
    1890:	78 85       	ldd	r23, Y+8	; 0x08
    1892:	89 85       	ldd	r24, Y+9	; 0x09
    1894:	9a 85       	ldd	r25, Y+10	; 0x0a
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	3f ef       	ldi	r19, 0xFF	; 255
    189a:	4f e7       	ldi	r20, 0x7F	; 127
    189c:	57 e4       	ldi	r21, 0x47	; 71
    189e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a2:	18 16       	cp	r1, r24
    18a4:	4c f5       	brge	.+82     	; 0x18f8 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e2       	ldi	r20, 0x20	; 32
    18b4:	51 e4       	ldi	r21, 0x41	; 65
    18b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	bc 01       	movw	r22, r24
    18c0:	cd 01       	movw	r24, r26
    18c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	9e 83       	std	Y+6, r25	; 0x06
    18cc:	8d 83       	std	Y+5, r24	; 0x05
    18ce:	0f c0       	rjmp	.+30     	; 0x18ee <KEYPAD_getPressedKey+0x198>
    18d0:	88 ec       	ldi	r24, 0xC8	; 200
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	9c 83       	std	Y+4, r25	; 0x04
    18d6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <KEYPAD_getPressedKey+0x186>
    18e0:	9c 83       	std	Y+4, r25	; 0x04
    18e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	9e 83       	std	Y+6, r25	; 0x06
    18ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	9e 81       	ldd	r25, Y+6	; 0x06
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	69 f7       	brne	.-38     	; 0x18d0 <KEYPAD_getPressedKey+0x17a>
    18f6:	14 c0       	rjmp	.+40     	; 0x1920 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f8:	6f 81       	ldd	r22, Y+7	; 0x07
    18fa:	78 85       	ldd	r23, Y+8	; 0x08
    18fc:	89 85       	ldd	r24, Y+9	; 0x09
    18fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	9e 83       	std	Y+6, r25	; 0x06
    190a:	8d 83       	std	Y+5, r24	; 0x05
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	9a 83       	std	Y+2, r25	; 0x02
    1912:	89 83       	std	Y+1, r24	; 0x01
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <KEYPAD_getPressedKey+0x1c2>
    191c:	9a 83       	std	Y+2, r25	; 0x02
    191e:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1920:	8f 85       	ldd	r24, Y+15	; 0x0f
    1922:	8f 5f       	subi	r24, 0xFF	; 255
    1924:	8f 87       	std	Y+15, r24	; 0x0f
    1926:	8f 85       	ldd	r24, Y+15	; 0x0f
    1928:	84 30       	cpi	r24, 0x04	; 4
    192a:	08 f4       	brcc	.+2      	; 0x192e <KEYPAD_getPressedKey+0x1d8>
    192c:	48 cf       	rjmp	.-368    	; 0x17be <KEYPAD_getPressedKey+0x68>
    192e:	45 cf       	rjmp	.-374    	; 0x17ba <KEYPAD_getPressedKey+0x64>

00001930 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    193e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	3c 83       	std	Y+4, r19	; 0x04
    1948:	2b 83       	std	Y+3, r18	; 0x03
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	9c 81       	ldd	r25, Y+4	; 0x04
    194e:	88 30       	cpi	r24, 0x08	; 8
    1950:	91 05       	cpc	r25, r1
    1952:	09 f4       	brne	.+2      	; 0x1956 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1954:	70 c0       	rjmp	.+224    	; 0x1a36 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1956:	2b 81       	ldd	r18, Y+3	; 0x03
    1958:	3c 81       	ldd	r19, Y+4	; 0x04
    195a:	29 30       	cpi	r18, 0x09	; 9
    195c:	31 05       	cpc	r19, r1
    195e:	5c f5       	brge	.+86     	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	9c 81       	ldd	r25, Y+4	; 0x04
    1964:	84 30       	cpi	r24, 0x04	; 4
    1966:	91 05       	cpc	r25, r1
    1968:	09 f4       	brne	.+2      	; 0x196c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    196a:	59 c0       	rjmp	.+178    	; 0x1a1e <KEYPAD_4x4_adjustKeyNumber+0xee>
    196c:	2b 81       	ldd	r18, Y+3	; 0x03
    196e:	3c 81       	ldd	r19, Y+4	; 0x04
    1970:	25 30       	cpi	r18, 0x05	; 5
    1972:	31 05       	cpc	r19, r1
    1974:	9c f4       	brge	.+38     	; 0x199c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	82 30       	cpi	r24, 0x02	; 2
    197c:	91 05       	cpc	r25, r1
    197e:	09 f4       	brne	.+2      	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1980:	48 c0       	rjmp	.+144    	; 0x1a12 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1982:	2b 81       	ldd	r18, Y+3	; 0x03
    1984:	3c 81       	ldd	r19, Y+4	; 0x04
    1986:	23 30       	cpi	r18, 0x03	; 3
    1988:	31 05       	cpc	r19, r1
    198a:	0c f0       	brlt	.+2      	; 0x198e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    198c:	45 c0       	rjmp	.+138    	; 0x1a18 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	91 05       	cpc	r25, r1
    1996:	09 f4       	brne	.+2      	; 0x199a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1998:	39 c0       	rjmp	.+114    	; 0x1a0c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    199a:	67 c0       	rjmp	.+206    	; 0x1a6a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    199c:	2b 81       	ldd	r18, Y+3	; 0x03
    199e:	3c 81       	ldd	r19, Y+4	; 0x04
    19a0:	26 30       	cpi	r18, 0x06	; 6
    19a2:	31 05       	cpc	r19, r1
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <KEYPAD_4x4_adjustKeyNumber+0x78>
    19a6:	41 c0       	rjmp	.+130    	; 0x1a2a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	9c 81       	ldd	r25, Y+4	; 0x04
    19ac:	87 30       	cpi	r24, 0x07	; 7
    19ae:	91 05       	cpc	r25, r1
    19b0:	0c f0       	brlt	.+2      	; 0x19b4 <KEYPAD_4x4_adjustKeyNumber+0x84>
    19b2:	3e c0       	rjmp	.+124    	; 0x1a30 <KEYPAD_4x4_adjustKeyNumber+0x100>
    19b4:	37 c0       	rjmp	.+110    	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    19b6:	2b 81       	ldd	r18, Y+3	; 0x03
    19b8:	3c 81       	ldd	r19, Y+4	; 0x04
    19ba:	2c 30       	cpi	r18, 0x0C	; 12
    19bc:	31 05       	cpc	r19, r1
    19be:	09 f4       	brne	.+2      	; 0x19c2 <KEYPAD_4x4_adjustKeyNumber+0x92>
    19c0:	46 c0       	rjmp	.+140    	; 0x1a4e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	9c 81       	ldd	r25, Y+4	; 0x04
    19c6:	8d 30       	cpi	r24, 0x0D	; 13
    19c8:	91 05       	cpc	r25, r1
    19ca:	5c f4       	brge	.+22     	; 0x19e2 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    19cc:	2b 81       	ldd	r18, Y+3	; 0x03
    19ce:	3c 81       	ldd	r19, Y+4	; 0x04
    19d0:	2a 30       	cpi	r18, 0x0A	; 10
    19d2:	31 05       	cpc	r19, r1
    19d4:	b1 f1       	breq	.+108    	; 0x1a42 <KEYPAD_4x4_adjustKeyNumber+0x112>
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	9c 81       	ldd	r25, Y+4	; 0x04
    19da:	8b 30       	cpi	r24, 0x0B	; 11
    19dc:	91 05       	cpc	r25, r1
    19de:	a4 f5       	brge	.+104    	; 0x1a48 <KEYPAD_4x4_adjustKeyNumber+0x118>
    19e0:	2d c0       	rjmp	.+90     	; 0x1a3c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    19e2:	2b 81       	ldd	r18, Y+3	; 0x03
    19e4:	3c 81       	ldd	r19, Y+4	; 0x04
    19e6:	2e 30       	cpi	r18, 0x0E	; 14
    19e8:	31 05       	cpc	r19, r1
    19ea:	b9 f1       	breq	.+110    	; 0x1a5a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	8e 30       	cpi	r24, 0x0E	; 14
    19f2:	91 05       	cpc	r25, r1
    19f4:	7c f1       	brlt	.+94     	; 0x1a54 <KEYPAD_4x4_adjustKeyNumber+0x124>
    19f6:	2b 81       	ldd	r18, Y+3	; 0x03
    19f8:	3c 81       	ldd	r19, Y+4	; 0x04
    19fa:	2f 30       	cpi	r18, 0x0F	; 15
    19fc:	31 05       	cpc	r19, r1
    19fe:	79 f1       	breq	.+94     	; 0x1a5e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	80 31       	cpi	r24, 0x10	; 16
    1a06:	91 05       	cpc	r25, r1
    1a08:	69 f1       	breq	.+90     	; 0x1a64 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1a0a:	2f c0       	rjmp	.+94     	; 0x1a6a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1a0c:	87 e0       	ldi	r24, 0x07	; 7
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	2e c0       	rjmp	.+92     	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1a12:	88 e0       	ldi	r24, 0x08	; 8
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	2b c0       	rjmp	.+86     	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1a18:	89 e0       	ldi	r24, 0x09	; 9
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	28 c0       	rjmp	.+80     	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1a1e:	85 e2       	ldi	r24, 0x25	; 37
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	25 c0       	rjmp	.+74     	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1a24:	84 e0       	ldi	r24, 0x04	; 4
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	22 c0       	rjmp	.+68     	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1a2a:	85 e0       	ldi	r24, 0x05	; 5
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	1f c0       	rjmp	.+62     	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1a30:	86 e0       	ldi	r24, 0x06	; 6
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	1c c0       	rjmp	.+56     	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1a36:	8a e2       	ldi	r24, 0x2A	; 42
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	19 c0       	rjmp	.+50     	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	16 c0       	rjmp	.+44     	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1a42:	82 e0       	ldi	r24, 0x02	; 2
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	13 c0       	rjmp	.+38     	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1a48:	83 e0       	ldi	r24, 0x03	; 3
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	10 c0       	rjmp	.+32     	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1a4e:	8d e2       	ldi	r24, 0x2D	; 45
    1a50:	89 83       	std	Y+1, r24	; 0x01
    1a52:	0d c0       	rjmp	.+26     	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1a54:	8d e0       	ldi	r24, 0x0D	; 13
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	0a c0       	rjmp	.+20     	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1a5a:	19 82       	std	Y+1, r1	; 0x01
    1a5c:	08 c0       	rjmp	.+16     	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1a5e:	8d e3       	ldi	r24, 0x3D	; 61
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	05 c0       	rjmp	.+10     	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1a64:	8b e2       	ldi	r24, 0x2B	; 43
    1a66:	89 83       	std	Y+1, r24	; 0x01
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <LCD_init>:
#include "../common_macros.h"
/*
 * The file is intended to control LCD
 */
void LCD_init(void)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	2e 97       	sbiw	r28, 0x0e	; 14
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
	/* setup the RS as output*/
	GPIO_setupPinDirection(LCD_CONFIGS_PORT, LCD_RS, PIN_OUTPUT);
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	61 e0       	ldi	r22, 0x01	; 1
    1a96:	41 e0       	ldi	r20, 0x01	; 1
    1a98:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	/* setup the Enable pin as output*/
	GPIO_setupPinDirection(LCD_CONFIGS_PORT, LCD_E, PIN_OUTPUT);
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	62 e0       	ldi	r22, 0x02	; 2
    1aa0:	41 e0       	ldi	r20, 0x01	; 1
    1aa2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	a0 ea       	ldi	r26, 0xA0	; 160
    1aac:	b1 e4       	ldi	r27, 0x41	; 65
    1aae:	8b 87       	std	Y+11, r24	; 0x0b
    1ab0:	9c 87       	std	Y+12, r25	; 0x0c
    1ab2:	ad 87       	std	Y+13, r26	; 0x0d
    1ab4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	4a ef       	ldi	r20, 0xFA	; 250
    1ac4:	54 e4       	ldi	r21, 0x44	; 68
    1ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	8f 83       	std	Y+7, r24	; 0x07
    1ad0:	98 87       	std	Y+8, r25	; 0x08
    1ad2:	a9 87       	std	Y+9, r26	; 0x09
    1ad4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad8:	78 85       	ldd	r23, Y+8	; 0x08
    1ada:	89 85       	ldd	r24, Y+9	; 0x09
    1adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	5f e3       	ldi	r21, 0x3F	; 63
    1ae6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aea:	88 23       	and	r24, r24
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <LCD_init+0x7a>
		__ticks = 1;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	9e 83       	std	Y+6, r25	; 0x06
    1af4:	8d 83       	std	Y+5, r24	; 0x05
    1af6:	3f c0       	rjmp	.+126    	; 0x1b76 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1af8:	6f 81       	ldd	r22, Y+7	; 0x07
    1afa:	78 85       	ldd	r23, Y+8	; 0x08
    1afc:	89 85       	ldd	r24, Y+9	; 0x09
    1afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	3f ef       	ldi	r19, 0xFF	; 255
    1b04:	4f e7       	ldi	r20, 0x7F	; 127
    1b06:	57 e4       	ldi	r21, 0x47	; 71
    1b08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b0c:	18 16       	cp	r1, r24
    1b0e:	4c f5       	brge	.+82     	; 0x1b62 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e2       	ldi	r20, 0x20	; 32
    1b1e:	51 e4       	ldi	r21, 0x41	; 65
    1b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	0f c0       	rjmp	.+30     	; 0x1b58 <LCD_init+0xda>
    1b3a:	88 ec       	ldi	r24, 0xC8	; 200
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
    1b40:	8b 83       	std	Y+3, r24	; 0x03
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <LCD_init+0xc8>
    1b4a:	9c 83       	std	Y+4, r25	; 0x04
    1b4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	9e 83       	std	Y+6, r25	; 0x06
    1b56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	69 f7       	brne	.-38     	; 0x1b3a <LCD_init+0xbc>
    1b60:	14 c0       	rjmp	.+40     	; 0x1b8a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b62:	6f 81       	ldd	r22, Y+7	; 0x07
    1b64:	78 85       	ldd	r23, Y+8	; 0x08
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7a:	9a 83       	std	Y+2, r25	; 0x02
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	9a 81       	ldd	r25, Y+2	; 0x02
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <LCD_init+0x104>
    1b86:	9a 83       	std	Y+2, r25	; 0x02
    1b88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
#if(LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PATH, PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE_COMMAND);
#elif (LCD_DATA_BITS_MODE == 4)
	GPIO_setupPinDirection(LCD_DATA_PATH, LCD_DATA_START_BIT, PIN_OUTPUT);
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	63 e0       	ldi	r22, 0x03	; 3
    1b8e:	41 e0       	ldi	r20, 0x01	; 1
    1b90:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PATH, LCD_DATA_START_BIT+1, PIN_OUTPUT);
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	64 e0       	ldi	r22, 0x04	; 4
    1b98:	41 e0       	ldi	r20, 0x01	; 1
    1b9a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PATH, LCD_DATA_START_BIT+2, PIN_OUTPUT);
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	65 e0       	ldi	r22, 0x05	; 5
    1ba2:	41 e0       	ldi	r20, 0x01	; 1
    1ba4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PATH, LCD_DATA_START_BIT+3, PIN_OUTPUT);
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	66 e0       	ldi	r22, 0x06	; 6
    1bac:	41 e0       	ldi	r20, 0x01	; 1
    1bae:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1bb2:	83 e3       	ldi	r24, 0x33	; 51
    1bb4:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1bb8:	82 e3       	ldi	r24, 0x32	; 50
    1bba:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_COMMAND);
    1bbe:	88 e2       	ldi	r24, 0x28	; 40
    1bc0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
    1bc4:	8c e0       	ldi	r24, 0x0C	; 12
    1bc6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_sendCommand>
}
    1bd0:	2e 96       	adiw	r28, 0x0e	; 14
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	c3 56       	subi	r28, 0x63	; 99
    1bf0:	d0 40       	sbci	r29, 0x00	; 0
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	ed 59       	subi	r30, 0x9D	; 157
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	80 83       	st	Z, r24
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_RS, LOGIC_LOW);
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	61 e0       	ldi	r22, 0x01	; 1
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1c0e:	fe 01       	movw	r30, r28
    1c10:	e1 5a       	subi	r30, 0xA1	; 161
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a0 e8       	ldi	r26, 0x80	; 128
    1c1a:	bf e3       	ldi	r27, 0x3F	; 63
    1c1c:	80 83       	st	Z, r24
    1c1e:	91 83       	std	Z+1, r25	; 0x01
    1c20:	a2 83       	std	Z+2, r26	; 0x02
    1c22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c24:	8e 01       	movw	r16, r28
    1c26:	05 5a       	subi	r16, 0xA5	; 165
    1c28:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e1 5a       	subi	r30, 0xA1	; 161
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	60 81       	ld	r22, Z
    1c32:	71 81       	ldd	r23, Z+1	; 0x01
    1c34:	82 81       	ldd	r24, Z+2	; 0x02
    1c36:	93 81       	ldd	r25, Z+3	; 0x03
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	4a ef       	ldi	r20, 0xFA	; 250
    1c3e:	54 e4       	ldi	r21, 0x44	; 68
    1c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	f8 01       	movw	r30, r16
    1c4a:	80 83       	st	Z, r24
    1c4c:	91 83       	std	Z+1, r25	; 0x01
    1c4e:	a2 83       	std	Z+2, r26	; 0x02
    1c50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c52:	fe 01       	movw	r30, r28
    1c54:	e5 5a       	subi	r30, 0xA5	; 165
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	60 81       	ld	r22, Z
    1c5a:	71 81       	ldd	r23, Z+1	; 0x01
    1c5c:	82 81       	ldd	r24, Z+2	; 0x02
    1c5e:	93 81       	ldd	r25, Z+3	; 0x03
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e8       	ldi	r20, 0x80	; 128
    1c66:	5f e3       	ldi	r21, 0x3F	; 63
    1c68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c6c:	88 23       	and	r24, r24
    1c6e:	44 f4       	brge	.+16     	; 0x1c80 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1c70:	fe 01       	movw	r30, r28
    1c72:	e7 5a       	subi	r30, 0xA7	; 167
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	91 83       	std	Z+1, r25	; 0x01
    1c7c:	80 83       	st	Z, r24
    1c7e:	64 c0       	rjmp	.+200    	; 0x1d48 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1c80:	fe 01       	movw	r30, r28
    1c82:	e5 5a       	subi	r30, 0xA5	; 165
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	60 81       	ld	r22, Z
    1c88:	71 81       	ldd	r23, Z+1	; 0x01
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	3f ef       	ldi	r19, 0xFF	; 255
    1c92:	4f e7       	ldi	r20, 0x7F	; 127
    1c94:	57 e4       	ldi	r21, 0x47	; 71
    1c96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c9a:	18 16       	cp	r1, r24
    1c9c:	0c f0       	brlt	.+2      	; 0x1ca0 <LCD_sendCommand+0xbe>
    1c9e:	43 c0       	rjmp	.+134    	; 0x1d26 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	e1 5a       	subi	r30, 0xA1	; 161
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	60 81       	ld	r22, Z
    1ca8:	71 81       	ldd	r23, Z+1	; 0x01
    1caa:	82 81       	ldd	r24, Z+2	; 0x02
    1cac:	93 81       	ldd	r25, Z+3	; 0x03
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e2       	ldi	r20, 0x20	; 32
    1cb4:	51 e4       	ldi	r21, 0x41	; 65
    1cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	8e 01       	movw	r16, r28
    1cc0:	07 5a       	subi	r16, 0xA7	; 167
    1cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc4:	bc 01       	movw	r22, r24
    1cc6:	cd 01       	movw	r24, r26
    1cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	f8 01       	movw	r30, r16
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	80 83       	st	Z, r24
    1cd6:	1f c0       	rjmp	.+62     	; 0x1d16 <LCD_sendCommand+0x134>
    1cd8:	fe 01       	movw	r30, r28
    1cda:	e9 5a       	subi	r30, 0xA9	; 169
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	88 ec       	ldi	r24, 0xC8	; 200
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	91 83       	std	Z+1, r25	; 0x01
    1ce4:	80 83       	st	Z, r24
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	e9 5a       	subi	r30, 0xA9	; 169
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	80 81       	ld	r24, Z
    1cee:	91 81       	ldd	r25, Z+1	; 0x01
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <LCD_sendCommand+0x10e>
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	e9 5a       	subi	r30, 0xA9	; 169
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfe:	de 01       	movw	r26, r28
    1d00:	a7 5a       	subi	r26, 0xA7	; 167
    1d02:	bf 4f       	sbci	r27, 0xFF	; 255
    1d04:	fe 01       	movw	r30, r28
    1d06:	e7 5a       	subi	r30, 0xA7	; 167
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	11 96       	adiw	r26, 0x01	; 1
    1d12:	9c 93       	st	X, r25
    1d14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d16:	fe 01       	movw	r30, r28
    1d18:	e7 5a       	subi	r30, 0xA7	; 167
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	80 81       	ld	r24, Z
    1d1e:	91 81       	ldd	r25, Z+1	; 0x01
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	d1 f6       	brne	.-76     	; 0x1cd8 <LCD_sendCommand+0xf6>
    1d24:	27 c0       	rjmp	.+78     	; 0x1d74 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d26:	8e 01       	movw	r16, r28
    1d28:	07 5a       	subi	r16, 0xA7	; 167
    1d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e5 5a       	subi	r30, 0xA5	; 165
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	60 81       	ld	r22, Z
    1d34:	71 81       	ldd	r23, Z+1	; 0x01
    1d36:	82 81       	ldd	r24, Z+2	; 0x02
    1d38:	93 81       	ldd	r25, Z+3	; 0x03
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	f8 01       	movw	r30, r16
    1d44:	91 83       	std	Z+1, r25	; 0x01
    1d46:	80 83       	st	Z, r24
    1d48:	de 01       	movw	r26, r28
    1d4a:	ab 5a       	subi	r26, 0xAB	; 171
    1d4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d4e:	fe 01       	movw	r30, r28
    1d50:	e7 5a       	subi	r30, 0xA7	; 167
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	80 81       	ld	r24, Z
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	8d 93       	st	X+, r24
    1d5a:	9c 93       	st	X, r25
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	eb 5a       	subi	r30, 0xAB	; 171
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	80 81       	ld	r24, Z
    1d64:	91 81       	ldd	r25, Z+1	; 0x01
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_sendCommand+0x184>
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	eb 5a       	subi	r30, 0xAB	; 171
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_HIGH);
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	62 e0       	ldi	r22, 0x02	; 2
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1d7e:	fe 01       	movw	r30, r28
    1d80:	ef 5a       	subi	r30, 0xAF	; 175
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a0 e8       	ldi	r26, 0x80	; 128
    1d8a:	bf e3       	ldi	r27, 0x3F	; 63
    1d8c:	80 83       	st	Z, r24
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	a2 83       	std	Z+2, r26	; 0x02
    1d92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d94:	8e 01       	movw	r16, r28
    1d96:	03 5b       	subi	r16, 0xB3	; 179
    1d98:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	ef 5a       	subi	r30, 0xAF	; 175
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	60 81       	ld	r22, Z
    1da2:	71 81       	ldd	r23, Z+1	; 0x01
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	4a ef       	ldi	r20, 0xFA	; 250
    1dae:	54 e4       	ldi	r21, 0x44	; 68
    1db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	f8 01       	movw	r30, r16
    1dba:	80 83       	st	Z, r24
    1dbc:	91 83       	std	Z+1, r25	; 0x01
    1dbe:	a2 83       	std	Z+2, r26	; 0x02
    1dc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e3 5b       	subi	r30, 0xB3	; 179
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	60 81       	ld	r22, Z
    1dca:	71 81       	ldd	r23, Z+1	; 0x01
    1dcc:	82 81       	ldd	r24, Z+2	; 0x02
    1dce:	93 81       	ldd	r25, Z+3	; 0x03
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	44 f4       	brge	.+16     	; 0x1df0 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1de0:	fe 01       	movw	r30, r28
    1de2:	e5 5b       	subi	r30, 0xB5	; 181
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	80 83       	st	Z, r24
    1dee:	64 c0       	rjmp	.+200    	; 0x1eb8 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1df0:	fe 01       	movw	r30, r28
    1df2:	e3 5b       	subi	r30, 0xB3	; 179
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	3f ef       	ldi	r19, 0xFF	; 255
    1e02:	4f e7       	ldi	r20, 0x7F	; 127
    1e04:	57 e4       	ldi	r21, 0x47	; 71
    1e06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e0a:	18 16       	cp	r1, r24
    1e0c:	0c f0       	brlt	.+2      	; 0x1e10 <LCD_sendCommand+0x22e>
    1e0e:	43 c0       	rjmp	.+134    	; 0x1e96 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e10:	fe 01       	movw	r30, r28
    1e12:	ef 5a       	subi	r30, 0xAF	; 175
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	60 81       	ld	r22, Z
    1e18:	71 81       	ldd	r23, Z+1	; 0x01
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	93 81       	ldd	r25, Z+3	; 0x03
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e2       	ldi	r20, 0x20	; 32
    1e24:	51 e4       	ldi	r21, 0x41	; 65
    1e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	8e 01       	movw	r16, r28
    1e30:	05 5b       	subi	r16, 0xB5	; 181
    1e32:	1f 4f       	sbci	r17, 0xFF	; 255
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	f8 01       	movw	r30, r16
    1e42:	91 83       	std	Z+1, r25	; 0x01
    1e44:	80 83       	st	Z, r24
    1e46:	1f c0       	rjmp	.+62     	; 0x1e86 <LCD_sendCommand+0x2a4>
    1e48:	fe 01       	movw	r30, r28
    1e4a:	e7 5b       	subi	r30, 0xB7	; 183
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	88 ec       	ldi	r24, 0xC8	; 200
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	91 83       	std	Z+1, r25	; 0x01
    1e54:	80 83       	st	Z, r24
    1e56:	fe 01       	movw	r30, r28
    1e58:	e7 5b       	subi	r30, 0xB7	; 183
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	80 81       	ld	r24, Z
    1e5e:	91 81       	ldd	r25, Z+1	; 0x01
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <LCD_sendCommand+0x27e>
    1e64:	fe 01       	movw	r30, r28
    1e66:	e7 5b       	subi	r30, 0xB7	; 183
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6e:	de 01       	movw	r26, r28
    1e70:	a5 5b       	subi	r26, 0xB5	; 181
    1e72:	bf 4f       	sbci	r27, 0xFF	; 255
    1e74:	fe 01       	movw	r30, r28
    1e76:	e5 5b       	subi	r30, 0xB5	; 181
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	11 96       	adiw	r26, 0x01	; 1
    1e82:	9c 93       	st	X, r25
    1e84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e86:	fe 01       	movw	r30, r28
    1e88:	e5 5b       	subi	r30, 0xB5	; 181
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	80 81       	ld	r24, Z
    1e8e:	91 81       	ldd	r25, Z+1	; 0x01
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	d1 f6       	brne	.-76     	; 0x1e48 <LCD_sendCommand+0x266>
    1e94:	27 c0       	rjmp	.+78     	; 0x1ee4 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e96:	8e 01       	movw	r16, r28
    1e98:	05 5b       	subi	r16, 0xB5	; 181
    1e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	e3 5b       	subi	r30, 0xB3	; 179
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	60 81       	ld	r22, Z
    1ea4:	71 81       	ldd	r23, Z+1	; 0x01
    1ea6:	82 81       	ldd	r24, Z+2	; 0x02
    1ea8:	93 81       	ldd	r25, Z+3	; 0x03
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	91 83       	std	Z+1, r25	; 0x01
    1eb6:	80 83       	st	Z, r24
    1eb8:	de 01       	movw	r26, r28
    1eba:	a9 5b       	subi	r26, 0xB9	; 185
    1ebc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e5 5b       	subi	r30, 0xB5	; 181
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	91 81       	ldd	r25, Z+1	; 0x01
    1ec8:	8d 93       	st	X+, r24
    1eca:	9c 93       	st	X, r25
    1ecc:	fe 01       	movw	r30, r28
    1ece:	e9 5b       	subi	r30, 0xB9	; 185
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	80 81       	ld	r24, Z
    1ed4:	91 81       	ldd	r25, Z+1	; 0x01
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <LCD_sendCommand+0x2f4>
    1eda:	fe 01       	movw	r30, r28
    1edc:	e9 5b       	subi	r30, 0xB9	; 185
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	91 83       	std	Z+1, r25	; 0x01
    1ee2:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_LOW);
	_delay_ms(1);

#elif (LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT,GET_BIT(command, 4));
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	ed 59       	subi	r30, 0x9D	; 157
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	80 81       	ld	r24, Z
    1eec:	88 2f       	mov	r24, r24
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	80 71       	andi	r24, 0x10	; 16
    1ef2:	90 70       	andi	r25, 0x00	; 0
    1ef4:	95 95       	asr	r25
    1ef6:	87 95       	ror	r24
    1ef8:	95 95       	asr	r25
    1efa:	87 95       	ror	r24
    1efc:	95 95       	asr	r25
    1efe:	87 95       	ror	r24
    1f00:	95 95       	asr	r25
    1f02:	87 95       	ror	r24
    1f04:	98 2f       	mov	r25, r24
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	63 e0       	ldi	r22, 0x03	; 3
    1f0a:	49 2f       	mov	r20, r25
    1f0c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+1,GET_BIT(command, 5));
    1f10:	fe 01       	movw	r30, r28
    1f12:	ed 59       	subi	r30, 0x9D	; 157
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 81       	ld	r24, Z
    1f18:	88 2f       	mov	r24, r24
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	80 72       	andi	r24, 0x20	; 32
    1f1e:	90 70       	andi	r25, 0x00	; 0
    1f20:	95 95       	asr	r25
    1f22:	87 95       	ror	r24
    1f24:	95 95       	asr	r25
    1f26:	87 95       	ror	r24
    1f28:	95 95       	asr	r25
    1f2a:	87 95       	ror	r24
    1f2c:	95 95       	asr	r25
    1f2e:	87 95       	ror	r24
    1f30:	95 95       	asr	r25
    1f32:	87 95       	ror	r24
    1f34:	98 2f       	mov	r25, r24
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	64 e0       	ldi	r22, 0x04	; 4
    1f3a:	49 2f       	mov	r20, r25
    1f3c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+2,GET_BIT(command, 6));
    1f40:	fe 01       	movw	r30, r28
    1f42:	ed 59       	subi	r30, 0x9D	; 157
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	80 81       	ld	r24, Z
    1f48:	88 2f       	mov	r24, r24
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	80 74       	andi	r24, 0x40	; 64
    1f4e:	90 70       	andi	r25, 0x00	; 0
    1f50:	08 2e       	mov	r0, r24
    1f52:	89 2f       	mov	r24, r25
    1f54:	00 0c       	add	r0, r0
    1f56:	88 1f       	adc	r24, r24
    1f58:	99 0b       	sbc	r25, r25
    1f5a:	00 0c       	add	r0, r0
    1f5c:	88 1f       	adc	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	98 2f       	mov	r25, r24
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	65 e0       	ldi	r22, 0x05	; 5
    1f66:	49 2f       	mov	r20, r25
    1f68:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+3,GET_BIT(command, 7));
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	ed 59       	subi	r30, 0x9D	; 157
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	80 81       	ld	r24, Z
    1f74:	98 2f       	mov	r25, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	99 27       	eor	r25, r25
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	66 e0       	ldi	r22, 0x06	; 6
    1f80:	49 2f       	mov	r20, r25
    1f82:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1f86:	fe 01       	movw	r30, r28
    1f88:	ed 5b       	subi	r30, 0xBD	; 189
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	a0 e8       	ldi	r26, 0x80	; 128
    1f92:	bf e3       	ldi	r27, 0x3F	; 63
    1f94:	80 83       	st	Z, r24
    1f96:	91 83       	std	Z+1, r25	; 0x01
    1f98:	a2 83       	std	Z+2, r26	; 0x02
    1f9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9c:	8e 01       	movw	r16, r28
    1f9e:	01 5c       	subi	r16, 0xC1	; 193
    1fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	ed 5b       	subi	r30, 0xBD	; 189
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	60 81       	ld	r22, Z
    1faa:	71 81       	ldd	r23, Z+1	; 0x01
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	4a ef       	ldi	r20, 0xFA	; 250
    1fb6:	54 e4       	ldi	r21, 0x44	; 68
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	f8 01       	movw	r30, r16
    1fc2:	80 83       	st	Z, r24
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	a2 83       	std	Z+2, r26	; 0x02
    1fc8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fca:	fe 01       	movw	r30, r28
    1fcc:	ff 96       	adiw	r30, 0x3f	; 63
    1fce:	60 81       	ld	r22, Z
    1fd0:	71 81       	ldd	r23, Z+1	; 0x01
    1fd2:	82 81       	ldd	r24, Z+2	; 0x02
    1fd4:	93 81       	ldd	r25, Z+3	; 0x03
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e8       	ldi	r20, 0x80	; 128
    1fdc:	5f e3       	ldi	r21, 0x3F	; 63
    1fde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe2:	88 23       	and	r24, r24
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	9e af       	std	Y+62, r25	; 0x3e
    1fec:	8d af       	std	Y+61, r24	; 0x3d
    1fee:	46 c0       	rjmp	.+140    	; 0x207c <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	ff 96       	adiw	r30, 0x3f	; 63
    1ff4:	60 81       	ld	r22, Z
    1ff6:	71 81       	ldd	r23, Z+1	; 0x01
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	93 81       	ldd	r25, Z+3	; 0x03
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	3f ef       	ldi	r19, 0xFF	; 255
    2000:	4f e7       	ldi	r20, 0x7F	; 127
    2002:	57 e4       	ldi	r21, 0x47	; 71
    2004:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2008:	18 16       	cp	r1, r24
    200a:	64 f5       	brge	.+88     	; 0x2064 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200c:	fe 01       	movw	r30, r28
    200e:	ed 5b       	subi	r30, 0xBD	; 189
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	60 81       	ld	r22, Z
    2014:	71 81       	ldd	r23, Z+1	; 0x01
    2016:	82 81       	ldd	r24, Z+2	; 0x02
    2018:	93 81       	ldd	r25, Z+3	; 0x03
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e2       	ldi	r20, 0x20	; 32
    2020:	51 e4       	ldi	r21, 0x41	; 65
    2022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	bc 01       	movw	r22, r24
    202c:	cd 01       	movw	r24, r26
    202e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9e af       	std	Y+62, r25	; 0x3e
    2038:	8d af       	std	Y+61, r24	; 0x3d
    203a:	0f c0       	rjmp	.+30     	; 0x205a <LCD_sendCommand+0x478>
    203c:	88 ec       	ldi	r24, 0xC8	; 200
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	9c af       	std	Y+60, r25	; 0x3c
    2042:	8b af       	std	Y+59, r24	; 0x3b
    2044:	8b ad       	ldd	r24, Y+59	; 0x3b
    2046:	9c ad       	ldd	r25, Y+60	; 0x3c
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <LCD_sendCommand+0x466>
    204c:	9c af       	std	Y+60, r25	; 0x3c
    204e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2050:	8d ad       	ldd	r24, Y+61	; 0x3d
    2052:	9e ad       	ldd	r25, Y+62	; 0x3e
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	9e af       	std	Y+62, r25	; 0x3e
    2058:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205a:	8d ad       	ldd	r24, Y+61	; 0x3d
    205c:	9e ad       	ldd	r25, Y+62	; 0x3e
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	69 f7       	brne	.-38     	; 0x203c <LCD_sendCommand+0x45a>
    2062:	16 c0       	rjmp	.+44     	; 0x2090 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2064:	fe 01       	movw	r30, r28
    2066:	ff 96       	adiw	r30, 0x3f	; 63
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9e af       	std	Y+62, r25	; 0x3e
    207a:	8d af       	std	Y+61, r24	; 0x3d
    207c:	8d ad       	ldd	r24, Y+61	; 0x3d
    207e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2080:	9a af       	std	Y+58, r25	; 0x3a
    2082:	89 af       	std	Y+57, r24	; 0x39
    2084:	89 ad       	ldd	r24, Y+57	; 0x39
    2086:	9a ad       	ldd	r25, Y+58	; 0x3a
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <LCD_sendCommand+0x4a6>
    208c:	9a af       	std	Y+58, r25	; 0x3a
    208e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_LOW);
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	62 e0       	ldi	r22, 0x02	; 2
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a0 e8       	ldi	r26, 0x80	; 128
    20a0:	bf e3       	ldi	r27, 0x3F	; 63
    20a2:	8d ab       	std	Y+53, r24	; 0x35
    20a4:	9e ab       	std	Y+54, r25	; 0x36
    20a6:	af ab       	std	Y+55, r26	; 0x37
    20a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20aa:	6d a9       	ldd	r22, Y+53	; 0x35
    20ac:	7e a9       	ldd	r23, Y+54	; 0x36
    20ae:	8f a9       	ldd	r24, Y+55	; 0x37
    20b0:	98 ad       	ldd	r25, Y+56	; 0x38
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4a ef       	ldi	r20, 0xFA	; 250
    20b8:	54 e4       	ldi	r21, 0x44	; 68
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	89 ab       	std	Y+49, r24	; 0x31
    20c4:	9a ab       	std	Y+50, r25	; 0x32
    20c6:	ab ab       	std	Y+51, r26	; 0x33
    20c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20ca:	69 a9       	ldd	r22, Y+49	; 0x31
    20cc:	7a a9       	ldd	r23, Y+50	; 0x32
    20ce:	8b a9       	ldd	r24, Y+51	; 0x33
    20d0:	9c a9       	ldd	r25, Y+52	; 0x34
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e8       	ldi	r20, 0x80	; 128
    20d8:	5f e3       	ldi	r21, 0x3F	; 63
    20da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20de:	88 23       	and	r24, r24
    20e0:	2c f4       	brge	.+10     	; 0x20ec <LCD_sendCommand+0x50a>
		__ticks = 1;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	98 ab       	std	Y+48, r25	; 0x30
    20e8:	8f a7       	std	Y+47, r24	; 0x2f
    20ea:	3f c0       	rjmp	.+126    	; 0x216a <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    20ec:	69 a9       	ldd	r22, Y+49	; 0x31
    20ee:	7a a9       	ldd	r23, Y+50	; 0x32
    20f0:	8b a9       	ldd	r24, Y+51	; 0x33
    20f2:	9c a9       	ldd	r25, Y+52	; 0x34
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	3f ef       	ldi	r19, 0xFF	; 255
    20f8:	4f e7       	ldi	r20, 0x7F	; 127
    20fa:	57 e4       	ldi	r21, 0x47	; 71
    20fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2100:	18 16       	cp	r1, r24
    2102:	4c f5       	brge	.+82     	; 0x2156 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2104:	6d a9       	ldd	r22, Y+53	; 0x35
    2106:	7e a9       	ldd	r23, Y+54	; 0x36
    2108:	8f a9       	ldd	r24, Y+55	; 0x37
    210a:	98 ad       	ldd	r25, Y+56	; 0x38
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e2       	ldi	r20, 0x20	; 32
    2112:	51 e4       	ldi	r21, 0x41	; 65
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	98 ab       	std	Y+48, r25	; 0x30
    212a:	8f a7       	std	Y+47, r24	; 0x2f
    212c:	0f c0       	rjmp	.+30     	; 0x214c <LCD_sendCommand+0x56a>
    212e:	88 ec       	ldi	r24, 0xC8	; 200
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	9e a7       	std	Y+46, r25	; 0x2e
    2134:	8d a7       	std	Y+45, r24	; 0x2d
    2136:	8d a5       	ldd	r24, Y+45	; 0x2d
    2138:	9e a5       	ldd	r25, Y+46	; 0x2e
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <LCD_sendCommand+0x558>
    213e:	9e a7       	std	Y+46, r25	; 0x2e
    2140:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2142:	8f a5       	ldd	r24, Y+47	; 0x2f
    2144:	98 a9       	ldd	r25, Y+48	; 0x30
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	98 ab       	std	Y+48, r25	; 0x30
    214a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214c:	8f a5       	ldd	r24, Y+47	; 0x2f
    214e:	98 a9       	ldd	r25, Y+48	; 0x30
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	69 f7       	brne	.-38     	; 0x212e <LCD_sendCommand+0x54c>
    2154:	14 c0       	rjmp	.+40     	; 0x217e <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2156:	69 a9       	ldd	r22, Y+49	; 0x31
    2158:	7a a9       	ldd	r23, Y+50	; 0x32
    215a:	8b a9       	ldd	r24, Y+51	; 0x33
    215c:	9c a9       	ldd	r25, Y+52	; 0x34
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	98 ab       	std	Y+48, r25	; 0x30
    2168:	8f a7       	std	Y+47, r24	; 0x2f
    216a:	8f a5       	ldd	r24, Y+47	; 0x2f
    216c:	98 a9       	ldd	r25, Y+48	; 0x30
    216e:	9c a7       	std	Y+44, r25	; 0x2c
    2170:	8b a7       	std	Y+43, r24	; 0x2b
    2172:	8b a5       	ldd	r24, Y+43	; 0x2b
    2174:	9c a5       	ldd	r25, Y+44	; 0x2c
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <LCD_sendCommand+0x594>
    217a:	9c a7       	std	Y+44, r25	; 0x2c
    217c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_HIGH);
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	62 e0       	ldi	r22, 0x02	; 2
    2182:	41 e0       	ldi	r20, 0x01	; 1
    2184:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	a0 e8       	ldi	r26, 0x80	; 128
    218e:	bf e3       	ldi	r27, 0x3F	; 63
    2190:	8f a3       	std	Y+39, r24	; 0x27
    2192:	98 a7       	std	Y+40, r25	; 0x28
    2194:	a9 a7       	std	Y+41, r26	; 0x29
    2196:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2198:	6f a1       	ldd	r22, Y+39	; 0x27
    219a:	78 a5       	ldd	r23, Y+40	; 0x28
    219c:	89 a5       	ldd	r24, Y+41	; 0x29
    219e:	9a a5       	ldd	r25, Y+42	; 0x2a
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	4a ef       	ldi	r20, 0xFA	; 250
    21a6:	54 e4       	ldi	r21, 0x44	; 68
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	8b a3       	std	Y+35, r24	; 0x23
    21b2:	9c a3       	std	Y+36, r25	; 0x24
    21b4:	ad a3       	std	Y+37, r26	; 0x25
    21b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21b8:	6b a1       	ldd	r22, Y+35	; 0x23
    21ba:	7c a1       	ldd	r23, Y+36	; 0x24
    21bc:	8d a1       	ldd	r24, Y+37	; 0x25
    21be:	9e a1       	ldd	r25, Y+38	; 0x26
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e8       	ldi	r20, 0x80	; 128
    21c6:	5f e3       	ldi	r21, 0x3F	; 63
    21c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21cc:	88 23       	and	r24, r24
    21ce:	2c f4       	brge	.+10     	; 0x21da <LCD_sendCommand+0x5f8>
		__ticks = 1;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	9a a3       	std	Y+34, r25	; 0x22
    21d6:	89 a3       	std	Y+33, r24	; 0x21
    21d8:	3f c0       	rjmp	.+126    	; 0x2258 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    21da:	6b a1       	ldd	r22, Y+35	; 0x23
    21dc:	7c a1       	ldd	r23, Y+36	; 0x24
    21de:	8d a1       	ldd	r24, Y+37	; 0x25
    21e0:	9e a1       	ldd	r25, Y+38	; 0x26
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	3f ef       	ldi	r19, 0xFF	; 255
    21e6:	4f e7       	ldi	r20, 0x7F	; 127
    21e8:	57 e4       	ldi	r21, 0x47	; 71
    21ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ee:	18 16       	cp	r1, r24
    21f0:	4c f5       	brge	.+82     	; 0x2244 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f2:	6f a1       	ldd	r22, Y+39	; 0x27
    21f4:	78 a5       	ldd	r23, Y+40	; 0x28
    21f6:	89 a5       	ldd	r24, Y+41	; 0x29
    21f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e2       	ldi	r20, 0x20	; 32
    2200:	51 e4       	ldi	r21, 0x41	; 65
    2202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9a a3       	std	Y+34, r25	; 0x22
    2218:	89 a3       	std	Y+33, r24	; 0x21
    221a:	0f c0       	rjmp	.+30     	; 0x223a <LCD_sendCommand+0x658>
    221c:	88 ec       	ldi	r24, 0xC8	; 200
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	98 a3       	std	Y+32, r25	; 0x20
    2222:	8f 8f       	std	Y+31, r24	; 0x1f
    2224:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2226:	98 a1       	ldd	r25, Y+32	; 0x20
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <LCD_sendCommand+0x646>
    222c:	98 a3       	std	Y+32, r25	; 0x20
    222e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2230:	89 a1       	ldd	r24, Y+33	; 0x21
    2232:	9a a1       	ldd	r25, Y+34	; 0x22
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	9a a3       	std	Y+34, r25	; 0x22
    2238:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223a:	89 a1       	ldd	r24, Y+33	; 0x21
    223c:	9a a1       	ldd	r25, Y+34	; 0x22
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	69 f7       	brne	.-38     	; 0x221c <LCD_sendCommand+0x63a>
    2242:	14 c0       	rjmp	.+40     	; 0x226c <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2244:	6b a1       	ldd	r22, Y+35	; 0x23
    2246:	7c a1       	ldd	r23, Y+36	; 0x24
    2248:	8d a1       	ldd	r24, Y+37	; 0x25
    224a:	9e a1       	ldd	r25, Y+38	; 0x26
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	9a a3       	std	Y+34, r25	; 0x22
    2256:	89 a3       	std	Y+33, r24	; 0x21
    2258:	89 a1       	ldd	r24, Y+33	; 0x21
    225a:	9a a1       	ldd	r25, Y+34	; 0x22
    225c:	9e 8f       	std	Y+30, r25	; 0x1e
    225e:	8d 8f       	std	Y+29, r24	; 0x1d
    2260:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2262:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <LCD_sendCommand+0x682>
    2268:	9e 8f       	std	Y+30, r25	; 0x1e
    226a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT,GET_BIT(command, 0));
    226c:	fe 01       	movw	r30, r28
    226e:	ed 59       	subi	r30, 0x9D	; 157
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	80 81       	ld	r24, Z
    2274:	98 2f       	mov	r25, r24
    2276:	91 70       	andi	r25, 0x01	; 1
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	63 e0       	ldi	r22, 0x03	; 3
    227c:	49 2f       	mov	r20, r25
    227e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+1,GET_BIT(command, 1));
    2282:	fe 01       	movw	r30, r28
    2284:	ed 59       	subi	r30, 0x9D	; 157
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	80 81       	ld	r24, Z
    228a:	88 2f       	mov	r24, r24
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	82 70       	andi	r24, 0x02	; 2
    2290:	90 70       	andi	r25, 0x00	; 0
    2292:	95 95       	asr	r25
    2294:	87 95       	ror	r24
    2296:	98 2f       	mov	r25, r24
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	64 e0       	ldi	r22, 0x04	; 4
    229c:	49 2f       	mov	r20, r25
    229e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+2,GET_BIT(command, 2));
    22a2:	fe 01       	movw	r30, r28
    22a4:	ed 59       	subi	r30, 0x9D	; 157
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	80 81       	ld	r24, Z
    22aa:	88 2f       	mov	r24, r24
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	84 70       	andi	r24, 0x04	; 4
    22b0:	90 70       	andi	r25, 0x00	; 0
    22b2:	95 95       	asr	r25
    22b4:	87 95       	ror	r24
    22b6:	95 95       	asr	r25
    22b8:	87 95       	ror	r24
    22ba:	98 2f       	mov	r25, r24
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	65 e0       	ldi	r22, 0x05	; 5
    22c0:	49 2f       	mov	r20, r25
    22c2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+3,GET_BIT(command, 3));
    22c6:	fe 01       	movw	r30, r28
    22c8:	ed 59       	subi	r30, 0x9D	; 157
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 81       	ld	r24, Z
    22ce:	88 2f       	mov	r24, r24
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	88 70       	andi	r24, 0x08	; 8
    22d4:	90 70       	andi	r25, 0x00	; 0
    22d6:	95 95       	asr	r25
    22d8:	87 95       	ror	r24
    22da:	95 95       	asr	r25
    22dc:	87 95       	ror	r24
    22de:	95 95       	asr	r25
    22e0:	87 95       	ror	r24
    22e2:	98 2f       	mov	r25, r24
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	66 e0       	ldi	r22, 0x06	; 6
    22e8:	49 2f       	mov	r20, r25
    22ea:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	a0 e8       	ldi	r26, 0x80	; 128
    22f4:	bf e3       	ldi	r27, 0x3F	; 63
    22f6:	89 8f       	std	Y+25, r24	; 0x19
    22f8:	9a 8f       	std	Y+26, r25	; 0x1a
    22fa:	ab 8f       	std	Y+27, r26	; 0x1b
    22fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2300:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2302:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2304:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	4a ef       	ldi	r20, 0xFA	; 250
    230c:	54 e4       	ldi	r21, 0x44	; 68
    230e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	8d 8b       	std	Y+21, r24	; 0x15
    2318:	9e 8b       	std	Y+22, r25	; 0x16
    231a:	af 8b       	std	Y+23, r26	; 0x17
    231c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    231e:	6d 89       	ldd	r22, Y+21	; 0x15
    2320:	7e 89       	ldd	r23, Y+22	; 0x16
    2322:	8f 89       	ldd	r24, Y+23	; 0x17
    2324:	98 8d       	ldd	r25, Y+24	; 0x18
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e8       	ldi	r20, 0x80	; 128
    232c:	5f e3       	ldi	r21, 0x3F	; 63
    232e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2332:	88 23       	and	r24, r24
    2334:	2c f4       	brge	.+10     	; 0x2340 <LCD_sendCommand+0x75e>
		__ticks = 1;
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	9c 8b       	std	Y+20, r25	; 0x14
    233c:	8b 8b       	std	Y+19, r24	; 0x13
    233e:	3f c0       	rjmp	.+126    	; 0x23be <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2340:	6d 89       	ldd	r22, Y+21	; 0x15
    2342:	7e 89       	ldd	r23, Y+22	; 0x16
    2344:	8f 89       	ldd	r24, Y+23	; 0x17
    2346:	98 8d       	ldd	r25, Y+24	; 0x18
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	3f ef       	ldi	r19, 0xFF	; 255
    234c:	4f e7       	ldi	r20, 0x7F	; 127
    234e:	57 e4       	ldi	r21, 0x47	; 71
    2350:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2354:	18 16       	cp	r1, r24
    2356:	4c f5       	brge	.+82     	; 0x23aa <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2358:	69 8d       	ldd	r22, Y+25	; 0x19
    235a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    235c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    235e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e2       	ldi	r20, 0x20	; 32
    2366:	51 e4       	ldi	r21, 0x41	; 65
    2368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	bc 01       	movw	r22, r24
    2372:	cd 01       	movw	r24, r26
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9c 8b       	std	Y+20, r25	; 0x14
    237e:	8b 8b       	std	Y+19, r24	; 0x13
    2380:	0f c0       	rjmp	.+30     	; 0x23a0 <LCD_sendCommand+0x7be>
    2382:	88 ec       	ldi	r24, 0xC8	; 200
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	9a 8b       	std	Y+18, r25	; 0x12
    2388:	89 8b       	std	Y+17, r24	; 0x11
    238a:	89 89       	ldd	r24, Y+17	; 0x11
    238c:	9a 89       	ldd	r25, Y+18	; 0x12
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	f1 f7       	brne	.-4      	; 0x238e <LCD_sendCommand+0x7ac>
    2392:	9a 8b       	std	Y+18, r25	; 0x12
    2394:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2396:	8b 89       	ldd	r24, Y+19	; 0x13
    2398:	9c 89       	ldd	r25, Y+20	; 0x14
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	9c 8b       	std	Y+20, r25	; 0x14
    239e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a0:	8b 89       	ldd	r24, Y+19	; 0x13
    23a2:	9c 89       	ldd	r25, Y+20	; 0x14
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	69 f7       	brne	.-38     	; 0x2382 <LCD_sendCommand+0x7a0>
    23a8:	14 c0       	rjmp	.+40     	; 0x23d2 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23aa:	6d 89       	ldd	r22, Y+21	; 0x15
    23ac:	7e 89       	ldd	r23, Y+22	; 0x16
    23ae:	8f 89       	ldd	r24, Y+23	; 0x17
    23b0:	98 8d       	ldd	r25, Y+24	; 0x18
    23b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	9c 8b       	std	Y+20, r25	; 0x14
    23bc:	8b 8b       	std	Y+19, r24	; 0x13
    23be:	8b 89       	ldd	r24, Y+19	; 0x13
    23c0:	9c 89       	ldd	r25, Y+20	; 0x14
    23c2:	98 8b       	std	Y+16, r25	; 0x10
    23c4:	8f 87       	std	Y+15, r24	; 0x0f
    23c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c8:	98 89       	ldd	r25, Y+16	; 0x10
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <LCD_sendCommand+0x7e8>
    23ce:	98 8b       	std	Y+16, r25	; 0x10
    23d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_LOW);
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	62 e0       	ldi	r22, 0x02	; 2
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	a0 e8       	ldi	r26, 0x80	; 128
    23e2:	bf e3       	ldi	r27, 0x3F	; 63
    23e4:	8b 87       	std	Y+11, r24	; 0x0b
    23e6:	9c 87       	std	Y+12, r25	; 0x0c
    23e8:	ad 87       	std	Y+13, r26	; 0x0d
    23ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	4a ef       	ldi	r20, 0xFA	; 250
    23fa:	54 e4       	ldi	r21, 0x44	; 68
    23fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	8f 83       	std	Y+7, r24	; 0x07
    2406:	98 87       	std	Y+8, r25	; 0x08
    2408:	a9 87       	std	Y+9, r26	; 0x09
    240a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    240c:	6f 81       	ldd	r22, Y+7	; 0x07
    240e:	78 85       	ldd	r23, Y+8	; 0x08
    2410:	89 85       	ldd	r24, Y+9	; 0x09
    2412:	9a 85       	ldd	r25, Y+10	; 0x0a
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e8       	ldi	r20, 0x80	; 128
    241a:	5f e3       	ldi	r21, 0x3F	; 63
    241c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2420:	88 23       	and	r24, r24
    2422:	2c f4       	brge	.+10     	; 0x242e <LCD_sendCommand+0x84c>
		__ticks = 1;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
    242c:	3f c0       	rjmp	.+126    	; 0x24ac <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    242e:	6f 81       	ldd	r22, Y+7	; 0x07
    2430:	78 85       	ldd	r23, Y+8	; 0x08
    2432:	89 85       	ldd	r24, Y+9	; 0x09
    2434:	9a 85       	ldd	r25, Y+10	; 0x0a
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	3f ef       	ldi	r19, 0xFF	; 255
    243a:	4f e7       	ldi	r20, 0x7F	; 127
    243c:	57 e4       	ldi	r21, 0x47	; 71
    243e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2442:	18 16       	cp	r1, r24
    2444:	4c f5       	brge	.+82     	; 0x2498 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2446:	6b 85       	ldd	r22, Y+11	; 0x0b
    2448:	7c 85       	ldd	r23, Y+12	; 0x0c
    244a:	8d 85       	ldd	r24, Y+13	; 0x0d
    244c:	9e 85       	ldd	r25, Y+14	; 0x0e
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e2       	ldi	r20, 0x20	; 32
    2454:	51 e4       	ldi	r21, 0x41	; 65
    2456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	bc 01       	movw	r22, r24
    2460:	cd 01       	movw	r24, r26
    2462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	9e 83       	std	Y+6, r25	; 0x06
    246c:	8d 83       	std	Y+5, r24	; 0x05
    246e:	0f c0       	rjmp	.+30     	; 0x248e <LCD_sendCommand+0x8ac>
    2470:	88 ec       	ldi	r24, 0xC8	; 200
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	9c 83       	std	Y+4, r25	; 0x04
    2476:	8b 83       	std	Y+3, r24	; 0x03
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	9c 81       	ldd	r25, Y+4	; 0x04
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <LCD_sendCommand+0x89a>
    2480:	9c 83       	std	Y+4, r25	; 0x04
    2482:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2484:	8d 81       	ldd	r24, Y+5	; 0x05
    2486:	9e 81       	ldd	r25, Y+6	; 0x06
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	9e 83       	std	Y+6, r25	; 0x06
    248c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248e:	8d 81       	ldd	r24, Y+5	; 0x05
    2490:	9e 81       	ldd	r25, Y+6	; 0x06
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	69 f7       	brne	.-38     	; 0x2470 <LCD_sendCommand+0x88e>
    2496:	14 c0       	rjmp	.+40     	; 0x24c0 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2498:	6f 81       	ldd	r22, Y+7	; 0x07
    249a:	78 85       	ldd	r23, Y+8	; 0x08
    249c:	89 85       	ldd	r24, Y+9	; 0x09
    249e:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	9e 83       	std	Y+6, r25	; 0x06
    24aa:	8d 83       	std	Y+5, r24	; 0x05
    24ac:	8d 81       	ldd	r24, Y+5	; 0x05
    24ae:	9e 81       	ldd	r25, Y+6	; 0x06
    24b0:	9a 83       	std	Y+2, r25	; 0x02
    24b2:	89 83       	std	Y+1, r24	; 0x01
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	9a 81       	ldd	r25, Y+2	; 0x02
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <LCD_sendCommand+0x8d6>
    24bc:	9a 83       	std	Y+2, r25	; 0x02
    24be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif

}
    24c0:	cd 59       	subi	r28, 0x9D	; 157
    24c2:	df 4f       	sbci	r29, 0xFF	; 255
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	1f 91       	pop	r17
    24d4:	0f 91       	pop	r16
    24d6:	08 95       	ret

000024d8 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 character)
{
    24d8:	0f 93       	push	r16
    24da:	1f 93       	push	r17
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	c3 56       	subi	r28, 0x63	; 99
    24e6:	d0 40       	sbci	r29, 0x00	; 0
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
    24f2:	fe 01       	movw	r30, r28
    24f4:	ed 59       	subi	r30, 0x9D	; 157
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 83       	st	Z, r24
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_RS, LOGIC_HIGH);
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	61 e0       	ldi	r22, 0x01	; 1
    24fe:	41 e0       	ldi	r20, 0x01	; 1
    2500:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2504:	fe 01       	movw	r30, r28
    2506:	e1 5a       	subi	r30, 0xA1	; 161
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	a0 e8       	ldi	r26, 0x80	; 128
    2510:	bf e3       	ldi	r27, 0x3F	; 63
    2512:	80 83       	st	Z, r24
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	a2 83       	std	Z+2, r26	; 0x02
    2518:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251a:	8e 01       	movw	r16, r28
    251c:	05 5a       	subi	r16, 0xA5	; 165
    251e:	1f 4f       	sbci	r17, 0xFF	; 255
    2520:	fe 01       	movw	r30, r28
    2522:	e1 5a       	subi	r30, 0xA1	; 161
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	60 81       	ld	r22, Z
    2528:	71 81       	ldd	r23, Z+1	; 0x01
    252a:	82 81       	ldd	r24, Z+2	; 0x02
    252c:	93 81       	ldd	r25, Z+3	; 0x03
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	4a ef       	ldi	r20, 0xFA	; 250
    2534:	54 e4       	ldi	r21, 0x44	; 68
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	f8 01       	movw	r30, r16
    2540:	80 83       	st	Z, r24
    2542:	91 83       	std	Z+1, r25	; 0x01
    2544:	a2 83       	std	Z+2, r26	; 0x02
    2546:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2548:	fe 01       	movw	r30, r28
    254a:	e5 5a       	subi	r30, 0xA5	; 165
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	60 81       	ld	r22, Z
    2550:	71 81       	ldd	r23, Z+1	; 0x01
    2552:	82 81       	ldd	r24, Z+2	; 0x02
    2554:	93 81       	ldd	r25, Z+3	; 0x03
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e8       	ldi	r20, 0x80	; 128
    255c:	5f e3       	ldi	r21, 0x3F	; 63
    255e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2562:	88 23       	and	r24, r24
    2564:	44 f4       	brge	.+16     	; 0x2576 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2566:	fe 01       	movw	r30, r28
    2568:	e7 5a       	subi	r30, 0xA7	; 167
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	91 83       	std	Z+1, r25	; 0x01
    2572:	80 83       	st	Z, r24
    2574:	64 c0       	rjmp	.+200    	; 0x263e <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2576:	fe 01       	movw	r30, r28
    2578:	e5 5a       	subi	r30, 0xA5	; 165
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	60 81       	ld	r22, Z
    257e:	71 81       	ldd	r23, Z+1	; 0x01
    2580:	82 81       	ldd	r24, Z+2	; 0x02
    2582:	93 81       	ldd	r25, Z+3	; 0x03
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	3f ef       	ldi	r19, 0xFF	; 255
    2588:	4f e7       	ldi	r20, 0x7F	; 127
    258a:	57 e4       	ldi	r21, 0x47	; 71
    258c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2590:	18 16       	cp	r1, r24
    2592:	0c f0       	brlt	.+2      	; 0x2596 <LCD_displayCharacter+0xbe>
    2594:	43 c0       	rjmp	.+134    	; 0x261c <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2596:	fe 01       	movw	r30, r28
    2598:	e1 5a       	subi	r30, 0xA1	; 161
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	60 81       	ld	r22, Z
    259e:	71 81       	ldd	r23, Z+1	; 0x01
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e2       	ldi	r20, 0x20	; 32
    25aa:	51 e4       	ldi	r21, 0x41	; 65
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	8e 01       	movw	r16, r28
    25b6:	07 5a       	subi	r16, 0xA7	; 167
    25b8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ba:	bc 01       	movw	r22, r24
    25bc:	cd 01       	movw	r24, r26
    25be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	f8 01       	movw	r30, r16
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	80 83       	st	Z, r24
    25cc:	1f c0       	rjmp	.+62     	; 0x260c <LCD_displayCharacter+0x134>
    25ce:	fe 01       	movw	r30, r28
    25d0:	e9 5a       	subi	r30, 0xA9	; 169
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	88 ec       	ldi	r24, 0xC8	; 200
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	91 83       	std	Z+1, r25	; 0x01
    25da:	80 83       	st	Z, r24
    25dc:	fe 01       	movw	r30, r28
    25de:	e9 5a       	subi	r30, 0xA9	; 169
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	80 81       	ld	r24, Z
    25e4:	91 81       	ldd	r25, Z+1	; 0x01
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <LCD_displayCharacter+0x10e>
    25ea:	fe 01       	movw	r30, r28
    25ec:	e9 5a       	subi	r30, 0xA9	; 169
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f4:	de 01       	movw	r26, r28
    25f6:	a7 5a       	subi	r26, 0xA7	; 167
    25f8:	bf 4f       	sbci	r27, 0xFF	; 255
    25fa:	fe 01       	movw	r30, r28
    25fc:	e7 5a       	subi	r30, 0xA7	; 167
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 81       	ld	r24, Z
    2602:	91 81       	ldd	r25, Z+1	; 0x01
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	11 96       	adiw	r26, 0x01	; 1
    2608:	9c 93       	st	X, r25
    260a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260c:	fe 01       	movw	r30, r28
    260e:	e7 5a       	subi	r30, 0xA7	; 167
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	80 81       	ld	r24, Z
    2614:	91 81       	ldd	r25, Z+1	; 0x01
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	d1 f6       	brne	.-76     	; 0x25ce <LCD_displayCharacter+0xf6>
    261a:	27 c0       	rjmp	.+78     	; 0x266a <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261c:	8e 01       	movw	r16, r28
    261e:	07 5a       	subi	r16, 0xA7	; 167
    2620:	1f 4f       	sbci	r17, 0xFF	; 255
    2622:	fe 01       	movw	r30, r28
    2624:	e5 5a       	subi	r30, 0xA5	; 165
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	f8 01       	movw	r30, r16
    263a:	91 83       	std	Z+1, r25	; 0x01
    263c:	80 83       	st	Z, r24
    263e:	de 01       	movw	r26, r28
    2640:	ab 5a       	subi	r26, 0xAB	; 171
    2642:	bf 4f       	sbci	r27, 0xFF	; 255
    2644:	fe 01       	movw	r30, r28
    2646:	e7 5a       	subi	r30, 0xA7	; 167
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	80 81       	ld	r24, Z
    264c:	91 81       	ldd	r25, Z+1	; 0x01
    264e:	8d 93       	st	X+, r24
    2650:	9c 93       	st	X, r25
    2652:	fe 01       	movw	r30, r28
    2654:	eb 5a       	subi	r30, 0xAB	; 171
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	80 81       	ld	r24, Z
    265a:	91 81       	ldd	r25, Z+1	; 0x01
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <LCD_displayCharacter+0x184>
    2660:	fe 01       	movw	r30, r28
    2662:	eb 5a       	subi	r30, 0xAB	; 171
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	91 83       	std	Z+1, r25	; 0x01
    2668:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_HIGH);
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	62 e0       	ldi	r22, 0x02	; 2
    266e:	41 e0       	ldi	r20, 0x01	; 1
    2670:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2674:	fe 01       	movw	r30, r28
    2676:	ef 5a       	subi	r30, 0xAF	; 175
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	a0 e8       	ldi	r26, 0x80	; 128
    2680:	bf e3       	ldi	r27, 0x3F	; 63
    2682:	80 83       	st	Z, r24
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	a2 83       	std	Z+2, r26	; 0x02
    2688:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268a:	8e 01       	movw	r16, r28
    268c:	03 5b       	subi	r16, 0xB3	; 179
    268e:	1f 4f       	sbci	r17, 0xFF	; 255
    2690:	fe 01       	movw	r30, r28
    2692:	ef 5a       	subi	r30, 0xAF	; 175
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	60 81       	ld	r22, Z
    2698:	71 81       	ldd	r23, Z+1	; 0x01
    269a:	82 81       	ldd	r24, Z+2	; 0x02
    269c:	93 81       	ldd	r25, Z+3	; 0x03
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	4a ef       	ldi	r20, 0xFA	; 250
    26a4:	54 e4       	ldi	r21, 0x44	; 68
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	f8 01       	movw	r30, r16
    26b0:	80 83       	st	Z, r24
    26b2:	91 83       	std	Z+1, r25	; 0x01
    26b4:	a2 83       	std	Z+2, r26	; 0x02
    26b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26b8:	fe 01       	movw	r30, r28
    26ba:	e3 5b       	subi	r30, 0xB3	; 179
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	60 81       	ld	r22, Z
    26c0:	71 81       	ldd	r23, Z+1	; 0x01
    26c2:	82 81       	ldd	r24, Z+2	; 0x02
    26c4:	93 81       	ldd	r25, Z+3	; 0x03
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e8       	ldi	r20, 0x80	; 128
    26cc:	5f e3       	ldi	r21, 0x3F	; 63
    26ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26d2:	88 23       	and	r24, r24
    26d4:	44 f4       	brge	.+16     	; 0x26e6 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    26d6:	fe 01       	movw	r30, r28
    26d8:	e5 5b       	subi	r30, 0xB5	; 181
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	80 83       	st	Z, r24
    26e4:	64 c0       	rjmp	.+200    	; 0x27ae <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    26e6:	fe 01       	movw	r30, r28
    26e8:	e3 5b       	subi	r30, 0xB3	; 179
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	60 81       	ld	r22, Z
    26ee:	71 81       	ldd	r23, Z+1	; 0x01
    26f0:	82 81       	ldd	r24, Z+2	; 0x02
    26f2:	93 81       	ldd	r25, Z+3	; 0x03
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	3f ef       	ldi	r19, 0xFF	; 255
    26f8:	4f e7       	ldi	r20, 0x7F	; 127
    26fa:	57 e4       	ldi	r21, 0x47	; 71
    26fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2700:	18 16       	cp	r1, r24
    2702:	0c f0       	brlt	.+2      	; 0x2706 <LCD_displayCharacter+0x22e>
    2704:	43 c0       	rjmp	.+134    	; 0x278c <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2706:	fe 01       	movw	r30, r28
    2708:	ef 5a       	subi	r30, 0xAF	; 175
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	60 81       	ld	r22, Z
    270e:	71 81       	ldd	r23, Z+1	; 0x01
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e2       	ldi	r20, 0x20	; 32
    271a:	51 e4       	ldi	r21, 0x41	; 65
    271c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	8e 01       	movw	r16, r28
    2726:	05 5b       	subi	r16, 0xB5	; 181
    2728:	1f 4f       	sbci	r17, 0xFF	; 255
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	f8 01       	movw	r30, r16
    2738:	91 83       	std	Z+1, r25	; 0x01
    273a:	80 83       	st	Z, r24
    273c:	1f c0       	rjmp	.+62     	; 0x277c <LCD_displayCharacter+0x2a4>
    273e:	fe 01       	movw	r30, r28
    2740:	e7 5b       	subi	r30, 0xB7	; 183
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	88 ec       	ldi	r24, 0xC8	; 200
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	91 83       	std	Z+1, r25	; 0x01
    274a:	80 83       	st	Z, r24
    274c:	fe 01       	movw	r30, r28
    274e:	e7 5b       	subi	r30, 0xB7	; 183
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	80 81       	ld	r24, Z
    2754:	91 81       	ldd	r25, Z+1	; 0x01
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f7       	brne	.-4      	; 0x2756 <LCD_displayCharacter+0x27e>
    275a:	fe 01       	movw	r30, r28
    275c:	e7 5b       	subi	r30, 0xB7	; 183
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	91 83       	std	Z+1, r25	; 0x01
    2762:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2764:	de 01       	movw	r26, r28
    2766:	a5 5b       	subi	r26, 0xB5	; 181
    2768:	bf 4f       	sbci	r27, 0xFF	; 255
    276a:	fe 01       	movw	r30, r28
    276c:	e5 5b       	subi	r30, 0xB5	; 181
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	80 81       	ld	r24, Z
    2772:	91 81       	ldd	r25, Z+1	; 0x01
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	11 96       	adiw	r26, 0x01	; 1
    2778:	9c 93       	st	X, r25
    277a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    277c:	fe 01       	movw	r30, r28
    277e:	e5 5b       	subi	r30, 0xB5	; 181
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 81       	ld	r24, Z
    2784:	91 81       	ldd	r25, Z+1	; 0x01
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	d1 f6       	brne	.-76     	; 0x273e <LCD_displayCharacter+0x266>
    278a:	27 c0       	rjmp	.+78     	; 0x27da <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278c:	8e 01       	movw	r16, r28
    278e:	05 5b       	subi	r16, 0xB5	; 181
    2790:	1f 4f       	sbci	r17, 0xFF	; 255
    2792:	fe 01       	movw	r30, r28
    2794:	e3 5b       	subi	r30, 0xB3	; 179
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	60 81       	ld	r22, Z
    279a:	71 81       	ldd	r23, Z+1	; 0x01
    279c:	82 81       	ldd	r24, Z+2	; 0x02
    279e:	93 81       	ldd	r25, Z+3	; 0x03
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	f8 01       	movw	r30, r16
    27aa:	91 83       	std	Z+1, r25	; 0x01
    27ac:	80 83       	st	Z, r24
    27ae:	de 01       	movw	r26, r28
    27b0:	a9 5b       	subi	r26, 0xB9	; 185
    27b2:	bf 4f       	sbci	r27, 0xFF	; 255
    27b4:	fe 01       	movw	r30, r28
    27b6:	e5 5b       	subi	r30, 0xB5	; 181
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	80 81       	ld	r24, Z
    27bc:	91 81       	ldd	r25, Z+1	; 0x01
    27be:	8d 93       	st	X+, r24
    27c0:	9c 93       	st	X, r25
    27c2:	fe 01       	movw	r30, r28
    27c4:	e9 5b       	subi	r30, 0xB9	; 185
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 81       	ld	r24, Z
    27ca:	91 81       	ldd	r25, Z+1	; 0x01
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f1 f7       	brne	.-4      	; 0x27cc <LCD_displayCharacter+0x2f4>
    27d0:	fe 01       	movw	r30, r28
    27d2:	e9 5b       	subi	r30, 0xB9	; 185
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	91 83       	std	Z+1, r25	; 0x01
    27d8:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_LOW);
	_delay_ms(1);

#elif (LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT,GET_BIT(character, 4));
    27da:	fe 01       	movw	r30, r28
    27dc:	ed 59       	subi	r30, 0x9D	; 157
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	80 81       	ld	r24, Z
    27e2:	88 2f       	mov	r24, r24
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	80 71       	andi	r24, 0x10	; 16
    27e8:	90 70       	andi	r25, 0x00	; 0
    27ea:	95 95       	asr	r25
    27ec:	87 95       	ror	r24
    27ee:	95 95       	asr	r25
    27f0:	87 95       	ror	r24
    27f2:	95 95       	asr	r25
    27f4:	87 95       	ror	r24
    27f6:	95 95       	asr	r25
    27f8:	87 95       	ror	r24
    27fa:	98 2f       	mov	r25, r24
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	63 e0       	ldi	r22, 0x03	; 3
    2800:	49 2f       	mov	r20, r25
    2802:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+1,GET_BIT(character, 5));
    2806:	fe 01       	movw	r30, r28
    2808:	ed 59       	subi	r30, 0x9D	; 157
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	80 81       	ld	r24, Z
    280e:	88 2f       	mov	r24, r24
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	80 72       	andi	r24, 0x20	; 32
    2814:	90 70       	andi	r25, 0x00	; 0
    2816:	95 95       	asr	r25
    2818:	87 95       	ror	r24
    281a:	95 95       	asr	r25
    281c:	87 95       	ror	r24
    281e:	95 95       	asr	r25
    2820:	87 95       	ror	r24
    2822:	95 95       	asr	r25
    2824:	87 95       	ror	r24
    2826:	95 95       	asr	r25
    2828:	87 95       	ror	r24
    282a:	98 2f       	mov	r25, r24
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	64 e0       	ldi	r22, 0x04	; 4
    2830:	49 2f       	mov	r20, r25
    2832:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+2,GET_BIT(character, 6));
    2836:	fe 01       	movw	r30, r28
    2838:	ed 59       	subi	r30, 0x9D	; 157
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	80 81       	ld	r24, Z
    283e:	88 2f       	mov	r24, r24
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	80 74       	andi	r24, 0x40	; 64
    2844:	90 70       	andi	r25, 0x00	; 0
    2846:	08 2e       	mov	r0, r24
    2848:	89 2f       	mov	r24, r25
    284a:	00 0c       	add	r0, r0
    284c:	88 1f       	adc	r24, r24
    284e:	99 0b       	sbc	r25, r25
    2850:	00 0c       	add	r0, r0
    2852:	88 1f       	adc	r24, r24
    2854:	99 1f       	adc	r25, r25
    2856:	98 2f       	mov	r25, r24
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	65 e0       	ldi	r22, 0x05	; 5
    285c:	49 2f       	mov	r20, r25
    285e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+3,GET_BIT(character, 7));
    2862:	fe 01       	movw	r30, r28
    2864:	ed 59       	subi	r30, 0x9D	; 157
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	80 81       	ld	r24, Z
    286a:	98 2f       	mov	r25, r24
    286c:	99 1f       	adc	r25, r25
    286e:	99 27       	eor	r25, r25
    2870:	99 1f       	adc	r25, r25
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	66 e0       	ldi	r22, 0x06	; 6
    2876:	49 2f       	mov	r20, r25
    2878:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    287c:	fe 01       	movw	r30, r28
    287e:	ed 5b       	subi	r30, 0xBD	; 189
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	a0 e8       	ldi	r26, 0x80	; 128
    2888:	bf e3       	ldi	r27, 0x3F	; 63
    288a:	80 83       	st	Z, r24
    288c:	91 83       	std	Z+1, r25	; 0x01
    288e:	a2 83       	std	Z+2, r26	; 0x02
    2890:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2892:	8e 01       	movw	r16, r28
    2894:	01 5c       	subi	r16, 0xC1	; 193
    2896:	1f 4f       	sbci	r17, 0xFF	; 255
    2898:	fe 01       	movw	r30, r28
    289a:	ed 5b       	subi	r30, 0xBD	; 189
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	60 81       	ld	r22, Z
    28a0:	71 81       	ldd	r23, Z+1	; 0x01
    28a2:	82 81       	ldd	r24, Z+2	; 0x02
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	4a ef       	ldi	r20, 0xFA	; 250
    28ac:	54 e4       	ldi	r21, 0x44	; 68
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	f8 01       	movw	r30, r16
    28b8:	80 83       	st	Z, r24
    28ba:	91 83       	std	Z+1, r25	; 0x01
    28bc:	a2 83       	std	Z+2, r26	; 0x02
    28be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28c0:	fe 01       	movw	r30, r28
    28c2:	ff 96       	adiw	r30, 0x3f	; 63
    28c4:	60 81       	ld	r22, Z
    28c6:	71 81       	ldd	r23, Z+1	; 0x01
    28c8:	82 81       	ldd	r24, Z+2	; 0x02
    28ca:	93 81       	ldd	r25, Z+3	; 0x03
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	40 e8       	ldi	r20, 0x80	; 128
    28d2:	5f e3       	ldi	r21, 0x3F	; 63
    28d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d8:	88 23       	and	r24, r24
    28da:	2c f4       	brge	.+10     	; 0x28e6 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	9e af       	std	Y+62, r25	; 0x3e
    28e2:	8d af       	std	Y+61, r24	; 0x3d
    28e4:	46 c0       	rjmp	.+140    	; 0x2972 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    28e6:	fe 01       	movw	r30, r28
    28e8:	ff 96       	adiw	r30, 0x3f	; 63
    28ea:	60 81       	ld	r22, Z
    28ec:	71 81       	ldd	r23, Z+1	; 0x01
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	93 81       	ldd	r25, Z+3	; 0x03
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	3f ef       	ldi	r19, 0xFF	; 255
    28f6:	4f e7       	ldi	r20, 0x7F	; 127
    28f8:	57 e4       	ldi	r21, 0x47	; 71
    28fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28fe:	18 16       	cp	r1, r24
    2900:	64 f5       	brge	.+88     	; 0x295a <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2902:	fe 01       	movw	r30, r28
    2904:	ed 5b       	subi	r30, 0xBD	; 189
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	60 81       	ld	r22, Z
    290a:	71 81       	ldd	r23, Z+1	; 0x01
    290c:	82 81       	ldd	r24, Z+2	; 0x02
    290e:	93 81       	ldd	r25, Z+3	; 0x03
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e2       	ldi	r20, 0x20	; 32
    2916:	51 e4       	ldi	r21, 0x41	; 65
    2918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	bc 01       	movw	r22, r24
    2922:	cd 01       	movw	r24, r26
    2924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	9e af       	std	Y+62, r25	; 0x3e
    292e:	8d af       	std	Y+61, r24	; 0x3d
    2930:	0f c0       	rjmp	.+30     	; 0x2950 <LCD_displayCharacter+0x478>
    2932:	88 ec       	ldi	r24, 0xC8	; 200
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9c af       	std	Y+60, r25	; 0x3c
    2938:	8b af       	std	Y+59, r24	; 0x3b
    293a:	8b ad       	ldd	r24, Y+59	; 0x3b
    293c:	9c ad       	ldd	r25, Y+60	; 0x3c
    293e:	01 97       	sbiw	r24, 0x01	; 1
    2940:	f1 f7       	brne	.-4      	; 0x293e <LCD_displayCharacter+0x466>
    2942:	9c af       	std	Y+60, r25	; 0x3c
    2944:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2946:	8d ad       	ldd	r24, Y+61	; 0x3d
    2948:	9e ad       	ldd	r25, Y+62	; 0x3e
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	9e af       	std	Y+62, r25	; 0x3e
    294e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2950:	8d ad       	ldd	r24, Y+61	; 0x3d
    2952:	9e ad       	ldd	r25, Y+62	; 0x3e
    2954:	00 97       	sbiw	r24, 0x00	; 0
    2956:	69 f7       	brne	.-38     	; 0x2932 <LCD_displayCharacter+0x45a>
    2958:	16 c0       	rjmp	.+44     	; 0x2986 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    295a:	fe 01       	movw	r30, r28
    295c:	ff 96       	adiw	r30, 0x3f	; 63
    295e:	60 81       	ld	r22, Z
    2960:	71 81       	ldd	r23, Z+1	; 0x01
    2962:	82 81       	ldd	r24, Z+2	; 0x02
    2964:	93 81       	ldd	r25, Z+3	; 0x03
    2966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	9e af       	std	Y+62, r25	; 0x3e
    2970:	8d af       	std	Y+61, r24	; 0x3d
    2972:	8d ad       	ldd	r24, Y+61	; 0x3d
    2974:	9e ad       	ldd	r25, Y+62	; 0x3e
    2976:	9a af       	std	Y+58, r25	; 0x3a
    2978:	89 af       	std	Y+57, r24	; 0x39
    297a:	89 ad       	ldd	r24, Y+57	; 0x39
    297c:	9a ad       	ldd	r25, Y+58	; 0x3a
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	f1 f7       	brne	.-4      	; 0x297e <LCD_displayCharacter+0x4a6>
    2982:	9a af       	std	Y+58, r25	; 0x3a
    2984:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_LOW);
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	62 e0       	ldi	r22, 0x02	; 2
    298a:	40 e0       	ldi	r20, 0x00	; 0
    298c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	a0 e8       	ldi	r26, 0x80	; 128
    2996:	bf e3       	ldi	r27, 0x3F	; 63
    2998:	8d ab       	std	Y+53, r24	; 0x35
    299a:	9e ab       	std	Y+54, r25	; 0x36
    299c:	af ab       	std	Y+55, r26	; 0x37
    299e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a0:	6d a9       	ldd	r22, Y+53	; 0x35
    29a2:	7e a9       	ldd	r23, Y+54	; 0x36
    29a4:	8f a9       	ldd	r24, Y+55	; 0x37
    29a6:	98 ad       	ldd	r25, Y+56	; 0x38
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	4a ef       	ldi	r20, 0xFA	; 250
    29ae:	54 e4       	ldi	r21, 0x44	; 68
    29b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	89 ab       	std	Y+49, r24	; 0x31
    29ba:	9a ab       	std	Y+50, r25	; 0x32
    29bc:	ab ab       	std	Y+51, r26	; 0x33
    29be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29c0:	69 a9       	ldd	r22, Y+49	; 0x31
    29c2:	7a a9       	ldd	r23, Y+50	; 0x32
    29c4:	8b a9       	ldd	r24, Y+51	; 0x33
    29c6:	9c a9       	ldd	r25, Y+52	; 0x34
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e8       	ldi	r20, 0x80	; 128
    29ce:	5f e3       	ldi	r21, 0x3F	; 63
    29d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d4:	88 23       	and	r24, r24
    29d6:	2c f4       	brge	.+10     	; 0x29e2 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	98 ab       	std	Y+48, r25	; 0x30
    29de:	8f a7       	std	Y+47, r24	; 0x2f
    29e0:	3f c0       	rjmp	.+126    	; 0x2a60 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    29e2:	69 a9       	ldd	r22, Y+49	; 0x31
    29e4:	7a a9       	ldd	r23, Y+50	; 0x32
    29e6:	8b a9       	ldd	r24, Y+51	; 0x33
    29e8:	9c a9       	ldd	r25, Y+52	; 0x34
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	3f ef       	ldi	r19, 0xFF	; 255
    29ee:	4f e7       	ldi	r20, 0x7F	; 127
    29f0:	57 e4       	ldi	r21, 0x47	; 71
    29f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f6:	18 16       	cp	r1, r24
    29f8:	4c f5       	brge	.+82     	; 0x2a4c <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fa:	6d a9       	ldd	r22, Y+53	; 0x35
    29fc:	7e a9       	ldd	r23, Y+54	; 0x36
    29fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2a00:	98 ad       	ldd	r25, Y+56	; 0x38
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e2       	ldi	r20, 0x20	; 32
    2a08:	51 e4       	ldi	r21, 0x41	; 65
    2a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	bc 01       	movw	r22, r24
    2a14:	cd 01       	movw	r24, r26
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	98 ab       	std	Y+48, r25	; 0x30
    2a20:	8f a7       	std	Y+47, r24	; 0x2f
    2a22:	0f c0       	rjmp	.+30     	; 0x2a42 <LCD_displayCharacter+0x56a>
    2a24:	88 ec       	ldi	r24, 0xC8	; 200
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	9e a7       	std	Y+46, r25	; 0x2e
    2a2a:	8d a7       	std	Y+45, r24	; 0x2d
    2a2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <LCD_displayCharacter+0x558>
    2a34:	9e a7       	std	Y+46, r25	; 0x2e
    2a36:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a38:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a3a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	98 ab       	std	Y+48, r25	; 0x30
    2a40:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a42:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a44:	98 a9       	ldd	r25, Y+48	; 0x30
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	69 f7       	brne	.-38     	; 0x2a24 <LCD_displayCharacter+0x54c>
    2a4a:	14 c0       	rjmp	.+40     	; 0x2a74 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a4e:	7a a9       	ldd	r23, Y+50	; 0x32
    2a50:	8b a9       	ldd	r24, Y+51	; 0x33
    2a52:	9c a9       	ldd	r25, Y+52	; 0x34
    2a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	98 ab       	std	Y+48, r25	; 0x30
    2a5e:	8f a7       	std	Y+47, r24	; 0x2f
    2a60:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a62:	98 a9       	ldd	r25, Y+48	; 0x30
    2a64:	9c a7       	std	Y+44, r25	; 0x2c
    2a66:	8b a7       	std	Y+43, r24	; 0x2b
    2a68:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <LCD_displayCharacter+0x594>
    2a70:	9c a7       	std	Y+44, r25	; 0x2c
    2a72:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_HIGH);
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	62 e0       	ldi	r22, 0x02	; 2
    2a78:	41 e0       	ldi	r20, 0x01	; 1
    2a7a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	a0 e8       	ldi	r26, 0x80	; 128
    2a84:	bf e3       	ldi	r27, 0x3F	; 63
    2a86:	8f a3       	std	Y+39, r24	; 0x27
    2a88:	98 a7       	std	Y+40, r25	; 0x28
    2a8a:	a9 a7       	std	Y+41, r26	; 0x29
    2a8c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8e:	6f a1       	ldd	r22, Y+39	; 0x27
    2a90:	78 a5       	ldd	r23, Y+40	; 0x28
    2a92:	89 a5       	ldd	r24, Y+41	; 0x29
    2a94:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	4a ef       	ldi	r20, 0xFA	; 250
    2a9c:	54 e4       	ldi	r21, 0x44	; 68
    2a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	8b a3       	std	Y+35, r24	; 0x23
    2aa8:	9c a3       	std	Y+36, r25	; 0x24
    2aaa:	ad a3       	std	Y+37, r26	; 0x25
    2aac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2aae:	6b a1       	ldd	r22, Y+35	; 0x23
    2ab0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ab2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ab4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e8       	ldi	r20, 0x80	; 128
    2abc:	5f e3       	ldi	r21, 0x3F	; 63
    2abe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ac2:	88 23       	and	r24, r24
    2ac4:	2c f4       	brge	.+10     	; 0x2ad0 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	9a a3       	std	Y+34, r25	; 0x22
    2acc:	89 a3       	std	Y+33, r24	; 0x21
    2ace:	3f c0       	rjmp	.+126    	; 0x2b4e <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2ad0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ad2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ad4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ad6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	3f ef       	ldi	r19, 0xFF	; 255
    2adc:	4f e7       	ldi	r20, 0x7F	; 127
    2ade:	57 e4       	ldi	r21, 0x47	; 71
    2ae0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae4:	18 16       	cp	r1, r24
    2ae6:	4c f5       	brge	.+82     	; 0x2b3a <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae8:	6f a1       	ldd	r22, Y+39	; 0x27
    2aea:	78 a5       	ldd	r23, Y+40	; 0x28
    2aec:	89 a5       	ldd	r24, Y+41	; 0x29
    2aee:	9a a5       	ldd	r25, Y+42	; 0x2a
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	40 e2       	ldi	r20, 0x20	; 32
    2af6:	51 e4       	ldi	r21, 0x41	; 65
    2af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	bc 01       	movw	r22, r24
    2b02:	cd 01       	movw	r24, r26
    2b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	9a a3       	std	Y+34, r25	; 0x22
    2b0e:	89 a3       	std	Y+33, r24	; 0x21
    2b10:	0f c0       	rjmp	.+30     	; 0x2b30 <LCD_displayCharacter+0x658>
    2b12:	88 ec       	ldi	r24, 0xC8	; 200
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	98 a3       	std	Y+32, r25	; 0x20
    2b18:	8f 8f       	std	Y+31, r24	; 0x1f
    2b1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b1c:	98 a1       	ldd	r25, Y+32	; 0x20
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <LCD_displayCharacter+0x646>
    2b22:	98 a3       	std	Y+32, r25	; 0x20
    2b24:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b26:	89 a1       	ldd	r24, Y+33	; 0x21
    2b28:	9a a1       	ldd	r25, Y+34	; 0x22
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	9a a3       	std	Y+34, r25	; 0x22
    2b2e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b30:	89 a1       	ldd	r24, Y+33	; 0x21
    2b32:	9a a1       	ldd	r25, Y+34	; 0x22
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	69 f7       	brne	.-38     	; 0x2b12 <LCD_displayCharacter+0x63a>
    2b38:	14 c0       	rjmp	.+40     	; 0x2b62 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b3c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b3e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b40:	9e a1       	ldd	r25, Y+38	; 0x26
    2b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9a a3       	std	Y+34, r25	; 0x22
    2b4c:	89 a3       	std	Y+33, r24	; 0x21
    2b4e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b50:	9a a1       	ldd	r25, Y+34	; 0x22
    2b52:	9e 8f       	std	Y+30, r25	; 0x1e
    2b54:	8d 8f       	std	Y+29, r24	; 0x1d
    2b56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b58:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	f1 f7       	brne	.-4      	; 0x2b5a <LCD_displayCharacter+0x682>
    2b5e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b60:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT,GET_BIT(character, 0));
    2b62:	fe 01       	movw	r30, r28
    2b64:	ed 59       	subi	r30, 0x9D	; 157
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	80 81       	ld	r24, Z
    2b6a:	98 2f       	mov	r25, r24
    2b6c:	91 70       	andi	r25, 0x01	; 1
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	63 e0       	ldi	r22, 0x03	; 3
    2b72:	49 2f       	mov	r20, r25
    2b74:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+1,GET_BIT(character, 1));
    2b78:	fe 01       	movw	r30, r28
    2b7a:	ed 59       	subi	r30, 0x9D	; 157
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	80 81       	ld	r24, Z
    2b80:	88 2f       	mov	r24, r24
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	82 70       	andi	r24, 0x02	; 2
    2b86:	90 70       	andi	r25, 0x00	; 0
    2b88:	95 95       	asr	r25
    2b8a:	87 95       	ror	r24
    2b8c:	98 2f       	mov	r25, r24
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	64 e0       	ldi	r22, 0x04	; 4
    2b92:	49 2f       	mov	r20, r25
    2b94:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+2,GET_BIT(character, 2));
    2b98:	fe 01       	movw	r30, r28
    2b9a:	ed 59       	subi	r30, 0x9D	; 157
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	80 81       	ld	r24, Z
    2ba0:	88 2f       	mov	r24, r24
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	84 70       	andi	r24, 0x04	; 4
    2ba6:	90 70       	andi	r25, 0x00	; 0
    2ba8:	95 95       	asr	r25
    2baa:	87 95       	ror	r24
    2bac:	95 95       	asr	r25
    2bae:	87 95       	ror	r24
    2bb0:	98 2f       	mov	r25, r24
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	65 e0       	ldi	r22, 0x05	; 5
    2bb6:	49 2f       	mov	r20, r25
    2bb8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+3,GET_BIT(character, 3));
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	ed 59       	subi	r30, 0x9D	; 157
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	80 81       	ld	r24, Z
    2bc4:	88 2f       	mov	r24, r24
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	88 70       	andi	r24, 0x08	; 8
    2bca:	90 70       	andi	r25, 0x00	; 0
    2bcc:	95 95       	asr	r25
    2bce:	87 95       	ror	r24
    2bd0:	95 95       	asr	r25
    2bd2:	87 95       	ror	r24
    2bd4:	95 95       	asr	r25
    2bd6:	87 95       	ror	r24
    2bd8:	98 2f       	mov	r25, r24
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	66 e0       	ldi	r22, 0x06	; 6
    2bde:	49 2f       	mov	r20, r25
    2be0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	a0 e8       	ldi	r26, 0x80	; 128
    2bea:	bf e3       	ldi	r27, 0x3F	; 63
    2bec:	89 8f       	std	Y+25, r24	; 0x19
    2bee:	9a 8f       	std	Y+26, r25	; 0x1a
    2bf0:	ab 8f       	std	Y+27, r26	; 0x1b
    2bf2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf4:	69 8d       	ldd	r22, Y+25	; 0x19
    2bf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	4a ef       	ldi	r20, 0xFA	; 250
    2c02:	54 e4       	ldi	r21, 0x44	; 68
    2c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	8d 8b       	std	Y+21, r24	; 0x15
    2c0e:	9e 8b       	std	Y+22, r25	; 0x16
    2c10:	af 8b       	std	Y+23, r26	; 0x17
    2c12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c14:	6d 89       	ldd	r22, Y+21	; 0x15
    2c16:	7e 89       	ldd	r23, Y+22	; 0x16
    2c18:	8f 89       	ldd	r24, Y+23	; 0x17
    2c1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e8       	ldi	r20, 0x80	; 128
    2c22:	5f e3       	ldi	r21, 0x3F	; 63
    2c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c28:	88 23       	and	r24, r24
    2c2a:	2c f4       	brge	.+10     	; 0x2c36 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	9c 8b       	std	Y+20, r25	; 0x14
    2c32:	8b 8b       	std	Y+19, r24	; 0x13
    2c34:	3f c0       	rjmp	.+126    	; 0x2cb4 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2c36:	6d 89       	ldd	r22, Y+21	; 0x15
    2c38:	7e 89       	ldd	r23, Y+22	; 0x16
    2c3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	3f ef       	ldi	r19, 0xFF	; 255
    2c42:	4f e7       	ldi	r20, 0x7F	; 127
    2c44:	57 e4       	ldi	r21, 0x47	; 71
    2c46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c4a:	18 16       	cp	r1, r24
    2c4c:	4c f5       	brge	.+82     	; 0x2ca0 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c4e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e2       	ldi	r20, 0x20	; 32
    2c5c:	51 e4       	ldi	r21, 0x41	; 65
    2c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	bc 01       	movw	r22, r24
    2c68:	cd 01       	movw	r24, r26
    2c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	9c 8b       	std	Y+20, r25	; 0x14
    2c74:	8b 8b       	std	Y+19, r24	; 0x13
    2c76:	0f c0       	rjmp	.+30     	; 0x2c96 <LCD_displayCharacter+0x7be>
    2c78:	88 ec       	ldi	r24, 0xC8	; 200
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	9a 8b       	std	Y+18, r25	; 0x12
    2c7e:	89 8b       	std	Y+17, r24	; 0x11
    2c80:	89 89       	ldd	r24, Y+17	; 0x11
    2c82:	9a 89       	ldd	r25, Y+18	; 0x12
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <LCD_displayCharacter+0x7ac>
    2c88:	9a 8b       	std	Y+18, r25	; 0x12
    2c8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	9c 8b       	std	Y+20, r25	; 0x14
    2c94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c96:	8b 89       	ldd	r24, Y+19	; 0x13
    2c98:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	69 f7       	brne	.-38     	; 0x2c78 <LCD_displayCharacter+0x7a0>
    2c9e:	14 c0       	rjmp	.+40     	; 0x2cc8 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ca2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ca4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ca6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	9c 8b       	std	Y+20, r25	; 0x14
    2cb2:	8b 8b       	std	Y+19, r24	; 0x13
    2cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2cb8:	98 8b       	std	Y+16, r25	; 0x10
    2cba:	8f 87       	std	Y+15, r24	; 0x0f
    2cbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cbe:	98 89       	ldd	r25, Y+16	; 0x10
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	f1 f7       	brne	.-4      	; 0x2cc0 <LCD_displayCharacter+0x7e8>
    2cc4:	98 8b       	std	Y+16, r25	; 0x10
    2cc6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_LOW);
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	62 e0       	ldi	r22, 0x02	; 2
    2ccc:	40 e0       	ldi	r20, 0x00	; 0
    2cce:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	a0 e8       	ldi	r26, 0x80	; 128
    2cd8:	bf e3       	ldi	r27, 0x3F	; 63
    2cda:	8b 87       	std	Y+11, r24	; 0x0b
    2cdc:	9c 87       	std	Y+12, r25	; 0x0c
    2cde:	ad 87       	std	Y+13, r26	; 0x0d
    2ce0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	4a ef       	ldi	r20, 0xFA	; 250
    2cf0:	54 e4       	ldi	r21, 0x44	; 68
    2cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	8f 83       	std	Y+7, r24	; 0x07
    2cfc:	98 87       	std	Y+8, r25	; 0x08
    2cfe:	a9 87       	std	Y+9, r26	; 0x09
    2d00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d02:	6f 81       	ldd	r22, Y+7	; 0x07
    2d04:	78 85       	ldd	r23, Y+8	; 0x08
    2d06:	89 85       	ldd	r24, Y+9	; 0x09
    2d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	40 e8       	ldi	r20, 0x80	; 128
    2d10:	5f e3       	ldi	r21, 0x3F	; 63
    2d12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d16:	88 23       	and	r24, r24
    2d18:	2c f4       	brge	.+10     	; 0x2d24 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	9e 83       	std	Y+6, r25	; 0x06
    2d20:	8d 83       	std	Y+5, r24	; 0x05
    2d22:	3f c0       	rjmp	.+126    	; 0x2da2 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2d24:	6f 81       	ldd	r22, Y+7	; 0x07
    2d26:	78 85       	ldd	r23, Y+8	; 0x08
    2d28:	89 85       	ldd	r24, Y+9	; 0x09
    2d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	3f ef       	ldi	r19, 0xFF	; 255
    2d30:	4f e7       	ldi	r20, 0x7F	; 127
    2d32:	57 e4       	ldi	r21, 0x47	; 71
    2d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d38:	18 16       	cp	r1, r24
    2d3a:	4c f5       	brge	.+82     	; 0x2d8e <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e2       	ldi	r20, 0x20	; 32
    2d4a:	51 e4       	ldi	r21, 0x41	; 65
    2d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	bc 01       	movw	r22, r24
    2d56:	cd 01       	movw	r24, r26
    2d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	9e 83       	std	Y+6, r25	; 0x06
    2d62:	8d 83       	std	Y+5, r24	; 0x05
    2d64:	0f c0       	rjmp	.+30     	; 0x2d84 <LCD_displayCharacter+0x8ac>
    2d66:	88 ec       	ldi	r24, 0xC8	; 200
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	9c 83       	std	Y+4, r25	; 0x04
    2d6c:	8b 83       	std	Y+3, r24	; 0x03
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	9c 81       	ldd	r25, Y+4	; 0x04
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	f1 f7       	brne	.-4      	; 0x2d72 <LCD_displayCharacter+0x89a>
    2d76:	9c 83       	std	Y+4, r25	; 0x04
    2d78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	9e 83       	std	Y+6, r25	; 0x06
    2d82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d84:	8d 81       	ldd	r24, Y+5	; 0x05
    2d86:	9e 81       	ldd	r25, Y+6	; 0x06
    2d88:	00 97       	sbiw	r24, 0x00	; 0
    2d8a:	69 f7       	brne	.-38     	; 0x2d66 <LCD_displayCharacter+0x88e>
    2d8c:	14 c0       	rjmp	.+40     	; 0x2db6 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d90:	78 85       	ldd	r23, Y+8	; 0x08
    2d92:	89 85       	ldd	r24, Y+9	; 0x09
    2d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	9e 83       	std	Y+6, r25	; 0x06
    2da0:	8d 83       	std	Y+5, r24	; 0x05
    2da2:	8d 81       	ldd	r24, Y+5	; 0x05
    2da4:	9e 81       	ldd	r25, Y+6	; 0x06
    2da6:	9a 83       	std	Y+2, r25	; 0x02
    2da8:	89 83       	std	Y+1, r24	; 0x01
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	9a 81       	ldd	r25, Y+2	; 0x02
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	f1 f7       	brne	.-4      	; 0x2dae <LCD_displayCharacter+0x8d6>
    2db2:	9a 83       	std	Y+2, r25	; 0x02
    2db4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    2db6:	cd 59       	subi	r28, 0x9D	; 157
    2db8:	df 4f       	sbci	r29, 0xFF	; 255
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
    2dc4:	cf 91       	pop	r28
    2dc6:	df 91       	pop	r29
    2dc8:	1f 91       	pop	r17
    2dca:	0f 91       	pop	r16
    2dcc:	08 95       	ret

00002dce <LCD_displayString>:

void LCD_displayString(const char *str)
{
    2dce:	df 93       	push	r29
    2dd0:	cf 93       	push	r28
    2dd2:	00 d0       	rcall	.+0      	; 0x2dd4 <LCD_displayString+0x6>
    2dd4:	0f 92       	push	r0
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
    2dda:	9b 83       	std	Y+3, r25	; 0x03
    2ddc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2dde:	19 82       	std	Y+1, r1	; 0x01
    2de0:	0e c0       	rjmp	.+28     	; 0x2dfe <LCD_displayString+0x30>
	while(str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	28 2f       	mov	r18, r24
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dea:	9b 81       	ldd	r25, Y+3	; 0x03
    2dec:	fc 01       	movw	r30, r24
    2dee:	e2 0f       	add	r30, r18
    2df0:	f3 1f       	adc	r31, r19
    2df2:	80 81       	ld	r24, Z
    2df4:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_displayCharacter>
		i++;
    2df8:	89 81       	ldd	r24, Y+1	; 0x01
    2dfa:	8f 5f       	subi	r24, 0xFF	; 255
    2dfc:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	28 2f       	mov	r18, r24
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	9b 81       	ldd	r25, Y+3	; 0x03
    2e08:	fc 01       	movw	r30, r24
    2e0a:	e2 0f       	add	r30, r18
    2e0c:	f3 1f       	adc	r31, r19
    2e0e:	80 81       	ld	r24, Z
    2e10:	88 23       	and	r24, r24
    2e12:	39 f7       	brne	.-50     	; 0x2de2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    2e14:	0f 90       	pop	r0
    2e16:	0f 90       	pop	r0
    2e18:	0f 90       	pop	r0
    2e1a:	cf 91       	pop	r28
    2e1c:	df 91       	pop	r29
    2e1e:	08 95       	ret

00002e20 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 col)
{
    2e20:	df 93       	push	r29
    2e22:	cf 93       	push	r28
    2e24:	00 d0       	rcall	.+0      	; 0x2e26 <LCD_moveCursor+0x6>
    2e26:	00 d0       	rcall	.+0      	; 0x2e28 <LCD_moveCursor+0x8>
    2e28:	0f 92       	push	r0
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
    2e2e:	8a 83       	std	Y+2, r24	; 0x02
    2e30:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2e32:	8a 81       	ldd	r24, Y+2	; 0x02
    2e34:	28 2f       	mov	r18, r24
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	3d 83       	std	Y+5, r19	; 0x05
    2e3a:	2c 83       	std	Y+4, r18	; 0x04
    2e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e40:	81 30       	cpi	r24, 0x01	; 1
    2e42:	91 05       	cpc	r25, r1
    2e44:	c1 f0       	breq	.+48     	; 0x2e76 <LCD_moveCursor+0x56>
    2e46:	2c 81       	ldd	r18, Y+4	; 0x04
    2e48:	3d 81       	ldd	r19, Y+5	; 0x05
    2e4a:	22 30       	cpi	r18, 0x02	; 2
    2e4c:	31 05       	cpc	r19, r1
    2e4e:	2c f4       	brge	.+10     	; 0x2e5a <LCD_moveCursor+0x3a>
    2e50:	8c 81       	ldd	r24, Y+4	; 0x04
    2e52:	9d 81       	ldd	r25, Y+5	; 0x05
    2e54:	00 97       	sbiw	r24, 0x00	; 0
    2e56:	61 f0       	breq	.+24     	; 0x2e70 <LCD_moveCursor+0x50>
    2e58:	19 c0       	rjmp	.+50     	; 0x2e8c <LCD_moveCursor+0x6c>
    2e5a:	2c 81       	ldd	r18, Y+4	; 0x04
    2e5c:	3d 81       	ldd	r19, Y+5	; 0x05
    2e5e:	22 30       	cpi	r18, 0x02	; 2
    2e60:	31 05       	cpc	r19, r1
    2e62:	69 f0       	breq	.+26     	; 0x2e7e <LCD_moveCursor+0x5e>
    2e64:	8c 81       	ldd	r24, Y+4	; 0x04
    2e66:	9d 81       	ldd	r25, Y+5	; 0x05
    2e68:	83 30       	cpi	r24, 0x03	; 3
    2e6a:	91 05       	cpc	r25, r1
    2e6c:	61 f0       	breq	.+24     	; 0x2e86 <LCD_moveCursor+0x66>
    2e6e:	0e c0       	rjmp	.+28     	; 0x2e8c <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    2e70:	8b 81       	ldd	r24, Y+3	; 0x03
    2e72:	89 83       	std	Y+1, r24	; 0x01
    2e74:	0b c0       	rjmp	.+22     	; 0x2e8c <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    2e76:	8b 81       	ldd	r24, Y+3	; 0x03
    2e78:	80 5c       	subi	r24, 0xC0	; 192
    2e7a:	89 83       	std	Y+1, r24	; 0x01
    2e7c:	07 c0       	rjmp	.+14     	; 0x2e8c <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    2e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e80:	80 5f       	subi	r24, 0xF0	; 240
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	03 c0       	rjmp	.+6      	; 0x2e8c <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	80 5b       	subi	r24, 0xB0	; 176
    2e8a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	80 68       	ori	r24, 0x80	; 128
    2e90:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_sendCommand>
}
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	0f 90       	pop	r0
    2e9e:	cf 91       	pop	r28
    2ea0:	df 91       	pop	r29
    2ea2:	08 95       	ret

00002ea4 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row, uint8 column, const char *str)
{
    2ea4:	df 93       	push	r29
    2ea6:	cf 93       	push	r28
    2ea8:	00 d0       	rcall	.+0      	; 0x2eaa <LCD_displayStringRowColumn+0x6>
    2eaa:	00 d0       	rcall	.+0      	; 0x2eac <LCD_displayStringRowColumn+0x8>
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
    2eb0:	89 83       	std	Y+1, r24	; 0x01
    2eb2:	6a 83       	std	Y+2, r22	; 0x02
    2eb4:	5c 83       	std	Y+4, r21	; 0x04
    2eb6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,column);
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	6a 81       	ldd	r22, Y+2	; 0x02
    2ebc:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_moveCursor>
	LCD_displayString(str);
    2ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec4:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LCD_displayString>

}
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <LCD_integerToString>:

void LCD_integerToString(uint8 data)
{
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62
    2ede:	6b 97       	sbiw	r28, 0x1b	; 27
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	f8 94       	cli
    2ee4:	de bf       	out	0x3e, r29	; 62
    2ee6:	0f be       	out	0x3f, r0	; 63
    2ee8:	cd bf       	out	0x3d, r28	; 61
    2eea:	8b 8f       	std	Y+27, r24	; 0x1b
	char buff[26]; /* String to hold the ascii result */
	utoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eee:	88 2f       	mov	r24, r24
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	9e 01       	movw	r18, r28
    2ef4:	2f 5f       	subi	r18, 0xFF	; 255
    2ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef8:	b9 01       	movw	r22, r18
    2efa:	4a e0       	ldi	r20, 0x0A	; 10
    2efc:	50 e0       	ldi	r21, 0x00	; 0
    2efe:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <utoa>
	LCD_displayString(buff); /* Display the string */
    2f02:	ce 01       	movw	r24, r28
    2f04:	01 96       	adiw	r24, 0x01	; 1
    2f06:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LCD_displayString>
}
    2f0a:	6b 96       	adiw	r28, 0x1b	; 27
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	f8 94       	cli
    2f10:	de bf       	out	0x3e, r29	; 62
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	cd bf       	out	0x3d, r28	; 61
    2f16:	cf 91       	pop	r28
    2f18:	df 91       	pop	r29
    2f1a:	08 95       	ret

00002f1c <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2f1c:	df 93       	push	r29
    2f1e:	cf 93       	push	r28
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_sendCommand>

}
    2f2a:	cf 91       	pop	r28
    2f2c:	df 91       	pop	r29
    2f2e:	08 95       	ret

00002f30 <main>:
volatile uint8 pass_comp_flag = 0;

uint8 createPassword(void);
void askForPassword(void);
int main(void)
{
    2f30:	df 93       	push	r29
    2f32:	cf 93       	push	r28
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	2f 97       	sbiw	r28, 0x0f	; 15
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	f8 94       	cli
    2f3e:	de bf       	out	0x3e, r29	; 62
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	cd bf       	out	0x3d, r28	; 61

	uint8 doorStatus;

	//LCD_init();
	LCD_init();
    2f44:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <LCD_init>
	UART_init(&U_MC1);
    2f48:	8f e0       	ldi	r24, 0x0F	; 15
    2f4a:	91 e0       	ldi	r25, 0x01	; 1
    2f4c:	0e 94 14 0a 	call	0x1428	; 0x1428 <UART_init>

	UART_sendByte('N');
    2f50:	8e e4       	ldi	r24, 0x4E	; 78
    2f52:	0e 94 19 0b 	call	0x1632	; 0x1632 <UART_sendByte>
    2f56:	03 c0       	rjmp	.+6      	; 0x2f5e <main+0x2e>
	while(!createPassword())
	{
		UART_sendByte('N');
    2f58:	8e e4       	ldi	r24, 0x4E	; 78
    2f5a:	0e 94 19 0b 	call	0x1632	; 0x1632 <UART_sendByte>
	//LCD_init();
	LCD_init();
	UART_init(&U_MC1);

	UART_sendByte('N');
	while(!createPassword())
    2f5e:	0e 94 1e 1a 	call	0x343c	; 0x343c <createPassword>
    2f62:	88 23       	and	r24, r24
    2f64:	c9 f3       	breq	.-14     	; 0x2f58 <main+0x28>
	}


	while(1)
	{
		LCD_clearScreen();
    2f66:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <LCD_clearScreen>
		LCD_displayString("+ : Open Door");
    2f6a:	80 e6       	ldi	r24, 0x60	; 96
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LCD_displayString>
		LCD_moveCursor(1,0);
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	60 e0       	ldi	r22, 0x00	; 0
    2f76:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_moveCursor>
		LCD_displayString("- : Change Pass");
    2f7a:	8e e6       	ldi	r24, 0x6E	; 110
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LCD_displayString>
		key = KEYPAD_getPressedKey();
    2f82:	0e 94 ab 0b 	call	0x1756	; 0x1756 <KEYPAD_getPressedKey>
    2f86:	80 93 25 01 	sts	0x0125, r24
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	aa ef       	ldi	r26, 0xFA	; 250
    2f90:	b3 e4       	ldi	r27, 0x43	; 67
    2f92:	8b 87       	std	Y+11, r24	; 0x0b
    2f94:	9c 87       	std	Y+12, r25	; 0x0c
    2f96:	ad 87       	std	Y+13, r26	; 0x0d
    2f98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	4a ef       	ldi	r20, 0xFA	; 250
    2fa8:	54 e4       	ldi	r21, 0x44	; 68
    2faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	8f 83       	std	Y+7, r24	; 0x07
    2fb4:	98 87       	std	Y+8, r25	; 0x08
    2fb6:	a9 87       	std	Y+9, r26	; 0x09
    2fb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fba:	6f 81       	ldd	r22, Y+7	; 0x07
    2fbc:	78 85       	ldd	r23, Y+8	; 0x08
    2fbe:	89 85       	ldd	r24, Y+9	; 0x09
    2fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	40 e8       	ldi	r20, 0x80	; 128
    2fc8:	5f e3       	ldi	r21, 0x3F	; 63
    2fca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fce:	88 23       	and	r24, r24
    2fd0:	2c f4       	brge	.+10     	; 0x2fdc <main+0xac>
		__ticks = 1;
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	9e 83       	std	Y+6, r25	; 0x06
    2fd8:	8d 83       	std	Y+5, r24	; 0x05
    2fda:	3f c0       	rjmp	.+126    	; 0x305a <main+0x12a>
	else if (__tmp > 65535)
    2fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2fde:	78 85       	ldd	r23, Y+8	; 0x08
    2fe0:	89 85       	ldd	r24, Y+9	; 0x09
    2fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	3f ef       	ldi	r19, 0xFF	; 255
    2fe8:	4f e7       	ldi	r20, 0x7F	; 127
    2fea:	57 e4       	ldi	r21, 0x47	; 71
    2fec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ff0:	18 16       	cp	r1, r24
    2ff2:	4c f5       	brge	.+82     	; 0x3046 <main+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	40 e2       	ldi	r20, 0x20	; 32
    3002:	51 e4       	ldi	r21, 0x41	; 65
    3004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	bc 01       	movw	r22, r24
    300e:	cd 01       	movw	r24, r26
    3010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	9e 83       	std	Y+6, r25	; 0x06
    301a:	8d 83       	std	Y+5, r24	; 0x05
    301c:	0f c0       	rjmp	.+30     	; 0x303c <main+0x10c>
    301e:	88 ec       	ldi	r24, 0xC8	; 200
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	9c 83       	std	Y+4, r25	; 0x04
    3024:	8b 83       	std	Y+3, r24	; 0x03
    3026:	8b 81       	ldd	r24, Y+3	; 0x03
    3028:	9c 81       	ldd	r25, Y+4	; 0x04
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	f1 f7       	brne	.-4      	; 0x302a <main+0xfa>
    302e:	9c 83       	std	Y+4, r25	; 0x04
    3030:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3032:	8d 81       	ldd	r24, Y+5	; 0x05
    3034:	9e 81       	ldd	r25, Y+6	; 0x06
    3036:	01 97       	sbiw	r24, 0x01	; 1
    3038:	9e 83       	std	Y+6, r25	; 0x06
    303a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    303c:	8d 81       	ldd	r24, Y+5	; 0x05
    303e:	9e 81       	ldd	r25, Y+6	; 0x06
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	69 f7       	brne	.-38     	; 0x301e <main+0xee>
    3044:	14 c0       	rjmp	.+40     	; 0x306e <main+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3046:	6f 81       	ldd	r22, Y+7	; 0x07
    3048:	78 85       	ldd	r23, Y+8	; 0x08
    304a:	89 85       	ldd	r24, Y+9	; 0x09
    304c:	9a 85       	ldd	r25, Y+10	; 0x0a
    304e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	9e 83       	std	Y+6, r25	; 0x06
    3058:	8d 83       	std	Y+5, r24	; 0x05
    305a:	8d 81       	ldd	r24, Y+5	; 0x05
    305c:	9e 81       	ldd	r25, Y+6	; 0x06
    305e:	9a 83       	std	Y+2, r25	; 0x02
    3060:	89 83       	std	Y+1, r24	; 0x01
    3062:	89 81       	ldd	r24, Y+1	; 0x01
    3064:	9a 81       	ldd	r25, Y+2	; 0x02
    3066:	01 97       	sbiw	r24, 0x01	; 1
    3068:	f1 f7       	brne	.-4      	; 0x3066 <main+0x136>
    306a:	9a 83       	std	Y+2, r25	; 0x02
    306c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		if(key == '+')
    306e:	80 91 25 01 	lds	r24, 0x0125
    3072:	8b 32       	cpi	r24, 0x2B	; 43
    3074:	09 f0       	breq	.+2      	; 0x3078 <main+0x148>
    3076:	77 cf       	rjmp	.-274    	; 0x2f66 <main+0x36>
		{
			UART_sendByte('+');
    3078:	8b e2       	ldi	r24, 0x2B	; 43
    307a:	0e 94 19 0b 	call	0x1632	; 0x1632 <UART_sendByte>
			askForPassword();
    307e:	0e 94 64 18 	call	0x30c8	; 0x30c8 <askForPassword>
			doorStatus = UART_receiveByte();
    3082:	0e 94 30 0b 	call	0x1660	; 0x1660 <UART_receiveByte>
    3086:	8f 87       	std	Y+15, r24	; 0x0f

			if(doorStatus == 'U')
    3088:	8f 85       	ldd	r24, Y+15	; 0x0f
    308a:	85 35       	cpi	r24, 0x55	; 85
    308c:	51 f4       	brne	.+20     	; 0x30a2 <main+0x172>
			{
				LCD_clearScreen();
    308e:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <LCD_clearScreen>
				LCD_displayString("Door is Unlocking");
    3092:	8e e7       	ldi	r24, 0x7E	; 126
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LCD_displayString>
				LCD_moveCursor(0,0);
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	60 e0       	ldi	r22, 0x00	; 0
    309e:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_moveCursor>
			}
			while(UART_receiveByte() != 'L');
    30a2:	0e 94 30 0b 	call	0x1660	; 0x1660 <UART_receiveByte>
    30a6:	8c 34       	cpi	r24, 0x4C	; 76
    30a8:	e1 f7       	brne	.-8      	; 0x30a2 <main+0x172>
			LCD_clearScreen();
    30aa:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <LCD_clearScreen>
			LCD_displayString("Door is Locking");
    30ae:	80 e9       	ldi	r24, 0x90	; 144
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LCD_displayString>
			LCD_moveCursor(0,0);
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	60 e0       	ldi	r22, 0x00	; 0
    30ba:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_moveCursor>
			while(UART_receiveByte() != 'D');
    30be:	0e 94 30 0b 	call	0x1660	; 0x1660 <UART_receiveByte>
    30c2:	84 34       	cpi	r24, 0x44	; 68
    30c4:	e1 f7       	brne	.-8      	; 0x30be <main+0x18e>
    30c6:	4f cf       	rjmp	.-354    	; 0x2f66 <main+0x36>

000030c8 <askForPassword>:


}

void askForPassword(void)
{
    30c8:	df 93       	push	r29
    30ca:	cf 93       	push	r28
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	ac 97       	sbiw	r28, 0x2c	; 44
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	uint8 getStatus = INCORRECT;
    30dc:	82 e0       	ldi	r24, 0x02	; 2
    30de:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_clearScreen();
    30e0:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <LCD_clearScreen>
	LCD_displayString("plz enter pass: ");
    30e4:	80 ea       	ldi	r24, 0xA0	; 160
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LCD_displayString>
	LCD_moveCursor(1,0);
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	60 e0       	ldi	r22, 0x00	; 0
    30f0:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_moveCursor>
    30f4:	96 c1       	rjmp	.+812    	; 0x3422 <askForPassword+0x35a>

	while(getStatus != CORRECT)
	{
		for(i = 0; i<PASS_LENGTH;i++)
    30f6:	1c a6       	std	Y+44, r1	; 0x2c
    30f8:	03 c1       	rjmp	.+518    	; 0x3300 <askForPassword+0x238>
		{
			key = KEYPAD_getPressedKey();
    30fa:	0e 94 ab 0b 	call	0x1756	; 0x1756 <KEYPAD_getPressedKey>
    30fe:	80 93 25 01 	sts	0x0125, r24
			if(key>=0 && key <=9)
    3102:	80 91 25 01 	lds	r24, 0x0125
    3106:	8a 30       	cpi	r24, 0x0A	; 10
    3108:	28 f4       	brcc	.+10     	; 0x3114 <askForPassword+0x4c>
			{
				LCD_integerToString(key);
    310a:	80 91 25 01 	lds	r24, 0x0125
    310e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_integerToString>
    3112:	04 c0       	rjmp	.+8      	; 0x311c <askForPassword+0x54>
			}
			else{
				LCD_displayCharacter(key);
    3114:	80 91 25 01 	lds	r24, 0x0125
    3118:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_displayCharacter>
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	a8 e4       	ldi	r26, 0x48	; 72
    3122:	b3 e4       	ldi	r27, 0x43	; 67
    3124:	8f a3       	std	Y+39, r24	; 0x27
    3126:	98 a7       	std	Y+40, r25	; 0x28
    3128:	a9 a7       	std	Y+41, r26	; 0x29
    312a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312c:	6f a1       	ldd	r22, Y+39	; 0x27
    312e:	78 a5       	ldd	r23, Y+40	; 0x28
    3130:	89 a5       	ldd	r24, Y+41	; 0x29
    3132:	9a a5       	ldd	r25, Y+42	; 0x2a
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	4a ef       	ldi	r20, 0xFA	; 250
    313a:	54 e4       	ldi	r21, 0x44	; 68
    313c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	8b a3       	std	Y+35, r24	; 0x23
    3146:	9c a3       	std	Y+36, r25	; 0x24
    3148:	ad a3       	std	Y+37, r26	; 0x25
    314a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    314c:	6b a1       	ldd	r22, Y+35	; 0x23
    314e:	7c a1       	ldd	r23, Y+36	; 0x24
    3150:	8d a1       	ldd	r24, Y+37	; 0x25
    3152:	9e a1       	ldd	r25, Y+38	; 0x26
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	40 e8       	ldi	r20, 0x80	; 128
    315a:	5f e3       	ldi	r21, 0x3F	; 63
    315c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3160:	88 23       	and	r24, r24
    3162:	2c f4       	brge	.+10     	; 0x316e <askForPassword+0xa6>
		__ticks = 1;
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	9a a3       	std	Y+34, r25	; 0x22
    316a:	89 a3       	std	Y+33, r24	; 0x21
    316c:	3f c0       	rjmp	.+126    	; 0x31ec <askForPassword+0x124>
	else if (__tmp > 65535)
    316e:	6b a1       	ldd	r22, Y+35	; 0x23
    3170:	7c a1       	ldd	r23, Y+36	; 0x24
    3172:	8d a1       	ldd	r24, Y+37	; 0x25
    3174:	9e a1       	ldd	r25, Y+38	; 0x26
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	3f ef       	ldi	r19, 0xFF	; 255
    317a:	4f e7       	ldi	r20, 0x7F	; 127
    317c:	57 e4       	ldi	r21, 0x47	; 71
    317e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3182:	18 16       	cp	r1, r24
    3184:	4c f5       	brge	.+82     	; 0x31d8 <askForPassword+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3186:	6f a1       	ldd	r22, Y+39	; 0x27
    3188:	78 a5       	ldd	r23, Y+40	; 0x28
    318a:	89 a5       	ldd	r24, Y+41	; 0x29
    318c:	9a a5       	ldd	r25, Y+42	; 0x2a
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e2       	ldi	r20, 0x20	; 32
    3194:	51 e4       	ldi	r21, 0x41	; 65
    3196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	bc 01       	movw	r22, r24
    31a0:	cd 01       	movw	r24, r26
    31a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	9a a3       	std	Y+34, r25	; 0x22
    31ac:	89 a3       	std	Y+33, r24	; 0x21
    31ae:	0f c0       	rjmp	.+30     	; 0x31ce <askForPassword+0x106>
    31b0:	88 ec       	ldi	r24, 0xC8	; 200
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	98 a3       	std	Y+32, r25	; 0x20
    31b6:	8f 8f       	std	Y+31, r24	; 0x1f
    31b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31ba:	98 a1       	ldd	r25, Y+32	; 0x20
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	f1 f7       	brne	.-4      	; 0x31bc <askForPassword+0xf4>
    31c0:	98 a3       	std	Y+32, r25	; 0x20
    31c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c4:	89 a1       	ldd	r24, Y+33	; 0x21
    31c6:	9a a1       	ldd	r25, Y+34	; 0x22
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	9a a3       	std	Y+34, r25	; 0x22
    31cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ce:	89 a1       	ldd	r24, Y+33	; 0x21
    31d0:	9a a1       	ldd	r25, Y+34	; 0x22
    31d2:	00 97       	sbiw	r24, 0x00	; 0
    31d4:	69 f7       	brne	.-38     	; 0x31b0 <askForPassword+0xe8>
    31d6:	14 c0       	rjmp	.+40     	; 0x3200 <askForPassword+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d8:	6b a1       	ldd	r22, Y+35	; 0x23
    31da:	7c a1       	ldd	r23, Y+36	; 0x24
    31dc:	8d a1       	ldd	r24, Y+37	; 0x25
    31de:	9e a1       	ldd	r25, Y+38	; 0x26
    31e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	9a a3       	std	Y+34, r25	; 0x22
    31ea:	89 a3       	std	Y+33, r24	; 0x21
    31ec:	89 a1       	ldd	r24, Y+33	; 0x21
    31ee:	9a a1       	ldd	r25, Y+34	; 0x22
    31f0:	9e 8f       	std	Y+30, r25	; 0x1e
    31f2:	8d 8f       	std	Y+29, r24	; 0x1d
    31f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <askForPassword+0x130>
    31fc:	9e 8f       	std	Y+30, r25	; 0x1e
    31fe:	8d 8f       	std	Y+29, r24	; 0x1d
			}
			_delay_ms(200);
			LCD_moveCursor(1,i);
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	6c a5       	ldd	r22, Y+44	; 0x2c
    3204:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_moveCursor>
			UART_sendByte(key);
    3208:	80 91 25 01 	lds	r24, 0x0125
    320c:	0e 94 19 0b 	call	0x1632	; 0x1632 <UART_sendByte>
			LCD_displayCharacter('*');
    3210:	8a e2       	ldi	r24, 0x2A	; 42
    3212:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_displayCharacter>
    3216:	80 e0       	ldi	r24, 0x00	; 0
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	aa ef       	ldi	r26, 0xFA	; 250
    321c:	b3 e4       	ldi	r27, 0x43	; 67
    321e:	89 8f       	std	Y+25, r24	; 0x19
    3220:	9a 8f       	std	Y+26, r25	; 0x1a
    3222:	ab 8f       	std	Y+27, r26	; 0x1b
    3224:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3226:	69 8d       	ldd	r22, Y+25	; 0x19
    3228:	7a 8d       	ldd	r23, Y+26	; 0x1a
    322a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    322c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	4a ef       	ldi	r20, 0xFA	; 250
    3234:	54 e4       	ldi	r21, 0x44	; 68
    3236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	8d 8b       	std	Y+21, r24	; 0x15
    3240:	9e 8b       	std	Y+22, r25	; 0x16
    3242:	af 8b       	std	Y+23, r26	; 0x17
    3244:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3246:	6d 89       	ldd	r22, Y+21	; 0x15
    3248:	7e 89       	ldd	r23, Y+22	; 0x16
    324a:	8f 89       	ldd	r24, Y+23	; 0x17
    324c:	98 8d       	ldd	r25, Y+24	; 0x18
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	40 e8       	ldi	r20, 0x80	; 128
    3254:	5f e3       	ldi	r21, 0x3F	; 63
    3256:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    325a:	88 23       	and	r24, r24
    325c:	2c f4       	brge	.+10     	; 0x3268 <askForPassword+0x1a0>
		__ticks = 1;
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	9c 8b       	std	Y+20, r25	; 0x14
    3264:	8b 8b       	std	Y+19, r24	; 0x13
    3266:	3f c0       	rjmp	.+126    	; 0x32e6 <askForPassword+0x21e>
	else if (__tmp > 65535)
    3268:	6d 89       	ldd	r22, Y+21	; 0x15
    326a:	7e 89       	ldd	r23, Y+22	; 0x16
    326c:	8f 89       	ldd	r24, Y+23	; 0x17
    326e:	98 8d       	ldd	r25, Y+24	; 0x18
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	3f ef       	ldi	r19, 0xFF	; 255
    3274:	4f e7       	ldi	r20, 0x7F	; 127
    3276:	57 e4       	ldi	r21, 0x47	; 71
    3278:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    327c:	18 16       	cp	r1, r24
    327e:	4c f5       	brge	.+82     	; 0x32d2 <askForPassword+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3280:	69 8d       	ldd	r22, Y+25	; 0x19
    3282:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3284:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3286:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	40 e2       	ldi	r20, 0x20	; 32
    328e:	51 e4       	ldi	r21, 0x41	; 65
    3290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	bc 01       	movw	r22, r24
    329a:	cd 01       	movw	r24, r26
    329c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	9c 8b       	std	Y+20, r25	; 0x14
    32a6:	8b 8b       	std	Y+19, r24	; 0x13
    32a8:	0f c0       	rjmp	.+30     	; 0x32c8 <askForPassword+0x200>
    32aa:	88 ec       	ldi	r24, 0xC8	; 200
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	9a 8b       	std	Y+18, r25	; 0x12
    32b0:	89 8b       	std	Y+17, r24	; 0x11
    32b2:	89 89       	ldd	r24, Y+17	; 0x11
    32b4:	9a 89       	ldd	r25, Y+18	; 0x12
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	f1 f7       	brne	.-4      	; 0x32b6 <askForPassword+0x1ee>
    32ba:	9a 8b       	std	Y+18, r25	; 0x12
    32bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32be:	8b 89       	ldd	r24, Y+19	; 0x13
    32c0:	9c 89       	ldd	r25, Y+20	; 0x14
    32c2:	01 97       	sbiw	r24, 0x01	; 1
    32c4:	9c 8b       	std	Y+20, r25	; 0x14
    32c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c8:	8b 89       	ldd	r24, Y+19	; 0x13
    32ca:	9c 89       	ldd	r25, Y+20	; 0x14
    32cc:	00 97       	sbiw	r24, 0x00	; 0
    32ce:	69 f7       	brne	.-38     	; 0x32aa <askForPassword+0x1e2>
    32d0:	14 c0       	rjmp	.+40     	; 0x32fa <askForPassword+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d2:	6d 89       	ldd	r22, Y+21	; 0x15
    32d4:	7e 89       	ldd	r23, Y+22	; 0x16
    32d6:	8f 89       	ldd	r24, Y+23	; 0x17
    32d8:	98 8d       	ldd	r25, Y+24	; 0x18
    32da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	9c 8b       	std	Y+20, r25	; 0x14
    32e4:	8b 8b       	std	Y+19, r24	; 0x13
    32e6:	8b 89       	ldd	r24, Y+19	; 0x13
    32e8:	9c 89       	ldd	r25, Y+20	; 0x14
    32ea:	98 8b       	std	Y+16, r25	; 0x10
    32ec:	8f 87       	std	Y+15, r24	; 0x0f
    32ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    32f0:	98 89       	ldd	r25, Y+16	; 0x10
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	f1 f7       	brne	.-4      	; 0x32f2 <askForPassword+0x22a>
    32f6:	98 8b       	std	Y+16, r25	; 0x10
    32f8:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_displayString("plz enter pass: ");
	LCD_moveCursor(1,0);

	while(getStatus != CORRECT)
	{
		for(i = 0; i<PASS_LENGTH;i++)
    32fa:	8c a5       	ldd	r24, Y+44	; 0x2c
    32fc:	8f 5f       	subi	r24, 0xFF	; 255
    32fe:	8c a7       	std	Y+44, r24	; 0x2c
    3300:	8c a5       	ldd	r24, Y+44	; 0x2c
    3302:	85 30       	cpi	r24, 0x05	; 5
    3304:	08 f4       	brcc	.+2      	; 0x3308 <askForPassword+0x240>
    3306:	f9 ce       	rjmp	.-526    	; 0x30fa <askForPassword+0x32>
			LCD_moveCursor(1,i);
			UART_sendByte(key);
			LCD_displayCharacter('*');
			_delay_ms(500);
		}
		key = KEYPAD_getPressedKey();
    3308:	0e 94 ab 0b 	call	0x1756	; 0x1756 <KEYPAD_getPressedKey>
    330c:	80 93 25 01 	sts	0x0125, r24
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	aa ef       	ldi	r26, 0xFA	; 250
    3316:	b3 e4       	ldi	r27, 0x43	; 67
    3318:	8b 87       	std	Y+11, r24	; 0x0b
    331a:	9c 87       	std	Y+12, r25	; 0x0c
    331c:	ad 87       	std	Y+13, r26	; 0x0d
    331e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3320:	6b 85       	ldd	r22, Y+11	; 0x0b
    3322:	7c 85       	ldd	r23, Y+12	; 0x0c
    3324:	8d 85       	ldd	r24, Y+13	; 0x0d
    3326:	9e 85       	ldd	r25, Y+14	; 0x0e
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	4a ef       	ldi	r20, 0xFA	; 250
    332e:	54 e4       	ldi	r21, 0x44	; 68
    3330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	8f 83       	std	Y+7, r24	; 0x07
    333a:	98 87       	std	Y+8, r25	; 0x08
    333c:	a9 87       	std	Y+9, r26	; 0x09
    333e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3340:	6f 81       	ldd	r22, Y+7	; 0x07
    3342:	78 85       	ldd	r23, Y+8	; 0x08
    3344:	89 85       	ldd	r24, Y+9	; 0x09
    3346:	9a 85       	ldd	r25, Y+10	; 0x0a
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	40 e8       	ldi	r20, 0x80	; 128
    334e:	5f e3       	ldi	r21, 0x3F	; 63
    3350:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3354:	88 23       	and	r24, r24
    3356:	2c f4       	brge	.+10     	; 0x3362 <askForPassword+0x29a>
		__ticks = 1;
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	9e 83       	std	Y+6, r25	; 0x06
    335e:	8d 83       	std	Y+5, r24	; 0x05
    3360:	3f c0       	rjmp	.+126    	; 0x33e0 <askForPassword+0x318>
	else if (__tmp > 65535)
    3362:	6f 81       	ldd	r22, Y+7	; 0x07
    3364:	78 85       	ldd	r23, Y+8	; 0x08
    3366:	89 85       	ldd	r24, Y+9	; 0x09
    3368:	9a 85       	ldd	r25, Y+10	; 0x0a
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	3f ef       	ldi	r19, 0xFF	; 255
    336e:	4f e7       	ldi	r20, 0x7F	; 127
    3370:	57 e4       	ldi	r21, 0x47	; 71
    3372:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3376:	18 16       	cp	r1, r24
    3378:	4c f5       	brge	.+82     	; 0x33cc <askForPassword+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    337a:	6b 85       	ldd	r22, Y+11	; 0x0b
    337c:	7c 85       	ldd	r23, Y+12	; 0x0c
    337e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3380:	9e 85       	ldd	r25, Y+14	; 0x0e
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	40 e2       	ldi	r20, 0x20	; 32
    3388:	51 e4       	ldi	r21, 0x41	; 65
    338a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	bc 01       	movw	r22, r24
    3394:	cd 01       	movw	r24, r26
    3396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	9e 83       	std	Y+6, r25	; 0x06
    33a0:	8d 83       	std	Y+5, r24	; 0x05
    33a2:	0f c0       	rjmp	.+30     	; 0x33c2 <askForPassword+0x2fa>
    33a4:	88 ec       	ldi	r24, 0xC8	; 200
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	9c 83       	std	Y+4, r25	; 0x04
    33aa:	8b 83       	std	Y+3, r24	; 0x03
    33ac:	8b 81       	ldd	r24, Y+3	; 0x03
    33ae:	9c 81       	ldd	r25, Y+4	; 0x04
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	f1 f7       	brne	.-4      	; 0x33b0 <askForPassword+0x2e8>
    33b4:	9c 83       	std	Y+4, r25	; 0x04
    33b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ba:	9e 81       	ldd	r25, Y+6	; 0x06
    33bc:	01 97       	sbiw	r24, 0x01	; 1
    33be:	9e 83       	std	Y+6, r25	; 0x06
    33c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c2:	8d 81       	ldd	r24, Y+5	; 0x05
    33c4:	9e 81       	ldd	r25, Y+6	; 0x06
    33c6:	00 97       	sbiw	r24, 0x00	; 0
    33c8:	69 f7       	brne	.-38     	; 0x33a4 <askForPassword+0x2dc>
    33ca:	14 c0       	rjmp	.+40     	; 0x33f4 <askForPassword+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33cc:	6f 81       	ldd	r22, Y+7	; 0x07
    33ce:	78 85       	ldd	r23, Y+8	; 0x08
    33d0:	89 85       	ldd	r24, Y+9	; 0x09
    33d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d8:	dc 01       	movw	r26, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	9e 83       	std	Y+6, r25	; 0x06
    33de:	8d 83       	std	Y+5, r24	; 0x05
    33e0:	8d 81       	ldd	r24, Y+5	; 0x05
    33e2:	9e 81       	ldd	r25, Y+6	; 0x06
    33e4:	9a 83       	std	Y+2, r25	; 0x02
    33e6:	89 83       	std	Y+1, r24	; 0x01
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	9a 81       	ldd	r25, Y+2	; 0x02
    33ec:	01 97       	sbiw	r24, 0x01	; 1
    33ee:	f1 f7       	brne	.-4      	; 0x33ec <askForPassword+0x324>
    33f0:	9a 83       	std	Y+2, r25	; 0x02
    33f2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);

		if(key == '=')
    33f4:	80 91 25 01 	lds	r24, 0x0125
    33f8:	8d 33       	cpi	r24, 0x3D	; 61
    33fa:	99 f4       	brne	.+38     	; 0x3422 <askForPassword+0x35a>
		{
			getStatus = UART_receiveByte();
    33fc:	0e 94 30 0b 	call	0x1660	; 0x1660 <UART_receiveByte>
    3400:	8b a7       	std	Y+43, r24	; 0x2b

			if(getStatus == INCORRECT)
    3402:	8b a5       	ldd	r24, Y+43	; 0x2b
    3404:	82 30       	cpi	r24, 0x02	; 2
    3406:	21 f4       	brne	.+8      	; 0x3410 <askForPassword+0x348>
			{
				UART_sendByte('i');
    3408:	89 e6       	ldi	r24, 0x69	; 105
    340a:	0e 94 19 0b 	call	0x1632	; 0x1632 <UART_sendByte>
    340e:	09 c0       	rjmp	.+18     	; 0x3422 <askForPassword+0x35a>
			}
			else
			{
				UART_sendByte('c');
    3410:	83 e6       	ldi	r24, 0x63	; 99
    3412:	0e 94 19 0b 	call	0x1632	; 0x1632 <UART_sendByte>
				LCD_clearScreen();
    3416:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <LCD_clearScreen>
				LCD_displayString("YOU LOGGED IN CORRECT PASSWORD !!!");
    341a:	81 eb       	ldi	r24, 0xB1	; 177
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LCD_displayString>
	uint8 getStatus = INCORRECT;
	LCD_clearScreen();
	LCD_displayString("plz enter pass: ");
	LCD_moveCursor(1,0);

	while(getStatus != CORRECT)
    3422:	8b a5       	ldd	r24, Y+43	; 0x2b
    3424:	81 30       	cpi	r24, 0x01	; 1
    3426:	09 f0       	breq	.+2      	; 0x342a <askForPassword+0x362>
    3428:	66 ce       	rjmp	.-820    	; 0x30f6 <askForPassword+0x2e>





}
    342a:	ac 96       	adiw	r28, 0x2c	; 44
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	08 95       	ret

0000343c <createPassword>:

uint8 createPassword(void)
{
    343c:	0f 93       	push	r16
    343e:	1f 93       	push	r17
    3440:	df 93       	push	r29
    3442:	cf 93       	push	r28
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
    3448:	c3 57       	subi	r28, 0x73	; 115
    344a:	d0 40       	sbci	r29, 0x00	; 0
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	f8 94       	cli
    3450:	de bf       	out	0x3e, r29	; 62
    3452:	0f be       	out	0x3f, r0	; 63
    3454:	cd bf       	out	0x3d, r28	; 61
	uint8 check;
	uint8 i = 0;
    3456:	fe 01       	movw	r30, r28
    3458:	ef 58       	subi	r30, 0x8F	; 143
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	10 82       	st	Z, r1
	LCD_clearScreen();
    345e:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <LCD_clearScreen>
	LCD_displayString("plz enter pass: ");
    3462:	80 ea       	ldi	r24, 0xA0	; 160
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LCD_displayString>
	LCD_moveCursor(1,0);
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	60 e0       	ldi	r22, 0x00	; 0
    346e:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_moveCursor>


	for(i = 0; i<PASS_LENGTH;i++)
    3472:	fe 01       	movw	r30, r28
    3474:	ef 58       	subi	r30, 0x8F	; 143
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	10 82       	st	Z, r1
    347a:	9a c1       	rjmp	.+820    	; 0x37b0 <createPassword+0x374>
	{
		key = KEYPAD_getPressedKey();
    347c:	0e 94 ab 0b 	call	0x1756	; 0x1756 <KEYPAD_getPressedKey>
    3480:	80 93 25 01 	sts	0x0125, r24
		if(key>=0 && key <=9)
    3484:	80 91 25 01 	lds	r24, 0x0125
    3488:	8a 30       	cpi	r24, 0x0A	; 10
    348a:	28 f4       	brcc	.+10     	; 0x3496 <createPassword+0x5a>
		{
			LCD_integerToString(key);
    348c:	80 91 25 01 	lds	r24, 0x0125
    3490:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_integerToString>
    3494:	04 c0       	rjmp	.+8      	; 0x349e <createPassword+0x62>
		}
		else{
			LCD_displayCharacter(key);
    3496:	80 91 25 01 	lds	r24, 0x0125
    349a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_displayCharacter>
		}
		g_pass[i] = key;
    349e:	fe 01       	movw	r30, r28
    34a0:	ef 58       	subi	r30, 0x8F	; 143
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	80 81       	ld	r24, Z
    34a6:	88 2f       	mov	r24, r24
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	20 91 25 01 	lds	r18, 0x0125
    34ae:	fc 01       	movw	r30, r24
    34b0:	e1 5e       	subi	r30, 0xE1	; 225
    34b2:	fe 4f       	sbci	r31, 0xFE	; 254
    34b4:	20 83       	st	Z, r18
    34b6:	fe 01       	movw	r30, r28
    34b8:	e3 59       	subi	r30, 0x93	; 147
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	a8 e4       	ldi	r26, 0x48	; 72
    34c2:	b3 e4       	ldi	r27, 0x43	; 67
    34c4:	80 83       	st	Z, r24
    34c6:	91 83       	std	Z+1, r25	; 0x01
    34c8:	a2 83       	std	Z+2, r26	; 0x02
    34ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34cc:	8e 01       	movw	r16, r28
    34ce:	07 59       	subi	r16, 0x97	; 151
    34d0:	1f 4f       	sbci	r17, 0xFF	; 255
    34d2:	fe 01       	movw	r30, r28
    34d4:	e3 59       	subi	r30, 0x93	; 147
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	60 81       	ld	r22, Z
    34da:	71 81       	ldd	r23, Z+1	; 0x01
    34dc:	82 81       	ldd	r24, Z+2	; 0x02
    34de:	93 81       	ldd	r25, Z+3	; 0x03
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	4a ef       	ldi	r20, 0xFA	; 250
    34e6:	54 e4       	ldi	r21, 0x44	; 68
    34e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	f8 01       	movw	r30, r16
    34f2:	80 83       	st	Z, r24
    34f4:	91 83       	std	Z+1, r25	; 0x01
    34f6:	a2 83       	std	Z+2, r26	; 0x02
    34f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34fa:	fe 01       	movw	r30, r28
    34fc:	e7 59       	subi	r30, 0x97	; 151
    34fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3500:	60 81       	ld	r22, Z
    3502:	71 81       	ldd	r23, Z+1	; 0x01
    3504:	82 81       	ldd	r24, Z+2	; 0x02
    3506:	93 81       	ldd	r25, Z+3	; 0x03
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	40 e8       	ldi	r20, 0x80	; 128
    350e:	5f e3       	ldi	r21, 0x3F	; 63
    3510:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3514:	88 23       	and	r24, r24
    3516:	44 f4       	brge	.+16     	; 0x3528 <createPassword+0xec>
		__ticks = 1;
    3518:	fe 01       	movw	r30, r28
    351a:	e9 59       	subi	r30, 0x99	; 153
    351c:	ff 4f       	sbci	r31, 0xFF	; 255
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	91 83       	std	Z+1, r25	; 0x01
    3524:	80 83       	st	Z, r24
    3526:	64 c0       	rjmp	.+200    	; 0x35f0 <createPassword+0x1b4>
	else if (__tmp > 65535)
    3528:	fe 01       	movw	r30, r28
    352a:	e7 59       	subi	r30, 0x97	; 151
    352c:	ff 4f       	sbci	r31, 0xFF	; 255
    352e:	60 81       	ld	r22, Z
    3530:	71 81       	ldd	r23, Z+1	; 0x01
    3532:	82 81       	ldd	r24, Z+2	; 0x02
    3534:	93 81       	ldd	r25, Z+3	; 0x03
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	3f ef       	ldi	r19, 0xFF	; 255
    353a:	4f e7       	ldi	r20, 0x7F	; 127
    353c:	57 e4       	ldi	r21, 0x47	; 71
    353e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3542:	18 16       	cp	r1, r24
    3544:	0c f0       	brlt	.+2      	; 0x3548 <createPassword+0x10c>
    3546:	43 c0       	rjmp	.+134    	; 0x35ce <createPassword+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3548:	fe 01       	movw	r30, r28
    354a:	e3 59       	subi	r30, 0x93	; 147
    354c:	ff 4f       	sbci	r31, 0xFF	; 255
    354e:	60 81       	ld	r22, Z
    3550:	71 81       	ldd	r23, Z+1	; 0x01
    3552:	82 81       	ldd	r24, Z+2	; 0x02
    3554:	93 81       	ldd	r25, Z+3	; 0x03
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	40 e2       	ldi	r20, 0x20	; 32
    355c:	51 e4       	ldi	r21, 0x41	; 65
    355e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	8e 01       	movw	r16, r28
    3568:	09 59       	subi	r16, 0x99	; 153
    356a:	1f 4f       	sbci	r17, 0xFF	; 255
    356c:	bc 01       	movw	r22, r24
    356e:	cd 01       	movw	r24, r26
    3570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	f8 01       	movw	r30, r16
    357a:	91 83       	std	Z+1, r25	; 0x01
    357c:	80 83       	st	Z, r24
    357e:	1f c0       	rjmp	.+62     	; 0x35be <createPassword+0x182>
    3580:	fe 01       	movw	r30, r28
    3582:	eb 59       	subi	r30, 0x9B	; 155
    3584:	ff 4f       	sbci	r31, 0xFF	; 255
    3586:	88 ec       	ldi	r24, 0xC8	; 200
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	91 83       	std	Z+1, r25	; 0x01
    358c:	80 83       	st	Z, r24
    358e:	fe 01       	movw	r30, r28
    3590:	eb 59       	subi	r30, 0x9B	; 155
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	80 81       	ld	r24, Z
    3596:	91 81       	ldd	r25, Z+1	; 0x01
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	f1 f7       	brne	.-4      	; 0x3598 <createPassword+0x15c>
    359c:	fe 01       	movw	r30, r28
    359e:	eb 59       	subi	r30, 0x9B	; 155
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	91 83       	std	Z+1, r25	; 0x01
    35a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a6:	de 01       	movw	r26, r28
    35a8:	a9 59       	subi	r26, 0x99	; 153
    35aa:	bf 4f       	sbci	r27, 0xFF	; 255
    35ac:	fe 01       	movw	r30, r28
    35ae:	e9 59       	subi	r30, 0x99	; 153
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	80 81       	ld	r24, Z
    35b4:	91 81       	ldd	r25, Z+1	; 0x01
    35b6:	01 97       	sbiw	r24, 0x01	; 1
    35b8:	11 96       	adiw	r26, 0x01	; 1
    35ba:	9c 93       	st	X, r25
    35bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35be:	fe 01       	movw	r30, r28
    35c0:	e9 59       	subi	r30, 0x99	; 153
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	80 81       	ld	r24, Z
    35c6:	91 81       	ldd	r25, Z+1	; 0x01
    35c8:	00 97       	sbiw	r24, 0x00	; 0
    35ca:	d1 f6       	brne	.-76     	; 0x3580 <createPassword+0x144>
    35cc:	27 c0       	rjmp	.+78     	; 0x361c <createPassword+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ce:	8e 01       	movw	r16, r28
    35d0:	09 59       	subi	r16, 0x99	; 153
    35d2:	1f 4f       	sbci	r17, 0xFF	; 255
    35d4:	fe 01       	movw	r30, r28
    35d6:	e7 59       	subi	r30, 0x97	; 151
    35d8:	ff 4f       	sbci	r31, 0xFF	; 255
    35da:	60 81       	ld	r22, Z
    35dc:	71 81       	ldd	r23, Z+1	; 0x01
    35de:	82 81       	ldd	r24, Z+2	; 0x02
    35e0:	93 81       	ldd	r25, Z+3	; 0x03
    35e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	f8 01       	movw	r30, r16
    35ec:	91 83       	std	Z+1, r25	; 0x01
    35ee:	80 83       	st	Z, r24
    35f0:	de 01       	movw	r26, r28
    35f2:	ad 59       	subi	r26, 0x9D	; 157
    35f4:	bf 4f       	sbci	r27, 0xFF	; 255
    35f6:	fe 01       	movw	r30, r28
    35f8:	e9 59       	subi	r30, 0x99	; 153
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	80 81       	ld	r24, Z
    35fe:	91 81       	ldd	r25, Z+1	; 0x01
    3600:	8d 93       	st	X+, r24
    3602:	9c 93       	st	X, r25
    3604:	fe 01       	movw	r30, r28
    3606:	ed 59       	subi	r30, 0x9D	; 157
    3608:	ff 4f       	sbci	r31, 0xFF	; 255
    360a:	80 81       	ld	r24, Z
    360c:	91 81       	ldd	r25, Z+1	; 0x01
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	f1 f7       	brne	.-4      	; 0x360e <createPassword+0x1d2>
    3612:	fe 01       	movw	r30, r28
    3614:	ed 59       	subi	r30, 0x9D	; 157
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	91 83       	std	Z+1, r25	; 0x01
    361a:	80 83       	st	Z, r24
		_delay_ms(200);
		LCD_moveCursor(1,i);
    361c:	fe 01       	movw	r30, r28
    361e:	ef 58       	subi	r30, 0x8F	; 143
    3620:	ff 4f       	sbci	r31, 0xFF	; 255
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	60 81       	ld	r22, Z
    3626:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_moveCursor>
		UART_sendByte(key);
    362a:	80 91 25 01 	lds	r24, 0x0125
    362e:	0e 94 19 0b 	call	0x1632	; 0x1632 <UART_sendByte>
		LCD_displayCharacter('*');
    3632:	8a e2       	ldi	r24, 0x2A	; 42
    3634:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_displayCharacter>
    3638:	fe 01       	movw	r30, r28
    363a:	e1 5a       	subi	r30, 0xA1	; 161
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	aa ef       	ldi	r26, 0xFA	; 250
    3644:	b3 e4       	ldi	r27, 0x43	; 67
    3646:	80 83       	st	Z, r24
    3648:	91 83       	std	Z+1, r25	; 0x01
    364a:	a2 83       	std	Z+2, r26	; 0x02
    364c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    364e:	8e 01       	movw	r16, r28
    3650:	05 5a       	subi	r16, 0xA5	; 165
    3652:	1f 4f       	sbci	r17, 0xFF	; 255
    3654:	fe 01       	movw	r30, r28
    3656:	e1 5a       	subi	r30, 0xA1	; 161
    3658:	ff 4f       	sbci	r31, 0xFF	; 255
    365a:	60 81       	ld	r22, Z
    365c:	71 81       	ldd	r23, Z+1	; 0x01
    365e:	82 81       	ldd	r24, Z+2	; 0x02
    3660:	93 81       	ldd	r25, Z+3	; 0x03
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	4a ef       	ldi	r20, 0xFA	; 250
    3668:	54 e4       	ldi	r21, 0x44	; 68
    366a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	f8 01       	movw	r30, r16
    3674:	80 83       	st	Z, r24
    3676:	91 83       	std	Z+1, r25	; 0x01
    3678:	a2 83       	std	Z+2, r26	; 0x02
    367a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    367c:	fe 01       	movw	r30, r28
    367e:	e5 5a       	subi	r30, 0xA5	; 165
    3680:	ff 4f       	sbci	r31, 0xFF	; 255
    3682:	60 81       	ld	r22, Z
    3684:	71 81       	ldd	r23, Z+1	; 0x01
    3686:	82 81       	ldd	r24, Z+2	; 0x02
    3688:	93 81       	ldd	r25, Z+3	; 0x03
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	40 e8       	ldi	r20, 0x80	; 128
    3690:	5f e3       	ldi	r21, 0x3F	; 63
    3692:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3696:	88 23       	and	r24, r24
    3698:	44 f4       	brge	.+16     	; 0x36aa <createPassword+0x26e>
		__ticks = 1;
    369a:	fe 01       	movw	r30, r28
    369c:	e7 5a       	subi	r30, 0xA7	; 167
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	91 83       	std	Z+1, r25	; 0x01
    36a6:	80 83       	st	Z, r24
    36a8:	64 c0       	rjmp	.+200    	; 0x3772 <createPassword+0x336>
	else if (__tmp > 65535)
    36aa:	fe 01       	movw	r30, r28
    36ac:	e5 5a       	subi	r30, 0xA5	; 165
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	60 81       	ld	r22, Z
    36b2:	71 81       	ldd	r23, Z+1	; 0x01
    36b4:	82 81       	ldd	r24, Z+2	; 0x02
    36b6:	93 81       	ldd	r25, Z+3	; 0x03
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	3f ef       	ldi	r19, 0xFF	; 255
    36bc:	4f e7       	ldi	r20, 0x7F	; 127
    36be:	57 e4       	ldi	r21, 0x47	; 71
    36c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36c4:	18 16       	cp	r1, r24
    36c6:	0c f0       	brlt	.+2      	; 0x36ca <createPassword+0x28e>
    36c8:	43 c0       	rjmp	.+134    	; 0x3750 <createPassword+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ca:	fe 01       	movw	r30, r28
    36cc:	e1 5a       	subi	r30, 0xA1	; 161
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	60 81       	ld	r22, Z
    36d2:	71 81       	ldd	r23, Z+1	; 0x01
    36d4:	82 81       	ldd	r24, Z+2	; 0x02
    36d6:	93 81       	ldd	r25, Z+3	; 0x03
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	40 e2       	ldi	r20, 0x20	; 32
    36de:	51 e4       	ldi	r21, 0x41	; 65
    36e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	8e 01       	movw	r16, r28
    36ea:	07 5a       	subi	r16, 0xA7	; 167
    36ec:	1f 4f       	sbci	r17, 0xFF	; 255
    36ee:	bc 01       	movw	r22, r24
    36f0:	cd 01       	movw	r24, r26
    36f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f6:	dc 01       	movw	r26, r24
    36f8:	cb 01       	movw	r24, r22
    36fa:	f8 01       	movw	r30, r16
    36fc:	91 83       	std	Z+1, r25	; 0x01
    36fe:	80 83       	st	Z, r24
    3700:	1f c0       	rjmp	.+62     	; 0x3740 <createPassword+0x304>
    3702:	fe 01       	movw	r30, r28
    3704:	e9 5a       	subi	r30, 0xA9	; 169
    3706:	ff 4f       	sbci	r31, 0xFF	; 255
    3708:	88 ec       	ldi	r24, 0xC8	; 200
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	91 83       	std	Z+1, r25	; 0x01
    370e:	80 83       	st	Z, r24
    3710:	fe 01       	movw	r30, r28
    3712:	e9 5a       	subi	r30, 0xA9	; 169
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	80 81       	ld	r24, Z
    3718:	91 81       	ldd	r25, Z+1	; 0x01
    371a:	01 97       	sbiw	r24, 0x01	; 1
    371c:	f1 f7       	brne	.-4      	; 0x371a <createPassword+0x2de>
    371e:	fe 01       	movw	r30, r28
    3720:	e9 5a       	subi	r30, 0xA9	; 169
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	91 83       	std	Z+1, r25	; 0x01
    3726:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3728:	de 01       	movw	r26, r28
    372a:	a7 5a       	subi	r26, 0xA7	; 167
    372c:	bf 4f       	sbci	r27, 0xFF	; 255
    372e:	fe 01       	movw	r30, r28
    3730:	e7 5a       	subi	r30, 0xA7	; 167
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	80 81       	ld	r24, Z
    3736:	91 81       	ldd	r25, Z+1	; 0x01
    3738:	01 97       	sbiw	r24, 0x01	; 1
    373a:	11 96       	adiw	r26, 0x01	; 1
    373c:	9c 93       	st	X, r25
    373e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3740:	fe 01       	movw	r30, r28
    3742:	e7 5a       	subi	r30, 0xA7	; 167
    3744:	ff 4f       	sbci	r31, 0xFF	; 255
    3746:	80 81       	ld	r24, Z
    3748:	91 81       	ldd	r25, Z+1	; 0x01
    374a:	00 97       	sbiw	r24, 0x00	; 0
    374c:	d1 f6       	brne	.-76     	; 0x3702 <createPassword+0x2c6>
    374e:	27 c0       	rjmp	.+78     	; 0x379e <createPassword+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3750:	8e 01       	movw	r16, r28
    3752:	07 5a       	subi	r16, 0xA7	; 167
    3754:	1f 4f       	sbci	r17, 0xFF	; 255
    3756:	fe 01       	movw	r30, r28
    3758:	e5 5a       	subi	r30, 0xA5	; 165
    375a:	ff 4f       	sbci	r31, 0xFF	; 255
    375c:	60 81       	ld	r22, Z
    375e:	71 81       	ldd	r23, Z+1	; 0x01
    3760:	82 81       	ldd	r24, Z+2	; 0x02
    3762:	93 81       	ldd	r25, Z+3	; 0x03
    3764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	f8 01       	movw	r30, r16
    376e:	91 83       	std	Z+1, r25	; 0x01
    3770:	80 83       	st	Z, r24
    3772:	de 01       	movw	r26, r28
    3774:	ab 5a       	subi	r26, 0xAB	; 171
    3776:	bf 4f       	sbci	r27, 0xFF	; 255
    3778:	fe 01       	movw	r30, r28
    377a:	e7 5a       	subi	r30, 0xA7	; 167
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	80 81       	ld	r24, Z
    3780:	91 81       	ldd	r25, Z+1	; 0x01
    3782:	8d 93       	st	X+, r24
    3784:	9c 93       	st	X, r25
    3786:	fe 01       	movw	r30, r28
    3788:	eb 5a       	subi	r30, 0xAB	; 171
    378a:	ff 4f       	sbci	r31, 0xFF	; 255
    378c:	80 81       	ld	r24, Z
    378e:	91 81       	ldd	r25, Z+1	; 0x01
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	f1 f7       	brne	.-4      	; 0x3790 <createPassword+0x354>
    3794:	fe 01       	movw	r30, r28
    3796:	eb 5a       	subi	r30, 0xAB	; 171
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	91 83       	std	Z+1, r25	; 0x01
    379c:	80 83       	st	Z, r24
	LCD_clearScreen();
	LCD_displayString("plz enter pass: ");
	LCD_moveCursor(1,0);


	for(i = 0; i<PASS_LENGTH;i++)
    379e:	de 01       	movw	r26, r28
    37a0:	af 58       	subi	r26, 0x8F	; 143
    37a2:	bf 4f       	sbci	r27, 0xFF	; 255
    37a4:	fe 01       	movw	r30, r28
    37a6:	ef 58       	subi	r30, 0x8F	; 143
    37a8:	ff 4f       	sbci	r31, 0xFF	; 255
    37aa:	80 81       	ld	r24, Z
    37ac:	8f 5f       	subi	r24, 0xFF	; 255
    37ae:	8c 93       	st	X, r24
    37b0:	fe 01       	movw	r30, r28
    37b2:	ef 58       	subi	r30, 0x8F	; 143
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	80 81       	ld	r24, Z
    37b8:	85 30       	cpi	r24, 0x05	; 5
    37ba:	08 f4       	brcc	.+2      	; 0x37be <createPassword+0x382>
    37bc:	5f ce       	rjmp	.-834    	; 0x347c <createPassword+0x40>
		LCD_moveCursor(1,i);
		UART_sendByte(key);
		LCD_displayCharacter('*');
		_delay_ms(500);
	}
	key = KEYPAD_getPressedKey();
    37be:	0e 94 ab 0b 	call	0x1756	; 0x1756 <KEYPAD_getPressedKey>
    37c2:	80 93 25 01 	sts	0x0125, r24
    37c6:	fe 01       	movw	r30, r28
    37c8:	ef 5a       	subi	r30, 0xAF	; 175
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	aa ef       	ldi	r26, 0xFA	; 250
    37d2:	b3 e4       	ldi	r27, 0x43	; 67
    37d4:	80 83       	st	Z, r24
    37d6:	91 83       	std	Z+1, r25	; 0x01
    37d8:	a2 83       	std	Z+2, r26	; 0x02
    37da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37dc:	8e 01       	movw	r16, r28
    37de:	03 5b       	subi	r16, 0xB3	; 179
    37e0:	1f 4f       	sbci	r17, 0xFF	; 255
    37e2:	fe 01       	movw	r30, r28
    37e4:	ef 5a       	subi	r30, 0xAF	; 175
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	60 81       	ld	r22, Z
    37ea:	71 81       	ldd	r23, Z+1	; 0x01
    37ec:	82 81       	ldd	r24, Z+2	; 0x02
    37ee:	93 81       	ldd	r25, Z+3	; 0x03
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	4a ef       	ldi	r20, 0xFA	; 250
    37f6:	54 e4       	ldi	r21, 0x44	; 68
    37f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	f8 01       	movw	r30, r16
    3802:	80 83       	st	Z, r24
    3804:	91 83       	std	Z+1, r25	; 0x01
    3806:	a2 83       	std	Z+2, r26	; 0x02
    3808:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    380a:	fe 01       	movw	r30, r28
    380c:	e3 5b       	subi	r30, 0xB3	; 179
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	60 81       	ld	r22, Z
    3812:	71 81       	ldd	r23, Z+1	; 0x01
    3814:	82 81       	ldd	r24, Z+2	; 0x02
    3816:	93 81       	ldd	r25, Z+3	; 0x03
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	40 e8       	ldi	r20, 0x80	; 128
    381e:	5f e3       	ldi	r21, 0x3F	; 63
    3820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3824:	88 23       	and	r24, r24
    3826:	44 f4       	brge	.+16     	; 0x3838 <createPassword+0x3fc>
		__ticks = 1;
    3828:	fe 01       	movw	r30, r28
    382a:	e5 5b       	subi	r30, 0xB5	; 181
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	91 83       	std	Z+1, r25	; 0x01
    3834:	80 83       	st	Z, r24
    3836:	64 c0       	rjmp	.+200    	; 0x3900 <createPassword+0x4c4>
	else if (__tmp > 65535)
    3838:	fe 01       	movw	r30, r28
    383a:	e3 5b       	subi	r30, 0xB3	; 179
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	60 81       	ld	r22, Z
    3840:	71 81       	ldd	r23, Z+1	; 0x01
    3842:	82 81       	ldd	r24, Z+2	; 0x02
    3844:	93 81       	ldd	r25, Z+3	; 0x03
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	3f ef       	ldi	r19, 0xFF	; 255
    384a:	4f e7       	ldi	r20, 0x7F	; 127
    384c:	57 e4       	ldi	r21, 0x47	; 71
    384e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3852:	18 16       	cp	r1, r24
    3854:	0c f0       	brlt	.+2      	; 0x3858 <createPassword+0x41c>
    3856:	43 c0       	rjmp	.+134    	; 0x38de <createPassword+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3858:	fe 01       	movw	r30, r28
    385a:	ef 5a       	subi	r30, 0xAF	; 175
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	60 81       	ld	r22, Z
    3860:	71 81       	ldd	r23, Z+1	; 0x01
    3862:	82 81       	ldd	r24, Z+2	; 0x02
    3864:	93 81       	ldd	r25, Z+3	; 0x03
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	40 e2       	ldi	r20, 0x20	; 32
    386c:	51 e4       	ldi	r21, 0x41	; 65
    386e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	8e 01       	movw	r16, r28
    3878:	05 5b       	subi	r16, 0xB5	; 181
    387a:	1f 4f       	sbci	r17, 0xFF	; 255
    387c:	bc 01       	movw	r22, r24
    387e:	cd 01       	movw	r24, r26
    3880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	f8 01       	movw	r30, r16
    388a:	91 83       	std	Z+1, r25	; 0x01
    388c:	80 83       	st	Z, r24
    388e:	1f c0       	rjmp	.+62     	; 0x38ce <createPassword+0x492>
    3890:	fe 01       	movw	r30, r28
    3892:	e7 5b       	subi	r30, 0xB7	; 183
    3894:	ff 4f       	sbci	r31, 0xFF	; 255
    3896:	88 ec       	ldi	r24, 0xC8	; 200
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	91 83       	std	Z+1, r25	; 0x01
    389c:	80 83       	st	Z, r24
    389e:	fe 01       	movw	r30, r28
    38a0:	e7 5b       	subi	r30, 0xB7	; 183
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	80 81       	ld	r24, Z
    38a6:	91 81       	ldd	r25, Z+1	; 0x01
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	f1 f7       	brne	.-4      	; 0x38a8 <createPassword+0x46c>
    38ac:	fe 01       	movw	r30, r28
    38ae:	e7 5b       	subi	r30, 0xB7	; 183
    38b0:	ff 4f       	sbci	r31, 0xFF	; 255
    38b2:	91 83       	std	Z+1, r25	; 0x01
    38b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b6:	de 01       	movw	r26, r28
    38b8:	a5 5b       	subi	r26, 0xB5	; 181
    38ba:	bf 4f       	sbci	r27, 0xFF	; 255
    38bc:	fe 01       	movw	r30, r28
    38be:	e5 5b       	subi	r30, 0xB5	; 181
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	80 81       	ld	r24, Z
    38c4:	91 81       	ldd	r25, Z+1	; 0x01
    38c6:	01 97       	sbiw	r24, 0x01	; 1
    38c8:	11 96       	adiw	r26, 0x01	; 1
    38ca:	9c 93       	st	X, r25
    38cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ce:	fe 01       	movw	r30, r28
    38d0:	e5 5b       	subi	r30, 0xB5	; 181
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	80 81       	ld	r24, Z
    38d6:	91 81       	ldd	r25, Z+1	; 0x01
    38d8:	00 97       	sbiw	r24, 0x00	; 0
    38da:	d1 f6       	brne	.-76     	; 0x3890 <createPassword+0x454>
    38dc:	28 c0       	rjmp	.+80     	; 0x392e <createPassword+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38de:	8e 01       	movw	r16, r28
    38e0:	05 5b       	subi	r16, 0xB5	; 181
    38e2:	1f 4f       	sbci	r17, 0xFF	; 255
    38e4:	fe 01       	movw	r30, r28
    38e6:	e3 5b       	subi	r30, 0xB3	; 179
    38e8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ea:	60 81       	ld	r22, Z
    38ec:	71 81       	ldd	r23, Z+1	; 0x01
    38ee:	82 81       	ldd	r24, Z+2	; 0x02
    38f0:	93 81       	ldd	r25, Z+3	; 0x03
    38f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	f8 01       	movw	r30, r16
    38fc:	91 83       	std	Z+1, r25	; 0x01
    38fe:	80 83       	st	Z, r24
    3900:	de 01       	movw	r26, r28
    3902:	a9 5b       	subi	r26, 0xB9	; 185
    3904:	bf 4f       	sbci	r27, 0xFF	; 255
    3906:	fe 01       	movw	r30, r28
    3908:	e5 5b       	subi	r30, 0xB5	; 181
    390a:	ff 4f       	sbci	r31, 0xFF	; 255
    390c:	80 81       	ld	r24, Z
    390e:	91 81       	ldd	r25, Z+1	; 0x01
    3910:	11 96       	adiw	r26, 0x01	; 1
    3912:	9c 93       	st	X, r25
    3914:	8e 93       	st	-X, r24
    3916:	fe 01       	movw	r30, r28
    3918:	e9 5b       	subi	r30, 0xB9	; 185
    391a:	ff 4f       	sbci	r31, 0xFF	; 255
    391c:	80 81       	ld	r24, Z
    391e:	91 81       	ldd	r25, Z+1	; 0x01
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	f1 f7       	brne	.-4      	; 0x3920 <createPassword+0x4e4>
    3924:	fe 01       	movw	r30, r28
    3926:	e9 5b       	subi	r30, 0xB9	; 185
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	91 83       	std	Z+1, r25	; 0x01
    392c:	80 83       	st	Z, r24
	_delay_ms(500);

	if(key == '=')
    392e:	80 91 25 01 	lds	r24, 0x0125
    3932:	8d 33       	cpi	r24, 0x3D	; 61
    3934:	09 f0       	breq	.+2      	; 0x3938 <createPassword+0x4fc>
    3936:	bb c2       	rjmp	.+1398   	; 0x3eae <createPassword+0xa72>
	{
		LCD_clearScreen();
    3938:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <LCD_clearScreen>
		g_pass[PASS_LENGTH] = '#';
    393c:	83 e2       	ldi	r24, 0x23	; 35
    393e:	80 93 24 01 	sts	0x0124, r24
		LCD_displayString("plz re-enter the");
    3942:	84 ed       	ldi	r24, 0xD4	; 212
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LCD_displayString>
		LCD_moveCursor(1,0);
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	60 e0       	ldi	r22, 0x00	; 0
    394e:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_moveCursor>
		LCD_displayString("same pass: ");
    3952:	85 ee       	ldi	r24, 0xE5	; 229
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LCD_displayString>
		for(i = 0; i<PASS_LENGTH;i++)
    395a:	fe 01       	movw	r30, r28
    395c:	ef 58       	subi	r30, 0x8F	; 143
    395e:	ff 4f       	sbci	r31, 0xFF	; 255
    3960:	10 82       	st	Z, r1
    3962:	2e c1       	rjmp	.+604    	; 0x3bc0 <createPassword+0x784>
		{
			key = KEYPAD_getPressedKey();
    3964:	0e 94 ab 0b 	call	0x1756	; 0x1756 <KEYPAD_getPressedKey>
    3968:	80 93 25 01 	sts	0x0125, r24
			if(key>=0 && key <=9)
    396c:	80 91 25 01 	lds	r24, 0x0125
    3970:	8a 30       	cpi	r24, 0x0A	; 10
    3972:	28 f4       	brcc	.+10     	; 0x397e <createPassword+0x542>
			{
				LCD_integerToString(key);
    3974:	80 91 25 01 	lds	r24, 0x0125
    3978:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_integerToString>
    397c:	04 c0       	rjmp	.+8      	; 0x3986 <createPassword+0x54a>
			}
			else{
				LCD_displayCharacter(key);
    397e:	80 91 25 01 	lds	r24, 0x0125
    3982:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_displayCharacter>
			}
			g_confirmPass[i] = key;
    3986:	fe 01       	movw	r30, r28
    3988:	ef 58       	subi	r30, 0x8F	; 143
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	80 81       	ld	r24, Z
    398e:	88 2f       	mov	r24, r24
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	20 91 25 01 	lds	r18, 0x0125
    3996:	fc 01       	movw	r30, r24
    3998:	e6 5e       	subi	r30, 0xE6	; 230
    399a:	fe 4f       	sbci	r31, 0xFE	; 254
    399c:	20 83       	st	Z, r18
    399e:	fe 01       	movw	r30, r28
    39a0:	ed 5b       	subi	r30, 0xBD	; 189
    39a2:	ff 4f       	sbci	r31, 0xFF	; 255
    39a4:	80 e0       	ldi	r24, 0x00	; 0
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	a8 e4       	ldi	r26, 0x48	; 72
    39aa:	b3 e4       	ldi	r27, 0x43	; 67
    39ac:	80 83       	st	Z, r24
    39ae:	91 83       	std	Z+1, r25	; 0x01
    39b0:	a2 83       	std	Z+2, r26	; 0x02
    39b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39b4:	8e 01       	movw	r16, r28
    39b6:	01 5c       	subi	r16, 0xC1	; 193
    39b8:	1f 4f       	sbci	r17, 0xFF	; 255
    39ba:	fe 01       	movw	r30, r28
    39bc:	ed 5b       	subi	r30, 0xBD	; 189
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	60 81       	ld	r22, Z
    39c2:	71 81       	ldd	r23, Z+1	; 0x01
    39c4:	82 81       	ldd	r24, Z+2	; 0x02
    39c6:	93 81       	ldd	r25, Z+3	; 0x03
    39c8:	20 e0       	ldi	r18, 0x00	; 0
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	4a ef       	ldi	r20, 0xFA	; 250
    39ce:	54 e4       	ldi	r21, 0x44	; 68
    39d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d4:	dc 01       	movw	r26, r24
    39d6:	cb 01       	movw	r24, r22
    39d8:	f8 01       	movw	r30, r16
    39da:	80 83       	st	Z, r24
    39dc:	91 83       	std	Z+1, r25	; 0x01
    39de:	a2 83       	std	Z+2, r26	; 0x02
    39e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39e2:	fe 01       	movw	r30, r28
    39e4:	ff 96       	adiw	r30, 0x3f	; 63
    39e6:	60 81       	ld	r22, Z
    39e8:	71 81       	ldd	r23, Z+1	; 0x01
    39ea:	82 81       	ldd	r24, Z+2	; 0x02
    39ec:	93 81       	ldd	r25, Z+3	; 0x03
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	30 e0       	ldi	r19, 0x00	; 0
    39f2:	40 e8       	ldi	r20, 0x80	; 128
    39f4:	5f e3       	ldi	r21, 0x3F	; 63
    39f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39fa:	88 23       	and	r24, r24
    39fc:	2c f4       	brge	.+10     	; 0x3a08 <createPassword+0x5cc>
		__ticks = 1;
    39fe:	81 e0       	ldi	r24, 0x01	; 1
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	9e af       	std	Y+62, r25	; 0x3e
    3a04:	8d af       	std	Y+61, r24	; 0x3d
    3a06:	46 c0       	rjmp	.+140    	; 0x3a94 <createPassword+0x658>
	else if (__tmp > 65535)
    3a08:	fe 01       	movw	r30, r28
    3a0a:	ff 96       	adiw	r30, 0x3f	; 63
    3a0c:	60 81       	ld	r22, Z
    3a0e:	71 81       	ldd	r23, Z+1	; 0x01
    3a10:	82 81       	ldd	r24, Z+2	; 0x02
    3a12:	93 81       	ldd	r25, Z+3	; 0x03
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	3f ef       	ldi	r19, 0xFF	; 255
    3a18:	4f e7       	ldi	r20, 0x7F	; 127
    3a1a:	57 e4       	ldi	r21, 0x47	; 71
    3a1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a20:	18 16       	cp	r1, r24
    3a22:	64 f5       	brge	.+88     	; 0x3a7c <createPassword+0x640>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a24:	fe 01       	movw	r30, r28
    3a26:	ed 5b       	subi	r30, 0xBD	; 189
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	60 81       	ld	r22, Z
    3a2c:	71 81       	ldd	r23, Z+1	; 0x01
    3a2e:	82 81       	ldd	r24, Z+2	; 0x02
    3a30:	93 81       	ldd	r25, Z+3	; 0x03
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	40 e2       	ldi	r20, 0x20	; 32
    3a38:	51 e4       	ldi	r21, 0x41	; 65
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	bc 01       	movw	r22, r24
    3a44:	cd 01       	movw	r24, r26
    3a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	9e af       	std	Y+62, r25	; 0x3e
    3a50:	8d af       	std	Y+61, r24	; 0x3d
    3a52:	0f c0       	rjmp	.+30     	; 0x3a72 <createPassword+0x636>
    3a54:	88 ec       	ldi	r24, 0xC8	; 200
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	9c af       	std	Y+60, r25	; 0x3c
    3a5a:	8b af       	std	Y+59, r24	; 0x3b
    3a5c:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a5e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	f1 f7       	brne	.-4      	; 0x3a60 <createPassword+0x624>
    3a64:	9c af       	std	Y+60, r25	; 0x3c
    3a66:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a68:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	9e af       	std	Y+62, r25	; 0x3e
    3a70:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a72:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a74:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a76:	00 97       	sbiw	r24, 0x00	; 0
    3a78:	69 f7       	brne	.-38     	; 0x3a54 <createPassword+0x618>
    3a7a:	16 c0       	rjmp	.+44     	; 0x3aa8 <createPassword+0x66c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	ff 96       	adiw	r30, 0x3f	; 63
    3a80:	60 81       	ld	r22, Z
    3a82:	71 81       	ldd	r23, Z+1	; 0x01
    3a84:	82 81       	ldd	r24, Z+2	; 0x02
    3a86:	93 81       	ldd	r25, Z+3	; 0x03
    3a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	9e af       	std	Y+62, r25	; 0x3e
    3a92:	8d af       	std	Y+61, r24	; 0x3d
    3a94:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a96:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a98:	9a af       	std	Y+58, r25	; 0x3a
    3a9a:	89 af       	std	Y+57, r24	; 0x39
    3a9c:	89 ad       	ldd	r24, Y+57	; 0x39
    3a9e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	f1 f7       	brne	.-4      	; 0x3aa0 <createPassword+0x664>
    3aa4:	9a af       	std	Y+58, r25	; 0x3a
    3aa6:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(200);
			LCD_moveCursor(1,i+11);
    3aa8:	fe 01       	movw	r30, r28
    3aaa:	ef 58       	subi	r30, 0x8F	; 143
    3aac:	ff 4f       	sbci	r31, 0xFF	; 255
    3aae:	80 81       	ld	r24, Z
    3ab0:	98 2f       	mov	r25, r24
    3ab2:	95 5f       	subi	r25, 0xF5	; 245
    3ab4:	81 e0       	ldi	r24, 0x01	; 1
    3ab6:	69 2f       	mov	r22, r25
    3ab8:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_moveCursor>
			UART_sendByte(key);
    3abc:	80 91 25 01 	lds	r24, 0x0125
    3ac0:	0e 94 19 0b 	call	0x1632	; 0x1632 <UART_sendByte>
			LCD_displayCharacter('*');
    3ac4:	8a e2       	ldi	r24, 0x2A	; 42
    3ac6:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_displayCharacter>
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	aa ef       	ldi	r26, 0xFA	; 250
    3ad0:	b3 e4       	ldi	r27, 0x43	; 67
    3ad2:	8d ab       	std	Y+53, r24	; 0x35
    3ad4:	9e ab       	std	Y+54, r25	; 0x36
    3ad6:	af ab       	std	Y+55, r26	; 0x37
    3ad8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ada:	6d a9       	ldd	r22, Y+53	; 0x35
    3adc:	7e a9       	ldd	r23, Y+54	; 0x36
    3ade:	8f a9       	ldd	r24, Y+55	; 0x37
    3ae0:	98 ad       	ldd	r25, Y+56	; 0x38
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	4a ef       	ldi	r20, 0xFA	; 250
    3ae8:	54 e4       	ldi	r21, 0x44	; 68
    3aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	89 ab       	std	Y+49, r24	; 0x31
    3af4:	9a ab       	std	Y+50, r25	; 0x32
    3af6:	ab ab       	std	Y+51, r26	; 0x33
    3af8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3afa:	69 a9       	ldd	r22, Y+49	; 0x31
    3afc:	7a a9       	ldd	r23, Y+50	; 0x32
    3afe:	8b a9       	ldd	r24, Y+51	; 0x33
    3b00:	9c a9       	ldd	r25, Y+52	; 0x34
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	40 e8       	ldi	r20, 0x80	; 128
    3b08:	5f e3       	ldi	r21, 0x3F	; 63
    3b0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b0e:	88 23       	and	r24, r24
    3b10:	2c f4       	brge	.+10     	; 0x3b1c <createPassword+0x6e0>
		__ticks = 1;
    3b12:	81 e0       	ldi	r24, 0x01	; 1
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	98 ab       	std	Y+48, r25	; 0x30
    3b18:	8f a7       	std	Y+47, r24	; 0x2f
    3b1a:	3f c0       	rjmp	.+126    	; 0x3b9a <createPassword+0x75e>
	else if (__tmp > 65535)
    3b1c:	69 a9       	ldd	r22, Y+49	; 0x31
    3b1e:	7a a9       	ldd	r23, Y+50	; 0x32
    3b20:	8b a9       	ldd	r24, Y+51	; 0x33
    3b22:	9c a9       	ldd	r25, Y+52	; 0x34
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	3f ef       	ldi	r19, 0xFF	; 255
    3b28:	4f e7       	ldi	r20, 0x7F	; 127
    3b2a:	57 e4       	ldi	r21, 0x47	; 71
    3b2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b30:	18 16       	cp	r1, r24
    3b32:	4c f5       	brge	.+82     	; 0x3b86 <createPassword+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b34:	6d a9       	ldd	r22, Y+53	; 0x35
    3b36:	7e a9       	ldd	r23, Y+54	; 0x36
    3b38:	8f a9       	ldd	r24, Y+55	; 0x37
    3b3a:	98 ad       	ldd	r25, Y+56	; 0x38
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	40 e2       	ldi	r20, 0x20	; 32
    3b42:	51 e4       	ldi	r21, 0x41	; 65
    3b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	bc 01       	movw	r22, r24
    3b4e:	cd 01       	movw	r24, r26
    3b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	98 ab       	std	Y+48, r25	; 0x30
    3b5a:	8f a7       	std	Y+47, r24	; 0x2f
    3b5c:	0f c0       	rjmp	.+30     	; 0x3b7c <createPassword+0x740>
    3b5e:	88 ec       	ldi	r24, 0xC8	; 200
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	9e a7       	std	Y+46, r25	; 0x2e
    3b64:	8d a7       	std	Y+45, r24	; 0x2d
    3b66:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b68:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b6a:	01 97       	sbiw	r24, 0x01	; 1
    3b6c:	f1 f7       	brne	.-4      	; 0x3b6a <createPassword+0x72e>
    3b6e:	9e a7       	std	Y+46, r25	; 0x2e
    3b70:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b72:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b74:	98 a9       	ldd	r25, Y+48	; 0x30
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	98 ab       	std	Y+48, r25	; 0x30
    3b7a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b7e:	98 a9       	ldd	r25, Y+48	; 0x30
    3b80:	00 97       	sbiw	r24, 0x00	; 0
    3b82:	69 f7       	brne	.-38     	; 0x3b5e <createPassword+0x722>
    3b84:	14 c0       	rjmp	.+40     	; 0x3bae <createPassword+0x772>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b86:	69 a9       	ldd	r22, Y+49	; 0x31
    3b88:	7a a9       	ldd	r23, Y+50	; 0x32
    3b8a:	8b a9       	ldd	r24, Y+51	; 0x33
    3b8c:	9c a9       	ldd	r25, Y+52	; 0x34
    3b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b92:	dc 01       	movw	r26, r24
    3b94:	cb 01       	movw	r24, r22
    3b96:	98 ab       	std	Y+48, r25	; 0x30
    3b98:	8f a7       	std	Y+47, r24	; 0x2f
    3b9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b9c:	98 a9       	ldd	r25, Y+48	; 0x30
    3b9e:	9c a7       	std	Y+44, r25	; 0x2c
    3ba0:	8b a7       	std	Y+43, r24	; 0x2b
    3ba2:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ba4:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	f1 f7       	brne	.-4      	; 0x3ba6 <createPassword+0x76a>
    3baa:	9c a7       	std	Y+44, r25	; 0x2c
    3bac:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_clearScreen();
		g_pass[PASS_LENGTH] = '#';
		LCD_displayString("plz re-enter the");
		LCD_moveCursor(1,0);
		LCD_displayString("same pass: ");
		for(i = 0; i<PASS_LENGTH;i++)
    3bae:	de 01       	movw	r26, r28
    3bb0:	af 58       	subi	r26, 0x8F	; 143
    3bb2:	bf 4f       	sbci	r27, 0xFF	; 255
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	ef 58       	subi	r30, 0x8F	; 143
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	80 81       	ld	r24, Z
    3bbc:	8f 5f       	subi	r24, 0xFF	; 255
    3bbe:	8c 93       	st	X, r24
    3bc0:	fe 01       	movw	r30, r28
    3bc2:	ef 58       	subi	r30, 0x8F	; 143
    3bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc6:	80 81       	ld	r24, Z
    3bc8:	85 30       	cpi	r24, 0x05	; 5
    3bca:	08 f4       	brcc	.+2      	; 0x3bce <createPassword+0x792>
    3bcc:	cb ce       	rjmp	.-618    	; 0x3964 <createPassword+0x528>
			LCD_moveCursor(1,i+11);
			UART_sendByte(key);
			LCD_displayCharacter('*');
			_delay_ms(500);
		}
		key = KEYPAD_getPressedKey();
    3bce:	0e 94 ab 0b 	call	0x1756	; 0x1756 <KEYPAD_getPressedKey>
    3bd2:	80 93 25 01 	sts	0x0125, r24
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	aa ef       	ldi	r26, 0xFA	; 250
    3bdc:	b3 e4       	ldi	r27, 0x43	; 67
    3bde:	8f a3       	std	Y+39, r24	; 0x27
    3be0:	98 a7       	std	Y+40, r25	; 0x28
    3be2:	a9 a7       	std	Y+41, r26	; 0x29
    3be4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3be6:	6f a1       	ldd	r22, Y+39	; 0x27
    3be8:	78 a5       	ldd	r23, Y+40	; 0x28
    3bea:	89 a5       	ldd	r24, Y+41	; 0x29
    3bec:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	4a ef       	ldi	r20, 0xFA	; 250
    3bf4:	54 e4       	ldi	r21, 0x44	; 68
    3bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	8b a3       	std	Y+35, r24	; 0x23
    3c00:	9c a3       	std	Y+36, r25	; 0x24
    3c02:	ad a3       	std	Y+37, r26	; 0x25
    3c04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c06:	6b a1       	ldd	r22, Y+35	; 0x23
    3c08:	7c a1       	ldd	r23, Y+36	; 0x24
    3c0a:	8d a1       	ldd	r24, Y+37	; 0x25
    3c0c:	9e a1       	ldd	r25, Y+38	; 0x26
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	40 e8       	ldi	r20, 0x80	; 128
    3c14:	5f e3       	ldi	r21, 0x3F	; 63
    3c16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c1a:	88 23       	and	r24, r24
    3c1c:	2c f4       	brge	.+10     	; 0x3c28 <createPassword+0x7ec>
		__ticks = 1;
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	9a a3       	std	Y+34, r25	; 0x22
    3c24:	89 a3       	std	Y+33, r24	; 0x21
    3c26:	3f c0       	rjmp	.+126    	; 0x3ca6 <createPassword+0x86a>
	else if (__tmp > 65535)
    3c28:	6b a1       	ldd	r22, Y+35	; 0x23
    3c2a:	7c a1       	ldd	r23, Y+36	; 0x24
    3c2c:	8d a1       	ldd	r24, Y+37	; 0x25
    3c2e:	9e a1       	ldd	r25, Y+38	; 0x26
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	3f ef       	ldi	r19, 0xFF	; 255
    3c34:	4f e7       	ldi	r20, 0x7F	; 127
    3c36:	57 e4       	ldi	r21, 0x47	; 71
    3c38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c3c:	18 16       	cp	r1, r24
    3c3e:	4c f5       	brge	.+82     	; 0x3c92 <createPassword+0x856>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c40:	6f a1       	ldd	r22, Y+39	; 0x27
    3c42:	78 a5       	ldd	r23, Y+40	; 0x28
    3c44:	89 a5       	ldd	r24, Y+41	; 0x29
    3c46:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c48:	20 e0       	ldi	r18, 0x00	; 0
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	40 e2       	ldi	r20, 0x20	; 32
    3c4e:	51 e4       	ldi	r21, 0x41	; 65
    3c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c54:	dc 01       	movw	r26, r24
    3c56:	cb 01       	movw	r24, r22
    3c58:	bc 01       	movw	r22, r24
    3c5a:	cd 01       	movw	r24, r26
    3c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c60:	dc 01       	movw	r26, r24
    3c62:	cb 01       	movw	r24, r22
    3c64:	9a a3       	std	Y+34, r25	; 0x22
    3c66:	89 a3       	std	Y+33, r24	; 0x21
    3c68:	0f c0       	rjmp	.+30     	; 0x3c88 <createPassword+0x84c>
    3c6a:	88 ec       	ldi	r24, 0xC8	; 200
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	98 a3       	std	Y+32, r25	; 0x20
    3c70:	8f 8f       	std	Y+31, r24	; 0x1f
    3c72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c74:	98 a1       	ldd	r25, Y+32	; 0x20
    3c76:	01 97       	sbiw	r24, 0x01	; 1
    3c78:	f1 f7       	brne	.-4      	; 0x3c76 <createPassword+0x83a>
    3c7a:	98 a3       	std	Y+32, r25	; 0x20
    3c7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c7e:	89 a1       	ldd	r24, Y+33	; 0x21
    3c80:	9a a1       	ldd	r25, Y+34	; 0x22
    3c82:	01 97       	sbiw	r24, 0x01	; 1
    3c84:	9a a3       	std	Y+34, r25	; 0x22
    3c86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c88:	89 a1       	ldd	r24, Y+33	; 0x21
    3c8a:	9a a1       	ldd	r25, Y+34	; 0x22
    3c8c:	00 97       	sbiw	r24, 0x00	; 0
    3c8e:	69 f7       	brne	.-38     	; 0x3c6a <createPassword+0x82e>
    3c90:	14 c0       	rjmp	.+40     	; 0x3cba <createPassword+0x87e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c92:	6b a1       	ldd	r22, Y+35	; 0x23
    3c94:	7c a1       	ldd	r23, Y+36	; 0x24
    3c96:	8d a1       	ldd	r24, Y+37	; 0x25
    3c98:	9e a1       	ldd	r25, Y+38	; 0x26
    3c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	9a a3       	std	Y+34, r25	; 0x22
    3ca4:	89 a3       	std	Y+33, r24	; 0x21
    3ca6:	89 a1       	ldd	r24, Y+33	; 0x21
    3ca8:	9a a1       	ldd	r25, Y+34	; 0x22
    3caa:	9e 8f       	std	Y+30, r25	; 0x1e
    3cac:	8d 8f       	std	Y+29, r24	; 0x1d
    3cae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3cb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3cb2:	01 97       	sbiw	r24, 0x01	; 1
    3cb4:	f1 f7       	brne	.-4      	; 0x3cb2 <createPassword+0x876>
    3cb6:	9e 8f       	std	Y+30, r25	; 0x1e
    3cb8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);



		if(UART_receiveByte() == CORRECT)
    3cba:	0e 94 30 0b 	call	0x1660	; 0x1660 <UART_receiveByte>
    3cbe:	81 30       	cpi	r24, 0x01	; 1
    3cc0:	09 f0       	breq	.+2      	; 0x3cc4 <createPassword+0x888>
    3cc2:	79 c0       	rjmp	.+242    	; 0x3db6 <createPassword+0x97a>
		{
			LCD_clearScreen();
    3cc4:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <LCD_clearScreen>
			LCD_displayString("Correct!");
    3cc8:	81 ef       	ldi	r24, 0xF1	; 241
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LCD_displayString>
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	a6 e9       	ldi	r26, 0x96	; 150
    3cd6:	b3 e4       	ldi	r27, 0x43	; 67
    3cd8:	89 8f       	std	Y+25, r24	; 0x19
    3cda:	9a 8f       	std	Y+26, r25	; 0x1a
    3cdc:	ab 8f       	std	Y+27, r26	; 0x1b
    3cde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ce0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ce2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ce4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ce6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	4a ef       	ldi	r20, 0xFA	; 250
    3cee:	54 e4       	ldi	r21, 0x44	; 68
    3cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	8d 8b       	std	Y+21, r24	; 0x15
    3cfa:	9e 8b       	std	Y+22, r25	; 0x16
    3cfc:	af 8b       	std	Y+23, r26	; 0x17
    3cfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d00:	6d 89       	ldd	r22, Y+21	; 0x15
    3d02:	7e 89       	ldd	r23, Y+22	; 0x16
    3d04:	8f 89       	ldd	r24, Y+23	; 0x17
    3d06:	98 8d       	ldd	r25, Y+24	; 0x18
    3d08:	20 e0       	ldi	r18, 0x00	; 0
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	40 e8       	ldi	r20, 0x80	; 128
    3d0e:	5f e3       	ldi	r21, 0x3F	; 63
    3d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d14:	88 23       	and	r24, r24
    3d16:	2c f4       	brge	.+10     	; 0x3d22 <createPassword+0x8e6>
		__ticks = 1;
    3d18:	81 e0       	ldi	r24, 0x01	; 1
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	9c 8b       	std	Y+20, r25	; 0x14
    3d1e:	8b 8b       	std	Y+19, r24	; 0x13
    3d20:	3f c0       	rjmp	.+126    	; 0x3da0 <createPassword+0x964>
	else if (__tmp > 65535)
    3d22:	6d 89       	ldd	r22, Y+21	; 0x15
    3d24:	7e 89       	ldd	r23, Y+22	; 0x16
    3d26:	8f 89       	ldd	r24, Y+23	; 0x17
    3d28:	98 8d       	ldd	r25, Y+24	; 0x18
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	3f ef       	ldi	r19, 0xFF	; 255
    3d2e:	4f e7       	ldi	r20, 0x7F	; 127
    3d30:	57 e4       	ldi	r21, 0x47	; 71
    3d32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d36:	18 16       	cp	r1, r24
    3d38:	4c f5       	brge	.+82     	; 0x3d8c <createPassword+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d3a:	69 8d       	ldd	r22, Y+25	; 0x19
    3d3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	40 e2       	ldi	r20, 0x20	; 32
    3d48:	51 e4       	ldi	r21, 0x41	; 65
    3d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	bc 01       	movw	r22, r24
    3d54:	cd 01       	movw	r24, r26
    3d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	9c 8b       	std	Y+20, r25	; 0x14
    3d60:	8b 8b       	std	Y+19, r24	; 0x13
    3d62:	0f c0       	rjmp	.+30     	; 0x3d82 <createPassword+0x946>
    3d64:	88 ec       	ldi	r24, 0xC8	; 200
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	9a 8b       	std	Y+18, r25	; 0x12
    3d6a:	89 8b       	std	Y+17, r24	; 0x11
    3d6c:	89 89       	ldd	r24, Y+17	; 0x11
    3d6e:	9a 89       	ldd	r25, Y+18	; 0x12
    3d70:	01 97       	sbiw	r24, 0x01	; 1
    3d72:	f1 f7       	brne	.-4      	; 0x3d70 <createPassword+0x934>
    3d74:	9a 8b       	std	Y+18, r25	; 0x12
    3d76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d78:	8b 89       	ldd	r24, Y+19	; 0x13
    3d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d7c:	01 97       	sbiw	r24, 0x01	; 1
    3d7e:	9c 8b       	std	Y+20, r25	; 0x14
    3d80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d82:	8b 89       	ldd	r24, Y+19	; 0x13
    3d84:	9c 89       	ldd	r25, Y+20	; 0x14
    3d86:	00 97       	sbiw	r24, 0x00	; 0
    3d88:	69 f7       	brne	.-38     	; 0x3d64 <createPassword+0x928>
    3d8a:	91 c0       	rjmp	.+290    	; 0x3eae <createPassword+0xa72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    3d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    3d90:	8f 89       	ldd	r24, Y+23	; 0x17
    3d92:	98 8d       	ldd	r25, Y+24	; 0x18
    3d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d98:	dc 01       	movw	r26, r24
    3d9a:	cb 01       	movw	r24, r22
    3d9c:	9c 8b       	std	Y+20, r25	; 0x14
    3d9e:	8b 8b       	std	Y+19, r24	; 0x13
    3da0:	8b 89       	ldd	r24, Y+19	; 0x13
    3da2:	9c 89       	ldd	r25, Y+20	; 0x14
    3da4:	98 8b       	std	Y+16, r25	; 0x10
    3da6:	8f 87       	std	Y+15, r24	; 0x0f
    3da8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3daa:	98 89       	ldd	r25, Y+16	; 0x10
    3dac:	01 97       	sbiw	r24, 0x01	; 1
    3dae:	f1 f7       	brne	.-4      	; 0x3dac <createPassword+0x970>
    3db0:	98 8b       	std	Y+16, r25	; 0x10
    3db2:	8f 87       	std	Y+15, r24	; 0x0f
    3db4:	7c c0       	rjmp	.+248    	; 0x3eae <createPassword+0xa72>
			_delay_ms(300);


		}
		else{
			LCD_clearScreen();
    3db6:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <LCD_clearScreen>
			LCD_displayString("Not Matching");
    3dba:	8a ef       	ldi	r24, 0xFA	; 250
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LCD_displayString>
    3dc2:	80 e0       	ldi	r24, 0x00	; 0
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	a6 e9       	ldi	r26, 0x96	; 150
    3dc8:	b3 e4       	ldi	r27, 0x43	; 67
    3dca:	8b 87       	std	Y+11, r24	; 0x0b
    3dcc:	9c 87       	std	Y+12, r25	; 0x0c
    3dce:	ad 87       	std	Y+13, r26	; 0x0d
    3dd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	4a ef       	ldi	r20, 0xFA	; 250
    3de0:	54 e4       	ldi	r21, 0x44	; 68
    3de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de6:	dc 01       	movw	r26, r24
    3de8:	cb 01       	movw	r24, r22
    3dea:	8f 83       	std	Y+7, r24	; 0x07
    3dec:	98 87       	std	Y+8, r25	; 0x08
    3dee:	a9 87       	std	Y+9, r26	; 0x09
    3df0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3df2:	6f 81       	ldd	r22, Y+7	; 0x07
    3df4:	78 85       	ldd	r23, Y+8	; 0x08
    3df6:	89 85       	ldd	r24, Y+9	; 0x09
    3df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	40 e8       	ldi	r20, 0x80	; 128
    3e00:	5f e3       	ldi	r21, 0x3F	; 63
    3e02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e06:	88 23       	and	r24, r24
    3e08:	2c f4       	brge	.+10     	; 0x3e14 <createPassword+0x9d8>
		__ticks = 1;
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	9e 83       	std	Y+6, r25	; 0x06
    3e10:	8d 83       	std	Y+5, r24	; 0x05
    3e12:	3f c0       	rjmp	.+126    	; 0x3e92 <createPassword+0xa56>
	else if (__tmp > 65535)
    3e14:	6f 81       	ldd	r22, Y+7	; 0x07
    3e16:	78 85       	ldd	r23, Y+8	; 0x08
    3e18:	89 85       	ldd	r24, Y+9	; 0x09
    3e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	3f ef       	ldi	r19, 0xFF	; 255
    3e20:	4f e7       	ldi	r20, 0x7F	; 127
    3e22:	57 e4       	ldi	r21, 0x47	; 71
    3e24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e28:	18 16       	cp	r1, r24
    3e2a:	4c f5       	brge	.+82     	; 0x3e7e <createPassword+0xa42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e30:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e32:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	40 e2       	ldi	r20, 0x20	; 32
    3e3a:	51 e4       	ldi	r21, 0x41	; 65
    3e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e40:	dc 01       	movw	r26, r24
    3e42:	cb 01       	movw	r24, r22
    3e44:	bc 01       	movw	r22, r24
    3e46:	cd 01       	movw	r24, r26
    3e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e4c:	dc 01       	movw	r26, r24
    3e4e:	cb 01       	movw	r24, r22
    3e50:	9e 83       	std	Y+6, r25	; 0x06
    3e52:	8d 83       	std	Y+5, r24	; 0x05
    3e54:	0f c0       	rjmp	.+30     	; 0x3e74 <createPassword+0xa38>
    3e56:	88 ec       	ldi	r24, 0xC8	; 200
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	9c 83       	std	Y+4, r25	; 0x04
    3e5c:	8b 83       	std	Y+3, r24	; 0x03
    3e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e60:	9c 81       	ldd	r25, Y+4	; 0x04
    3e62:	01 97       	sbiw	r24, 0x01	; 1
    3e64:	f1 f7       	brne	.-4      	; 0x3e62 <createPassword+0xa26>
    3e66:	9c 83       	std	Y+4, r25	; 0x04
    3e68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e6e:	01 97       	sbiw	r24, 0x01	; 1
    3e70:	9e 83       	std	Y+6, r25	; 0x06
    3e72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e74:	8d 81       	ldd	r24, Y+5	; 0x05
    3e76:	9e 81       	ldd	r25, Y+6	; 0x06
    3e78:	00 97       	sbiw	r24, 0x00	; 0
    3e7a:	69 f7       	brne	.-38     	; 0x3e56 <createPassword+0xa1a>
    3e7c:	14 c0       	rjmp	.+40     	; 0x3ea6 <createPassword+0xa6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e80:	78 85       	ldd	r23, Y+8	; 0x08
    3e82:	89 85       	ldd	r24, Y+9	; 0x09
    3e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e8a:	dc 01       	movw	r26, r24
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	9e 83       	std	Y+6, r25	; 0x06
    3e90:	8d 83       	std	Y+5, r24	; 0x05
    3e92:	8d 81       	ldd	r24, Y+5	; 0x05
    3e94:	9e 81       	ldd	r25, Y+6	; 0x06
    3e96:	9a 83       	std	Y+2, r25	; 0x02
    3e98:	89 83       	std	Y+1, r24	; 0x01
    3e9a:	89 81       	ldd	r24, Y+1	; 0x01
    3e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9e:	01 97       	sbiw	r24, 0x01	; 1
    3ea0:	f1 f7       	brne	.-4      	; 0x3e9e <createPassword+0xa62>
    3ea2:	9a 83       	std	Y+2, r25	; 0x02
    3ea4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
			return 0;
    3ea6:	e4 96       	adiw	r28, 0x34	; 52
    3ea8:	1f ae       	std	Y+63, r1	; 0x3f
    3eaa:	e4 97       	sbiw	r28, 0x34	; 52
    3eac:	04 c0       	rjmp	.+8      	; 0x3eb6 <createPassword+0xa7a>

		}
	}
	return 1;
    3eae:	f1 e0       	ldi	r31, 0x01	; 1
    3eb0:	e4 96       	adiw	r28, 0x34	; 52
    3eb2:	ff af       	std	Y+63, r31	; 0x3f
    3eb4:	e4 97       	sbiw	r28, 0x34	; 52
    3eb6:	e4 96       	adiw	r28, 0x34	; 52
    3eb8:	8f ad       	ldd	r24, Y+63	; 0x3f
    3eba:	e4 97       	sbiw	r28, 0x34	; 52

}
    3ebc:	cd 58       	subi	r28, 0x8D	; 141
    3ebe:	df 4f       	sbci	r29, 0xFF	; 255
    3ec0:	0f b6       	in	r0, 0x3f	; 63
    3ec2:	f8 94       	cli
    3ec4:	de bf       	out	0x3e, r29	; 62
    3ec6:	0f be       	out	0x3f, r0	; 63
    3ec8:	cd bf       	out	0x3d, r28	; 61
    3eca:	cf 91       	pop	r28
    3ecc:	df 91       	pop	r29
    3ece:	1f 91       	pop	r17
    3ed0:	0f 91       	pop	r16
    3ed2:	08 95       	ret

00003ed4 <__udivmodsi4>:
    3ed4:	a1 e2       	ldi	r26, 0x21	; 33
    3ed6:	1a 2e       	mov	r1, r26
    3ed8:	aa 1b       	sub	r26, r26
    3eda:	bb 1b       	sub	r27, r27
    3edc:	fd 01       	movw	r30, r26
    3ede:	0d c0       	rjmp	.+26     	; 0x3efa <__udivmodsi4_ep>

00003ee0 <__udivmodsi4_loop>:
    3ee0:	aa 1f       	adc	r26, r26
    3ee2:	bb 1f       	adc	r27, r27
    3ee4:	ee 1f       	adc	r30, r30
    3ee6:	ff 1f       	adc	r31, r31
    3ee8:	a2 17       	cp	r26, r18
    3eea:	b3 07       	cpc	r27, r19
    3eec:	e4 07       	cpc	r30, r20
    3eee:	f5 07       	cpc	r31, r21
    3ef0:	20 f0       	brcs	.+8      	; 0x3efa <__udivmodsi4_ep>
    3ef2:	a2 1b       	sub	r26, r18
    3ef4:	b3 0b       	sbc	r27, r19
    3ef6:	e4 0b       	sbc	r30, r20
    3ef8:	f5 0b       	sbc	r31, r21

00003efa <__udivmodsi4_ep>:
    3efa:	66 1f       	adc	r22, r22
    3efc:	77 1f       	adc	r23, r23
    3efe:	88 1f       	adc	r24, r24
    3f00:	99 1f       	adc	r25, r25
    3f02:	1a 94       	dec	r1
    3f04:	69 f7       	brne	.-38     	; 0x3ee0 <__udivmodsi4_loop>
    3f06:	60 95       	com	r22
    3f08:	70 95       	com	r23
    3f0a:	80 95       	com	r24
    3f0c:	90 95       	com	r25
    3f0e:	9b 01       	movw	r18, r22
    3f10:	ac 01       	movw	r20, r24
    3f12:	bd 01       	movw	r22, r26
    3f14:	cf 01       	movw	r24, r30
    3f16:	08 95       	ret

00003f18 <__prologue_saves__>:
    3f18:	2f 92       	push	r2
    3f1a:	3f 92       	push	r3
    3f1c:	4f 92       	push	r4
    3f1e:	5f 92       	push	r5
    3f20:	6f 92       	push	r6
    3f22:	7f 92       	push	r7
    3f24:	8f 92       	push	r8
    3f26:	9f 92       	push	r9
    3f28:	af 92       	push	r10
    3f2a:	bf 92       	push	r11
    3f2c:	cf 92       	push	r12
    3f2e:	df 92       	push	r13
    3f30:	ef 92       	push	r14
    3f32:	ff 92       	push	r15
    3f34:	0f 93       	push	r16
    3f36:	1f 93       	push	r17
    3f38:	cf 93       	push	r28
    3f3a:	df 93       	push	r29
    3f3c:	cd b7       	in	r28, 0x3d	; 61
    3f3e:	de b7       	in	r29, 0x3e	; 62
    3f40:	ca 1b       	sub	r28, r26
    3f42:	db 0b       	sbc	r29, r27
    3f44:	0f b6       	in	r0, 0x3f	; 63
    3f46:	f8 94       	cli
    3f48:	de bf       	out	0x3e, r29	; 62
    3f4a:	0f be       	out	0x3f, r0	; 63
    3f4c:	cd bf       	out	0x3d, r28	; 61
    3f4e:	09 94       	ijmp

00003f50 <__epilogue_restores__>:
    3f50:	2a 88       	ldd	r2, Y+18	; 0x12
    3f52:	39 88       	ldd	r3, Y+17	; 0x11
    3f54:	48 88       	ldd	r4, Y+16	; 0x10
    3f56:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f58:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f60:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f62:	b9 84       	ldd	r11, Y+9	; 0x09
    3f64:	c8 84       	ldd	r12, Y+8	; 0x08
    3f66:	df 80       	ldd	r13, Y+7	; 0x07
    3f68:	ee 80       	ldd	r14, Y+6	; 0x06
    3f6a:	fd 80       	ldd	r15, Y+5	; 0x05
    3f6c:	0c 81       	ldd	r16, Y+4	; 0x04
    3f6e:	1b 81       	ldd	r17, Y+3	; 0x03
    3f70:	aa 81       	ldd	r26, Y+2	; 0x02
    3f72:	b9 81       	ldd	r27, Y+1	; 0x01
    3f74:	ce 0f       	add	r28, r30
    3f76:	d1 1d       	adc	r29, r1
    3f78:	0f b6       	in	r0, 0x3f	; 63
    3f7a:	f8 94       	cli
    3f7c:	de bf       	out	0x3e, r29	; 62
    3f7e:	0f be       	out	0x3f, r0	; 63
    3f80:	cd bf       	out	0x3d, r28	; 61
    3f82:	ed 01       	movw	r28, r26
    3f84:	08 95       	ret

00003f86 <utoa>:
    3f86:	fb 01       	movw	r30, r22
    3f88:	9f 01       	movw	r18, r30
    3f8a:	42 30       	cpi	r20, 0x02	; 2
    3f8c:	74 f0       	brlt	.+28     	; 0x3faa <utoa+0x24>
    3f8e:	45 32       	cpi	r20, 0x25	; 37
    3f90:	64 f4       	brge	.+24     	; 0x3faa <utoa+0x24>
    3f92:	64 2f       	mov	r22, r20
    3f94:	77 27       	eor	r23, r23
    3f96:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__udivmodhi4>
    3f9a:	80 5d       	subi	r24, 0xD0	; 208
    3f9c:	8a 33       	cpi	r24, 0x3A	; 58
    3f9e:	0c f0       	brlt	.+2      	; 0x3fa2 <utoa+0x1c>
    3fa0:	89 5d       	subi	r24, 0xD9	; 217
    3fa2:	81 93       	st	Z+, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	00 97       	sbiw	r24, 0x00	; 0
    3fa8:	a1 f7       	brne	.-24     	; 0x3f92 <utoa+0xc>
    3faa:	10 82       	st	Z, r1
    3fac:	c9 01       	movw	r24, r18
    3fae:	0c 94 d9 1f 	jmp	0x3fb2	; 0x3fb2 <strrev>

00003fb2 <strrev>:
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	67 2f       	mov	r22, r23
    3fb8:	71 91       	ld	r23, Z+
    3fba:	77 23       	and	r23, r23
    3fbc:	e1 f7       	brne	.-8      	; 0x3fb6 <strrev+0x4>
    3fbe:	32 97       	sbiw	r30, 0x02	; 2
    3fc0:	04 c0       	rjmp	.+8      	; 0x3fca <strrev+0x18>
    3fc2:	7c 91       	ld	r23, X
    3fc4:	6d 93       	st	X+, r22
    3fc6:	70 83       	st	Z, r23
    3fc8:	62 91       	ld	r22, -Z
    3fca:	ae 17       	cp	r26, r30
    3fcc:	bf 07       	cpc	r27, r31
    3fce:	c8 f3       	brcs	.-14     	; 0x3fc2 <strrev+0x10>
    3fd0:	08 95       	ret

00003fd2 <__udivmodhi4>:
    3fd2:	aa 1b       	sub	r26, r26
    3fd4:	bb 1b       	sub	r27, r27
    3fd6:	51 e1       	ldi	r21, 0x11	; 17
    3fd8:	07 c0       	rjmp	.+14     	; 0x3fe8 <__udivmodhi4_ep>

00003fda <__udivmodhi4_loop>:
    3fda:	aa 1f       	adc	r26, r26
    3fdc:	bb 1f       	adc	r27, r27
    3fde:	a6 17       	cp	r26, r22
    3fe0:	b7 07       	cpc	r27, r23
    3fe2:	10 f0       	brcs	.+4      	; 0x3fe8 <__udivmodhi4_ep>
    3fe4:	a6 1b       	sub	r26, r22
    3fe6:	b7 0b       	sbc	r27, r23

00003fe8 <__udivmodhi4_ep>:
    3fe8:	88 1f       	adc	r24, r24
    3fea:	99 1f       	adc	r25, r25
    3fec:	5a 95       	dec	r21
    3fee:	a9 f7       	brne	.-22     	; 0x3fda <__udivmodhi4_loop>
    3ff0:	80 95       	com	r24
    3ff2:	90 95       	com	r25
    3ff4:	bc 01       	movw	r22, r24
    3ff6:	cd 01       	movw	r24, r26
    3ff8:	08 95       	ret

00003ffa <_exit>:
    3ffa:	f8 94       	cli

00003ffc <__stop_program>:
    3ffc:	ff cf       	rjmp	.-2      	; 0x3ffc <__stop_program>
