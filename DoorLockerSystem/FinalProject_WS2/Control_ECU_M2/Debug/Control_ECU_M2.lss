
Control_ECU_M2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000384a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  0000384a  000038de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080008c  0080008c  0000390a  2**0
                  ALLOC
  3 .stab         00003aa4  00000000  00000000  0000390c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000022d0  00000000  00000000  000073b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000097c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009930  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b579  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d214  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d374  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d601  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ddcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__vector_7>
      20:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__vector_8>
      24:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3a 1b 	call	0x3674	; 0x3674 <main>
      8a:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ce 1b 	jmp	0x379c	; 0x379c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 be 1b 	jmp	0x377c	; 0x377c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 da 1b 	jmp	0x37b4	; 0x37b4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 be 1b 	jmp	0x377c	; 0x377c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 da 1b 	jmp	0x37b4	; 0x37b4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ce 1b 	jmp	0x379c	; 0x379c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 be 1b 	jmp	0x377c	; 0x377c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 da 1b 	jmp	0x37b4	; 0x37b4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 be 1b 	jmp	0x377c	; 0x377c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 da 1b 	jmp	0x37b4	; 0x37b4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 be 1b 	jmp	0x377c	; 0x377c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 da 1b 	jmp	0x37b4	; 0x37b4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c2 1b 	jmp	0x3784	; 0x3784 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 de 1b 	jmp	0x37bc	; 0x37bc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	2d 97       	sbiw	r28, 0x0d	; 13
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	6a 83       	std	Y+2, r22	; 0x02
     d34:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	88 30       	cpi	r24, 0x08	; 8
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <GPIO_writePin+0x22>
     d3c:	db c0       	rjmp	.+438    	; 0xef4 <GPIO_writePin+0x1d8>
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	84 30       	cpi	r24, 0x04	; 4
     d42:	08 f0       	brcs	.+2      	; 0xd46 <GPIO_writePin+0x2a>
     d44:	d7 c0       	rjmp	.+430    	; 0xef4 <GPIO_writePin+0x1d8>
	{
		// do nothing
	}
	else{

		switch(port_num)
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	3d 87       	std	Y+13, r19	; 0x0d
     d4e:	2c 87       	std	Y+12, r18	; 0x0c
     d50:	8c 85       	ldd	r24, Y+12	; 0x0c
     d52:	9d 85       	ldd	r25, Y+13	; 0x0d
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	91 05       	cpc	r25, r1
     d58:	09 f4       	brne	.+2      	; 0xd5c <GPIO_writePin+0x40>
     d5a:	44 c0       	rjmp	.+136    	; 0xde4 <GPIO_writePin+0xc8>
     d5c:	2c 85       	ldd	r18, Y+12	; 0x0c
     d5e:	3d 85       	ldd	r19, Y+13	; 0x0d
     d60:	22 30       	cpi	r18, 0x02	; 2
     d62:	31 05       	cpc	r19, r1
     d64:	2c f4       	brge	.+10     	; 0xd70 <GPIO_writePin+0x54>
     d66:	8c 85       	ldd	r24, Y+12	; 0x0c
     d68:	9d 85       	ldd	r25, Y+13	; 0x0d
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	71 f0       	breq	.+28     	; 0xd8a <GPIO_writePin+0x6e>
     d6e:	c2 c0       	rjmp	.+388    	; 0xef4 <GPIO_writePin+0x1d8>
     d70:	2c 85       	ldd	r18, Y+12	; 0x0c
     d72:	3d 85       	ldd	r19, Y+13	; 0x0d
     d74:	22 30       	cpi	r18, 0x02	; 2
     d76:	31 05       	cpc	r19, r1
     d78:	09 f4       	brne	.+2      	; 0xd7c <GPIO_writePin+0x60>
     d7a:	62 c0       	rjmp	.+196    	; 0xe40 <GPIO_writePin+0x124>
     d7c:	8c 85       	ldd	r24, Y+12	; 0x0c
     d7e:	9d 85       	ldd	r25, Y+13	; 0x0d
     d80:	83 30       	cpi	r24, 0x03	; 3
     d82:	91 05       	cpc	r25, r1
     d84:	09 f4       	brne	.+2      	; 0xd88 <GPIO_writePin+0x6c>
     d86:	89 c0       	rjmp	.+274    	; 0xe9a <GPIO_writePin+0x17e>
     d88:	b5 c0       	rjmp	.+362    	; 0xef4 <GPIO_writePin+0x1d8>
		{
		case PORTA_ID:
			value ? SET_BIT(PORTA, pin_num) : CLEAR_BIT(PORTA, pin_num);
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	88 23       	and	r24, r24
     d8e:	a9 f0       	breq	.+42     	; 0xdba <GPIO_writePin+0x9e>
     d90:	ab e3       	ldi	r26, 0x3B	; 59
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	eb e3       	ldi	r30, 0x3B	; 59
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	48 2f       	mov	r20, r24
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 2e       	mov	r0, r18
     da8:	02 c0       	rjmp	.+4      	; 0xdae <GPIO_writePin+0x92>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	0a 94       	dec	r0
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <GPIO_writePin+0x8e>
     db2:	84 2b       	or	r24, r20
     db4:	8c 93       	st	X, r24
     db6:	9c 91       	ld	r25, X
     db8:	9d c0       	rjmp	.+314    	; 0xef4 <GPIO_writePin+0x1d8>
     dba:	ab e3       	ldi	r26, 0x3B	; 59
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	eb e3       	ldi	r30, 0x3B	; 59
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <GPIO_writePin+0xba>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	2a 95       	dec	r18
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <GPIO_writePin+0xb6>
     dda:	80 95       	com	r24
     ddc:	84 23       	and	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	2c 91       	ld	r18, X
     de2:	88 c0       	rjmp	.+272    	; 0xef4 <GPIO_writePin+0x1d8>
			break;

		case PORTB_ID:
			value ? SET_BIT(PORTB, pin_num) : CLEAR_BIT(PORTB, pin_num);
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	88 23       	and	r24, r24
     de8:	a9 f0       	breq	.+42     	; 0xe14 <GPIO_writePin+0xf8>
     dea:	a8 e3       	ldi	r26, 0x38	; 56
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e8 e3       	ldi	r30, 0x38	; 56
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <GPIO_writePin+0xec>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <GPIO_writePin+0xe8>
     e0c:	84 2b       	or	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	3c 91       	ld	r19, X
     e12:	70 c0       	rjmp	.+224    	; 0xef4 <GPIO_writePin+0x1d8>
     e14:	a8 e3       	ldi	r26, 0x38	; 56
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e8 e3       	ldi	r30, 0x38	; 56
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <GPIO_writePin+0x116>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <GPIO_writePin+0x112>
     e36:	80 95       	com	r24
     e38:	84 23       	and	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	8c 91       	ld	r24, X
     e3e:	5a c0       	rjmp	.+180    	; 0xef4 <GPIO_writePin+0x1d8>
			break;
		case PORTC_ID:
			value ? SET_BIT(PORTC, pin_num) : CLEAR_BIT(PORTC, pin_num);
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	88 23       	and	r24, r24
     e44:	a9 f0       	breq	.+42     	; 0xe70 <GPIO_writePin+0x154>
     e46:	a5 e3       	ldi	r26, 0x35	; 53
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e5 e3       	ldi	r30, 0x35	; 53
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <GPIO_writePin+0x148>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <GPIO_writePin+0x144>
     e68:	84 2b       	or	r24, r20
     e6a:	8c 93       	st	X, r24
     e6c:	9c 91       	ld	r25, X
     e6e:	42 c0       	rjmp	.+132    	; 0xef4 <GPIO_writePin+0x1d8>
     e70:	a5 e3       	ldi	r26, 0x35	; 53
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e5 e3       	ldi	r30, 0x35	; 53
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <GPIO_writePin+0x170>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	2a 95       	dec	r18
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <GPIO_writePin+0x16c>
     e90:	80 95       	com	r24
     e92:	84 23       	and	r24, r20
     e94:	8c 93       	st	X, r24
     e96:	2c 91       	ld	r18, X
     e98:	2d c0       	rjmp	.+90     	; 0xef4 <GPIO_writePin+0x1d8>
			break;
		case PORTD_ID:
			value ? SET_BIT(PORTD, pin_num) : CLEAR_BIT(PORTD, pin_num);
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	88 23       	and	r24, r24
     e9e:	a9 f0       	breq	.+42     	; 0xeca <GPIO_writePin+0x1ae>
     ea0:	a2 e3       	ldi	r26, 0x32	; 50
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e2 e3       	ldi	r30, 0x32	; 50
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <GPIO_writePin+0x1a2>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <GPIO_writePin+0x19e>
     ec2:	84 2b       	or	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	3c 91       	ld	r19, X
     ec8:	15 c0       	rjmp	.+42     	; 0xef4 <GPIO_writePin+0x1d8>
     eca:	a2 e3       	ldi	r26, 0x32	; 50
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e2 e3       	ldi	r30, 0x32	; 50
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <GPIO_writePin+0x1cc>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <GPIO_writePin+0x1c8>
     eec:	80 95       	com	r24
     eee:	84 23       	and	r24, r20
     ef0:	8c 93       	st	X, r24
     ef2:	8c 91       	ld	r24, X
			break;

		}
	}
}
     ef4:	2d 96       	adiw	r28, 0x0d	; 13
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
     efa:	de bf       	out	0x3e, r29	; 62
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	cd bf       	out	0x3d, r28	; 61
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <GPIO_readPin+0x6>
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <GPIO_readPin+0x8>
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <GPIO_readPin+0xa>
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	89 83       	std	Y+1, r24	; 0x01
     f16:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	88 30       	cpi	r24, 0x08	; 8
     f1c:	18 f4       	brcc	.+6      	; 0xf24 <GPIO_readPin+0x1e>
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	84 30       	cpi	r24, 0x04	; 4
     f22:	10 f0       	brcs	.+4      	; 0xf28 <GPIO_readPin+0x22>
	{
		return 0;
     f24:	1d 82       	std	Y+5, r1	; 0x05
     f26:	82 c0       	rjmp	.+260    	; 0x102c <GPIO_readPin+0x126>
	}
	else{
		switch(port_num)
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	3c 83       	std	Y+4, r19	; 0x04
     f30:	2b 83       	std	Y+3, r18	; 0x03
     f32:	4b 81       	ldd	r20, Y+3	; 0x03
     f34:	5c 81       	ldd	r21, Y+4	; 0x04
     f36:	41 30       	cpi	r20, 0x01	; 1
     f38:	51 05       	cpc	r21, r1
     f3a:	79 f1       	breq	.+94     	; 0xf9a <GPIO_readPin+0x94>
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	91 05       	cpc	r25, r1
     f44:	34 f4       	brge	.+12     	; 0xf52 <GPIO_readPin+0x4c>
     f46:	2b 81       	ldd	r18, Y+3	; 0x03
     f48:	3c 81       	ldd	r19, Y+4	; 0x04
     f4a:	21 15       	cp	r18, r1
     f4c:	31 05       	cpc	r19, r1
     f4e:	69 f0       	breq	.+26     	; 0xf6a <GPIO_readPin+0x64>
     f50:	6c c0       	rjmp	.+216    	; 0x102a <GPIO_readPin+0x124>
     f52:	4b 81       	ldd	r20, Y+3	; 0x03
     f54:	5c 81       	ldd	r21, Y+4	; 0x04
     f56:	42 30       	cpi	r20, 0x02	; 2
     f58:	51 05       	cpc	r21, r1
     f5a:	b9 f1       	breq	.+110    	; 0xfca <GPIO_readPin+0xc4>
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	83 30       	cpi	r24, 0x03	; 3
     f62:	91 05       	cpc	r25, r1
     f64:	09 f4       	brne	.+2      	; 0xf68 <GPIO_readPin+0x62>
     f66:	49 c0       	rjmp	.+146    	; 0xffa <GPIO_readPin+0xf4>
     f68:	60 c0       	rjmp	.+192    	; 0x102a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(PINA & (1<<pin_num))
     f6a:	e9 e3       	ldi	r30, 0x39	; 57
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	88 2f       	mov	r24, r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	a9 01       	movw	r20, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <GPIO_readPin+0x7c>
     f7e:	55 95       	asr	r21
     f80:	47 95       	ror	r20
     f82:	8a 95       	dec	r24
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <GPIO_readPin+0x78>
     f86:	ca 01       	movw	r24, r20
     f88:	81 70       	andi	r24, 0x01	; 1
     f8a:	90 70       	andi	r25, 0x00	; 0
     f8c:	88 23       	and	r24, r24
     f8e:	19 f0       	breq	.+6      	; 0xf96 <GPIO_readPin+0x90>
			{
				return LOGIC_HIGH;
     f90:	51 e0       	ldi	r21, 0x01	; 1
     f92:	5d 83       	std	Y+5, r21	; 0x05
     f94:	4b c0       	rjmp	.+150    	; 0x102c <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
     f96:	1d 82       	std	Y+5, r1	; 0x05
     f98:	49 c0       	rjmp	.+146    	; 0x102c <GPIO_readPin+0x126>
			}

		case PORTB_ID:
			if(PINB & (1<<pin_num))
     f9a:	e6 e3       	ldi	r30, 0x36	; 54
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a9 01       	movw	r20, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <GPIO_readPin+0xac>
     fae:	55 95       	asr	r21
     fb0:	47 95       	ror	r20
     fb2:	8a 95       	dec	r24
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <GPIO_readPin+0xa8>
     fb6:	ca 01       	movw	r24, r20
     fb8:	81 70       	andi	r24, 0x01	; 1
     fba:	90 70       	andi	r25, 0x00	; 0
     fbc:	88 23       	and	r24, r24
     fbe:	19 f0       	breq	.+6      	; 0xfc6 <GPIO_readPin+0xc0>
			{
				return LOGIC_HIGH;
     fc0:	51 e0       	ldi	r21, 0x01	; 1
     fc2:	5d 83       	std	Y+5, r21	; 0x05
     fc4:	33 c0       	rjmp	.+102    	; 0x102c <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
     fc6:	1d 82       	std	Y+5, r1	; 0x05
     fc8:	31 c0       	rjmp	.+98     	; 0x102c <GPIO_readPin+0x126>
			}
		case PORTC_ID:
			if(PINC & (1<<pin_num))
     fca:	e3 e3       	ldi	r30, 0x33	; 51
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a9 01       	movw	r20, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <GPIO_readPin+0xdc>
     fde:	55 95       	asr	r21
     fe0:	47 95       	ror	r20
     fe2:	8a 95       	dec	r24
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <GPIO_readPin+0xd8>
     fe6:	ca 01       	movw	r24, r20
     fe8:	81 70       	andi	r24, 0x01	; 1
     fea:	90 70       	andi	r25, 0x00	; 0
     fec:	88 23       	and	r24, r24
     fee:	19 f0       	breq	.+6      	; 0xff6 <GPIO_readPin+0xf0>
			{
				return LOGIC_HIGH;
     ff0:	51 e0       	ldi	r21, 0x01	; 1
     ff2:	5d 83       	std	Y+5, r21	; 0x05
     ff4:	1b c0       	rjmp	.+54     	; 0x102c <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
     ff6:	1d 82       	std	Y+5, r1	; 0x05
     ff8:	19 c0       	rjmp	.+50     	; 0x102c <GPIO_readPin+0x126>
			}
			case PORTD_ID:
				if(PIND & (1<<pin_num))
     ffa:	e0 e3       	ldi	r30, 0x30	; 48
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a9 01       	movw	r20, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <GPIO_readPin+0x10c>
    100e:	55 95       	asr	r21
    1010:	47 95       	ror	r20
    1012:	8a 95       	dec	r24
    1014:	e2 f7       	brpl	.-8      	; 0x100e <GPIO_readPin+0x108>
    1016:	ca 01       	movw	r24, r20
    1018:	81 70       	andi	r24, 0x01	; 1
    101a:	90 70       	andi	r25, 0x00	; 0
    101c:	88 23       	and	r24, r24
    101e:	19 f0       	breq	.+6      	; 0x1026 <GPIO_readPin+0x120>
				{
					return LOGIC_HIGH;
    1020:	51 e0       	ldi	r21, 0x01	; 1
    1022:	5d 83       	std	Y+5, r21	; 0x05
    1024:	03 c0       	rjmp	.+6      	; 0x102c <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1026:	1d 82       	std	Y+5, r1	; 0x05
    1028:	01 c0       	rjmp	.+2      	; 0x102c <GPIO_readPin+0x126>
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <GPIO_readPin+0x12a>
		}

	}


}
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	8e 83       	std	Y+6, r24	; 0x06
    1030:	8e 81       	ldd	r24, Y+6	; 0x06
    1032:	26 96       	adiw	r28, 0x06	; 6
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <GPIO_setupPortDirection+0x6>
    104a:	00 d0       	rcall	.+0      	; 0x104c <GPIO_setupPortDirection+0x8>
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	84 30       	cpi	r24, 0x04	; 4
    1058:	90 f5       	brcc	.+100    	; 0x10be <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	3c 83       	std	Y+4, r19	; 0x04
    1062:	2b 83       	std	Y+3, r18	; 0x03
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	91 05       	cpc	r25, r1
    106c:	d1 f0       	breq	.+52     	; 0x10a2 <GPIO_setupPortDirection+0x5e>
    106e:	2b 81       	ldd	r18, Y+3	; 0x03
    1070:	3c 81       	ldd	r19, Y+4	; 0x04
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	2c f4       	brge	.+10     	; 0x1082 <GPIO_setupPortDirection+0x3e>
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	61 f0       	breq	.+24     	; 0x1098 <GPIO_setupPortDirection+0x54>
    1080:	1e c0       	rjmp	.+60     	; 0x10be <GPIO_setupPortDirection+0x7a>
    1082:	2b 81       	ldd	r18, Y+3	; 0x03
    1084:	3c 81       	ldd	r19, Y+4	; 0x04
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	81 f0       	breq	.+32     	; 0x10ac <GPIO_setupPortDirection+0x68>
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	91 05       	cpc	r25, r1
    1094:	81 f0       	breq	.+32     	; 0x10b6 <GPIO_setupPortDirection+0x72>
    1096:	13 c0       	rjmp	.+38     	; 0x10be <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1098:	ea e3       	ldi	r30, 0x3A	; 58
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	80 83       	st	Z, r24
    10a0:	0e c0       	rjmp	.+28     	; 0x10be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    10a2:	e7 e3       	ldi	r30, 0x37	; 55
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	80 83       	st	Z, r24
    10aa:	09 c0       	rjmp	.+18     	; 0x10be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    10ac:	e4 e3       	ldi	r30, 0x34	; 52
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	80 83       	st	Z, r24
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    10b6:	e1 e3       	ldi	r30, 0x31	; 49
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	80 83       	st	Z, r24
			break;
		}
	}
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <GPIO_writePort+0x6>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <GPIO_writePort+0x8>
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_num)
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	3c 83       	std	Y+4, r19	; 0x04
    10e4:	2b 83       	std	Y+3, r18	; 0x03
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	91 05       	cpc	r25, r1
    10ee:	d1 f0       	breq	.+52     	; 0x1124 <GPIO_writePort+0x58>
    10f0:	2b 81       	ldd	r18, Y+3	; 0x03
    10f2:	3c 81       	ldd	r19, Y+4	; 0x04
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	31 05       	cpc	r19, r1
    10f8:	2c f4       	brge	.+10     	; 0x1104 <GPIO_writePort+0x38>
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	61 f0       	breq	.+24     	; 0x111a <GPIO_writePort+0x4e>
    1102:	1e c0       	rjmp	.+60     	; 0x1140 <GPIO_writePort+0x74>
    1104:	2b 81       	ldd	r18, Y+3	; 0x03
    1106:	3c 81       	ldd	r19, Y+4	; 0x04
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	81 f0       	breq	.+32     	; 0x112e <GPIO_writePort+0x62>
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	83 30       	cpi	r24, 0x03	; 3
    1114:	91 05       	cpc	r25, r1
    1116:	81 f0       	breq	.+32     	; 0x1138 <GPIO_writePort+0x6c>
    1118:	13 c0       	rjmp	.+38     	; 0x1140 <GPIO_writePort+0x74>
	{
	case PORTA_ID:
		//DDRA = 0;
		PORTA = value;
    111a:	eb e3       	ldi	r30, 0x3B	; 59
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	80 83       	st	Z, r24
    1122:	0e c0       	rjmp	.+28     	; 0x1140 <GPIO_writePort+0x74>
		break;
	case PORTB_ID:
		//DDRB = 0;
		PORTB = value;
    1124:	e8 e3       	ldi	r30, 0x38	; 56
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	80 83       	st	Z, r24
    112c:	09 c0       	rjmp	.+18     	; 0x1140 <GPIO_writePort+0x74>
		break;
	case PORTC_ID:
		//DDRC = 0;
		PORTC = value;
    112e:	e5 e3       	ldi	r30, 0x35	; 53
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	80 83       	st	Z, r24
    1136:	04 c0       	rjmp	.+8      	; 0x1140 <GPIO_writePort+0x74>
		break;
	case PORTD_ID:
		//DDRD = 0;
		PORTD = value;
    1138:	e2 e3       	ldi	r30, 0x32	; 50
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	80 83       	st	Z, r24
		break;
	}


}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <GPIO_readPort+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <GPIO_readPort+0x8>
    1156:	0f 92       	push	r0
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	84 30       	cpi	r24, 0x04	; 4
    1162:	10 f0       	brcs	.+4      	; 0x1168 <GPIO_readPort+0x1a>
	{
		return 0;
    1164:	1c 82       	std	Y+4, r1	; 0x04
    1166:	34 c0       	rjmp	.+104    	; 0x11d0 <GPIO_readPort+0x82>
	}
	else{
		switch(port_num){
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3b 83       	std	Y+3, r19	; 0x03
    1170:	2a 83       	std	Y+2, r18	; 0x02
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	9b 81       	ldd	r25, Y+3	; 0x03
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	91 05       	cpc	r25, r1
    117a:	d1 f0       	breq	.+52     	; 0x11b0 <GPIO_readPort+0x62>
    117c:	2a 81       	ldd	r18, Y+2	; 0x02
    117e:	3b 81       	ldd	r19, Y+3	; 0x03
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	2c f4       	brge	.+10     	; 0x1190 <GPIO_readPort+0x42>
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	9b 81       	ldd	r25, Y+3	; 0x03
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	61 f0       	breq	.+24     	; 0x11a6 <GPIO_readPort+0x58>
    118e:	1f c0       	rjmp	.+62     	; 0x11ce <GPIO_readPort+0x80>
    1190:	2a 81       	ldd	r18, Y+2	; 0x02
    1192:	3b 81       	ldd	r19, Y+3	; 0x03
    1194:	22 30       	cpi	r18, 0x02	; 2
    1196:	31 05       	cpc	r19, r1
    1198:	81 f0       	breq	.+32     	; 0x11ba <GPIO_readPort+0x6c>
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	9b 81       	ldd	r25, Y+3	; 0x03
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	91 05       	cpc	r25, r1
    11a2:	81 f0       	breq	.+32     	; 0x11c4 <GPIO_readPort+0x76>
    11a4:	14 c0       	rjmp	.+40     	; 0x11ce <GPIO_readPort+0x80>
		case PORTA_ID:
			return(PINA);
    11a6:	e9 e3       	ldi	r30, 0x39	; 57
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	90 81       	ld	r25, Z
    11ac:	9c 83       	std	Y+4, r25	; 0x04
    11ae:	10 c0       	rjmp	.+32     	; 0x11d0 <GPIO_readPort+0x82>
		case PORTB_ID:
			return(PINB);
    11b0:	e6 e3       	ldi	r30, 0x36	; 54
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	20 81       	ld	r18, Z
    11b6:	2c 83       	std	Y+4, r18	; 0x04
    11b8:	0b c0       	rjmp	.+22     	; 0x11d0 <GPIO_readPort+0x82>
		case PORTC_ID:
			return(PINC);
    11ba:	e3 e3       	ldi	r30, 0x33	; 51
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	30 81       	ld	r19, Z
    11c0:	3c 83       	std	Y+4, r19	; 0x04
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <GPIO_readPort+0x82>
		case PORTD_ID:
			return(PIND);
    11c4:	e0 e3       	ldi	r30, 0x30	; 48
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	8c 83       	std	Y+4, r24	; 0x04
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <GPIO_readPort+0x82>
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <GPIO_readPort+0x86>

		}

	}

}
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	9d 83       	std	Y+5, r25	; 0x05
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <PWM_Timer0_Start>:
 * The function initializes timer0 control register and configures it to
 * fast non-inverted pwm mode with 8 as a pre-scaler
 *
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <PWM_Timer0_Start+0x6>
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0;
    11f4:	e2 e5       	ldi	r30, 0x52	; 82
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	10 82       	st	Z, r1
	switch(duty_cycle)
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	3b 83       	std	Y+3, r19	; 0x03
    1202:	2a 83       	std	Y+2, r18	; 0x02
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	9b 81       	ldd	r25, Y+3	; 0x03
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	31 f0       	breq	.+12     	; 0x1218 <PWM_Timer0_Start+0x32>
    120c:	2a 81       	ldd	r18, Y+2	; 0x02
    120e:	3b 81       	ldd	r19, Y+3	; 0x03
    1210:	24 36       	cpi	r18, 0x64	; 100
    1212:	31 05       	cpc	r19, r1
    1214:	29 f0       	breq	.+10     	; 0x1220 <PWM_Timer0_Start+0x3a>
    1216:	08 c0       	rjmp	.+16     	; 0x1228 <PWM_Timer0_Start+0x42>
	{
	case 0:
		/*
		 * 0% duty cycle
		 */
		OCR0 = 0;
    1218:	ec e5       	ldi	r30, 0x5C	; 92
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	10 82       	st	Z, r1
    121e:	04 c0       	rjmp	.+8      	; 0x1228 <PWM_Timer0_Start+0x42>
		break;
	case 100:
		/*
		 * 100% duty cycle
		 */
		OCR0 = 255;
    1220:	ec e5       	ldi	r30, 0x5C	; 92
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	8f ef       	ldi	r24, 0xFF	; 255
    1226:	80 83       	st	Z, r24
		break;

	}


	GPIO_setupPinDirection(PWM_T0_PORT, PWM_T0_OC0_PIN, PIN_OUTPUT);
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	63 e0       	ldi	r22, 0x03	; 3
    122c:	41 e0       	ldi	r20, 0x01	; 1
    122e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */

	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1232:	e3 e5       	ldi	r30, 0x53	; 83
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	8a e6       	ldi	r24, 0x6A	; 106
    1238:	80 83       	st	Z, r24

}
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    1246:	1f 92       	push	r1
    1248:	0f 92       	push	r0
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	0f 92       	push	r0
    124e:	11 24       	eor	r1, r1
    1250:	2f 93       	push	r18
    1252:	3f 93       	push	r19
    1254:	4f 93       	push	r20
    1256:	5f 93       	push	r21
    1258:	6f 93       	push	r22
    125a:	7f 93       	push	r23
    125c:	8f 93       	push	r24
    125e:	9f 93       	push	r25
    1260:	af 93       	push	r26
    1262:	bf 93       	push	r27
    1264:	ef 93       	push	r30
    1266:	ff 93       	push	r31
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T1 != NULL_PTR)
    1270:	80 91 8c 00 	lds	r24, 0x008C
    1274:	90 91 8d 00 	lds	r25, 0x008D
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	29 f0       	breq	.+10     	; 0x1286 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    127c:	e0 91 8c 00 	lds	r30, 0x008C
    1280:	f0 91 8d 00 	lds	r31, 0x008D
    1284:	09 95       	icall
	}
}
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	ff 91       	pop	r31
    128c:	ef 91       	pop	r30
    128e:	bf 91       	pop	r27
    1290:	af 91       	pop	r26
    1292:	9f 91       	pop	r25
    1294:	8f 91       	pop	r24
    1296:	7f 91       	pop	r23
    1298:	6f 91       	pop	r22
    129a:	5f 91       	pop	r21
    129c:	4f 91       	pop	r20
    129e:	3f 91       	pop	r19
    12a0:	2f 91       	pop	r18
    12a2:	0f 90       	pop	r0
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	0f 90       	pop	r0
    12a8:	1f 90       	pop	r1
    12aa:	18 95       	reti

000012ac <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    12ac:	1f 92       	push	r1
    12ae:	0f 92       	push	r0
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	0f 92       	push	r0
    12b4:	11 24       	eor	r1, r1
    12b6:	2f 93       	push	r18
    12b8:	3f 93       	push	r19
    12ba:	4f 93       	push	r20
    12bc:	5f 93       	push	r21
    12be:	6f 93       	push	r22
    12c0:	7f 93       	push	r23
    12c2:	8f 93       	push	r24
    12c4:	9f 93       	push	r25
    12c6:	af 93       	push	r26
    12c8:	bf 93       	push	r27
    12ca:	ef 93       	push	r30
    12cc:	ff 93       	push	r31
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T1 != NULL_PTR)
    12d6:	80 91 8c 00 	lds	r24, 0x008C
    12da:	90 91 8d 00 	lds	r25, 0x008D
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	29 f0       	breq	.+10     	; 0x12ec <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    12e2:	e0 91 8c 00 	lds	r30, 0x008C
    12e6:	f0 91 8d 00 	lds	r31, 0x008D
    12ea:	09 95       	icall
	}
}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	ff 91       	pop	r31
    12f2:	ef 91       	pop	r30
    12f4:	bf 91       	pop	r27
    12f6:	af 91       	pop	r26
    12f8:	9f 91       	pop	r25
    12fa:	8f 91       	pop	r24
    12fc:	7f 91       	pop	r23
    12fe:	6f 91       	pop	r22
    1300:	5f 91       	pop	r21
    1302:	4f 91       	pop	r20
    1304:	3f 91       	pop	r19
    1306:	2f 91       	pop	r18
    1308:	0f 90       	pop	r0
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	0f 90       	pop	r0
    130e:	1f 90       	pop	r1
    1310:	18 95       	reti

00001312 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1312:	1f 92       	push	r1
    1314:	0f 92       	push	r0
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	0f 92       	push	r0
    131a:	11 24       	eor	r1, r1
    131c:	2f 93       	push	r18
    131e:	3f 93       	push	r19
    1320:	4f 93       	push	r20
    1322:	5f 93       	push	r21
    1324:	6f 93       	push	r22
    1326:	7f 93       	push	r23
    1328:	8f 93       	push	r24
    132a:	9f 93       	push	r25
    132c:	af 93       	push	r26
    132e:	bf 93       	push	r27
    1330:	ef 93       	push	r30
    1332:	ff 93       	push	r31
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T1 != NULL_PTR)
    133c:	80 91 8c 00 	lds	r24, 0x008C
    1340:	90 91 8d 00 	lds	r25, 0x008D
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	29 f0       	breq	.+10     	; 0x1352 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1348:	e0 91 8c 00 	lds	r30, 0x008C
    134c:	f0 91 8d 00 	lds	r31, 0x008D
    1350:	09 95       	icall
	}
}
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	ff 91       	pop	r31
    1358:	ef 91       	pop	r30
    135a:	bf 91       	pop	r27
    135c:	af 91       	pop	r26
    135e:	9f 91       	pop	r25
    1360:	8f 91       	pop	r24
    1362:	7f 91       	pop	r23
    1364:	6f 91       	pop	r22
    1366:	5f 91       	pop	r21
    1368:	4f 91       	pop	r20
    136a:	3f 91       	pop	r19
    136c:	2f 91       	pop	r18
    136e:	0f 90       	pop	r0
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	0f 90       	pop	r0
    1374:	1f 90       	pop	r1
    1376:	18 95       	reti

00001378 <Timer1_init>:
 * 4. Setup compare value if required
 * 5. Set PWM Pins as output if required
 * 6. Enable Interrupts
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	00 d0       	rcall	.+0      	; 0x137e <Timer1_init+0x6>
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A=(TCCR1A & 0xFC)|(Config_Ptr->mode & 0x03); //configure timer mode
    1386:	af e4       	ldi	r26, 0x4F	; 79
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	ef e4       	ldi	r30, 0x4F	; 79
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	98 2f       	mov	r25, r24
    1392:	9c 7f       	andi	r25, 0xFC	; 252
    1394:	e9 81       	ldd	r30, Y+1	; 0x01
    1396:	fa 81       	ldd	r31, Y+2	; 0x02
    1398:	85 81       	ldd	r24, Z+5	; 0x05
    139a:	83 70       	andi	r24, 0x03	; 3
    139c:	89 2b       	or	r24, r25
    139e:	8c 93       	st	X, r24
	TCCR1B=(TCCR1B & 0XE7)|((Config_Ptr->mode & 0x0C)<<1);
    13a0:	ae e4       	ldi	r26, 0x4E	; 78
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	ee e4       	ldi	r30, 0x4E	; 78
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	28 2f       	mov	r18, r24
    13ac:	27 7e       	andi	r18, 0xE7	; 231
    13ae:	e9 81       	ldd	r30, Y+1	; 0x01
    13b0:	fa 81       	ldd	r31, Y+2	; 0x02
    13b2:	85 81       	ldd	r24, Z+5	; 0x05
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	8c 70       	andi	r24, 0x0C	; 12
    13ba:	90 70       	andi	r25, 0x00	; 0
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	82 2b       	or	r24, r18
    13c2:	8c 93       	st	X, r24

	TCCR1B=(TCCR1B & 0xF8)|(Config_Ptr->prescaler & 0x07); //setup prescaler
    13c4:	ae e4       	ldi	r26, 0x4E	; 78
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	ee e4       	ldi	r30, 0x4E	; 78
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	98 2f       	mov	r25, r24
    13d0:	98 7f       	andi	r25, 0xF8	; 248
    13d2:	e9 81       	ldd	r30, Y+1	; 0x01
    13d4:	fa 81       	ldd	r31, Y+2	; 0x02
    13d6:	84 81       	ldd	r24, Z+4	; 0x04
    13d8:	87 70       	andi	r24, 0x07	; 7
    13da:	89 2b       	or	r24, r25
    13dc:	8c 93       	st	X, r24

	TCNT1=Config_Ptr->initial_value; //define initial value
    13de:	ac e4       	ldi	r26, 0x4C	; 76
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e9 81       	ldd	r30, Y+1	; 0x01
    13e4:	fa 81       	ldd	r31, Y+2	; 0x02
    13e6:	80 81       	ld	r24, Z
    13e8:	91 81       	ldd	r25, Z+1	; 0x01
    13ea:	11 96       	adiw	r26, 0x01	; 1
    13ec:	9c 93       	st	X, r25
    13ee:	8e 93       	st	-X, r24


	//define pwm pin as output
	if((Config_Ptr->mode!=NORM_T1)&&(Config_Ptr->mode!=CTC_OCR_T1)&&(Config_Ptr->mode!=CTC_ICR_T1))
    13f0:	e9 81       	ldd	r30, Y+1	; 0x01
    13f2:	fa 81       	ldd	r31, Y+2	; 0x02
    13f4:	85 81       	ldd	r24, Z+5	; 0x05
    13f6:	88 23       	and	r24, r24
    13f8:	f9 f0       	breq	.+62     	; 0x1438 <Timer1_init+0xc0>
    13fa:	e9 81       	ldd	r30, Y+1	; 0x01
    13fc:	fa 81       	ldd	r31, Y+2	; 0x02
    13fe:	85 81       	ldd	r24, Z+5	; 0x05
    1400:	84 30       	cpi	r24, 0x04	; 4
    1402:	d1 f0       	breq	.+52     	; 0x1438 <Timer1_init+0xc0>
    1404:	e9 81       	ldd	r30, Y+1	; 0x01
    1406:	fa 81       	ldd	r31, Y+2	; 0x02
    1408:	85 81       	ldd	r24, Z+5	; 0x05
    140a:	8c 30       	cpi	r24, 0x0C	; 12
    140c:	a9 f0       	breq	.+42     	; 0x1438 <Timer1_init+0xc0>
	{
		if(Config_Ptr->index==TIMER1A)
    140e:	e9 81       	ldd	r30, Y+1	; 0x01
    1410:	fa 81       	ldd	r31, Y+2	; 0x02
    1412:	86 81       	ldd	r24, Z+6	; 0x06
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	31 f4       	brne	.+12     	; 0x1424 <Timer1_init+0xac>
			{
			GPIO_setupPinDirection(PWM_T1A_ENABLE_PORT_ID,PWM_T1A_ENABLE_PIN_ID,PIN_OUTPUT);
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	65 e0       	ldi	r22, 0x05	; 5
    141c:	41 e0       	ldi	r20, 0x01	; 1
    141e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1422:	0a c0       	rjmp	.+20     	; 0x1438 <Timer1_init+0xc0>
			}
			else if(Config_Ptr->index==TIMER1B)
    1424:	e9 81       	ldd	r30, Y+1	; 0x01
    1426:	fa 81       	ldd	r31, Y+2	; 0x02
    1428:	86 81       	ldd	r24, Z+6	; 0x06
    142a:	82 30       	cpi	r24, 0x02	; 2
    142c:	29 f4       	brne	.+10     	; 0x1438 <Timer1_init+0xc0>
			{
				GPIO_setupPinDirection(PWM_T1B_ENABLE_PORT_ID,PWM_T1B_ENABLE_PIN_ID,PIN_OUTPUT);
    142e:	83 e0       	ldi	r24, 0x03	; 3
    1430:	64 e0       	ldi	r22, 0x04	; 4
    1432:	41 e0       	ldi	r20, 0x01	; 1
    1434:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			}
	}

	if(Config_Ptr->mode!=NORM_T1)
    1438:	e9 81       	ldd	r30, Y+1	; 0x01
    143a:	fa 81       	ldd	r31, Y+2	; 0x02
    143c:	85 81       	ldd	r24, Z+5	; 0x05
    143e:	88 23       	and	r24, r24
    1440:	09 f4       	brne	.+2      	; 0x1444 <Timer1_init+0xcc>
    1442:	59 c0       	rjmp	.+178    	; 0x14f6 <Timer1_init+0x17e>
	{
		if(Config_Ptr->index==TIMER1A)
    1444:	e9 81       	ldd	r30, Y+1	; 0x01
    1446:	fa 81       	ldd	r31, Y+2	; 0x02
    1448:	86 81       	ldd	r24, Z+6	; 0x06
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	41 f5       	brne	.+80     	; 0x149e <Timer1_init+0x126>
			{
				TCCR1A=(TCCR1A & 0x3F)|((Config_Ptr->comp_match & 0x03)<<6); //set compare match event
    144e:	af e4       	ldi	r26, 0x4F	; 79
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ef e4       	ldi	r30, 0x4F	; 79
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	28 2f       	mov	r18, r24
    145a:	2f 73       	andi	r18, 0x3F	; 63
    145c:	e9 81       	ldd	r30, Y+1	; 0x01
    145e:	fa 81       	ldd	r31, Y+2	; 0x02
    1460:	87 81       	ldd	r24, Z+7	; 0x07
    1462:	88 2f       	mov	r24, r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	00 24       	eor	r0, r0
    1468:	96 95       	lsr	r25
    146a:	87 95       	ror	r24
    146c:	07 94       	ror	r0
    146e:	96 95       	lsr	r25
    1470:	87 95       	ror	r24
    1472:	07 94       	ror	r0
    1474:	98 2f       	mov	r25, r24
    1476:	80 2d       	mov	r24, r0
    1478:	82 2b       	or	r24, r18
    147a:	8c 93       	st	X, r24
				OCR1A=Config_Ptr->compare_value; //define compare value
    147c:	aa e4       	ldi	r26, 0x4A	; 74
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e9 81       	ldd	r30, Y+1	; 0x01
    1482:	fa 81       	ldd	r31, Y+2	; 0x02
    1484:	82 81       	ldd	r24, Z+2	; 0x02
    1486:	93 81       	ldd	r25, Z+3	; 0x03
    1488:	11 96       	adiw	r26, 0x01	; 1
    148a:	9c 93       	st	X, r25
    148c:	8e 93       	st	-X, r24
				SET_BIT(TIMSK,OCIE1A); //enable compare interrupt
    148e:	a9 e5       	ldi	r26, 0x59	; 89
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e9 e5       	ldi	r30, 0x59	; 89
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	80 61       	ori	r24, 0x10	; 16
    149a:	8c 93       	st	X, r24
    149c:	33 c0       	rjmp	.+102    	; 0x1504 <Timer1_init+0x18c>
			}
			else if(Config_Ptr->index==TIMER1B)
    149e:	e9 81       	ldd	r30, Y+1	; 0x01
    14a0:	fa 81       	ldd	r31, Y+2	; 0x02
    14a2:	86 81       	ldd	r24, Z+6	; 0x06
    14a4:	82 30       	cpi	r24, 0x02	; 2
    14a6:	71 f5       	brne	.+92     	; 0x1504 <Timer1_init+0x18c>
			{
				TCCR1A=(TCCR1A & 0xCF)|((Config_Ptr->comp_match & 0x03)<<4); //set compare match event
    14a8:	af e4       	ldi	r26, 0x4F	; 79
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ef e4       	ldi	r30, 0x4F	; 79
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	28 2f       	mov	r18, r24
    14b4:	2f 7c       	andi	r18, 0xCF	; 207
    14b6:	e9 81       	ldd	r30, Y+1	; 0x01
    14b8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ba:	87 81       	ldd	r24, Z+7	; 0x07
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	83 70       	andi	r24, 0x03	; 3
    14c2:	90 70       	andi	r25, 0x00	; 0
    14c4:	82 95       	swap	r24
    14c6:	92 95       	swap	r25
    14c8:	90 7f       	andi	r25, 0xF0	; 240
    14ca:	98 27       	eor	r25, r24
    14cc:	80 7f       	andi	r24, 0xF0	; 240
    14ce:	98 27       	eor	r25, r24
    14d0:	82 2b       	or	r24, r18
    14d2:	8c 93       	st	X, r24
				OCR1B=Config_Ptr->compare_value; //define compare value
    14d4:	a8 e4       	ldi	r26, 0x48	; 72
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e9 81       	ldd	r30, Y+1	; 0x01
    14da:	fa 81       	ldd	r31, Y+2	; 0x02
    14dc:	82 81       	ldd	r24, Z+2	; 0x02
    14de:	93 81       	ldd	r25, Z+3	; 0x03
    14e0:	11 96       	adiw	r26, 0x01	; 1
    14e2:	9c 93       	st	X, r25
    14e4:	8e 93       	st	-X, r24
				SET_BIT(TIMSK,OCIE1B); //enable compare interrupt
    14e6:	a9 e5       	ldi	r26, 0x59	; 89
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e9 e5       	ldi	r30, 0x59	; 89
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	88 60       	ori	r24, 0x08	; 8
    14f2:	8c 93       	st	X, r24
    14f4:	07 c0       	rjmp	.+14     	; 0x1504 <Timer1_init+0x18c>
			}
	}
	else
	{
		SET_BIT(TIMSK,TOIE1); //enable overflow interrupt
    14f6:	a9 e5       	ldi	r26, 0x59	; 89
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e9 e5       	ldi	r30, 0x59	; 89
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	84 60       	ori	r24, 0x04	; 4
    1502:	8c 93       	st	X, r24
	}
}
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <Timer1_deInit>:
/*
 * Description :
 * Functional responsible for Deinitialization of Timer 1 by clearing all registers
 */
void Timer1_deInit(void)
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    1516:	ef e4       	ldi	r30, 0x4F	; 79
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	10 82       	st	Z, r1
	TCCR1B=0;
    151c:	ee e4       	ldi	r30, 0x4E	; 78
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	10 82       	st	Z, r1
	TCNT1=0;
    1522:	ec e4       	ldi	r30, 0x4C	; 76
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	11 82       	std	Z+1, r1	; 0x01
    1528:	10 82       	st	Z, r1
	OCR1A=0;
    152a:	ea e4       	ldi	r30, 0x4A	; 74
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	11 82       	std	Z+1, r1	; 0x01
    1530:	10 82       	st	Z, r1
	OCR1B=0;
    1532:	e8 e4       	ldi	r30, 0x48	; 72
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	11 82       	std	Z+1, r1	; 0x01
    1538:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE1A);
    153a:	a9 e5       	ldi	r26, 0x59	; 89
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e9 e5       	ldi	r30, 0x59	; 89
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	8f 7e       	andi	r24, 0xEF	; 239
    1546:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE1B);
    1548:	a9 e5       	ldi	r26, 0x59	; 89
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e9 e5       	ldi	r30, 0x59	; 89
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	87 7f       	andi	r24, 0xF7	; 247
    1554:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE1);
    1556:	a9 e5       	ldi	r26, 0x59	; 89
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e9 e5       	ldi	r30, 0x59	; 89
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	8b 7f       	andi	r24, 0xFB	; 251
    1562:	8c 93       	st	X, r24
}
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <Timer1_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <Timer1_setCallBack+0x6>
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	9a 83       	std	Y+2, r25	; 0x02
    1576:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_T1 = a_ptr;
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	9a 81       	ldd	r25, Y+2	; 0x02
    157c:	90 93 8d 00 	sts	0x008D, r25
    1580:	80 93 8c 00 	sts	0x008C, r24
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <Timer1_pwmAdjust>:

/*
 * Description: Adjust PWM compare value if input is percentage
 */
void Timer1_pwmAdjust(uint16 duty_cycle)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	2a 97       	sbiw	r28, 0x0a	; 10
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	9a 87       	std	Y+10, r25	; 0x0a
    15a4:	89 87       	std	Y+9, r24	; 0x09
	duty_cycle  = (uint16)(((uint32)65535*duty_cycle)/100); //define compare value
    15a6:	89 85       	ldd	r24, Y+9	; 0x09
    15a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15aa:	cc 01       	movw	r24, r24
    15ac:	a0 e0       	ldi	r26, 0x00	; 0
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	2f ef       	ldi	r18, 0xFF	; 255
    15b2:	3f ef       	ldi	r19, 0xFF	; 255
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	bc 01       	movw	r22, r24
    15ba:	cd 01       	movw	r24, r26
    15bc:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__mulsi3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	24 e6       	ldi	r18, 0x64	; 100
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	0e 94 90 1b 	call	0x3720	; 0x3720 <__udivmodsi4>
    15d4:	da 01       	movw	r26, r20
    15d6:	c9 01       	movw	r24, r18
    15d8:	9a 87       	std	Y+10, r25	; 0x0a
    15da:	89 87       	std	Y+9, r24	; 0x09
	Timer1_ConfigType ConfigPTR={0,duty_cycle,PS_8_T1,FAST_PWM_OCR_T1,CLEAR_T1}; //initialize timer as desired
    15dc:	88 e0       	ldi	r24, 0x08	; 8
    15de:	fe 01       	movw	r30, r28
    15e0:	31 96       	adiw	r30, 0x01	; 1
    15e2:	df 01       	movw	r26, r30
    15e4:	98 2f       	mov	r25, r24
    15e6:	1d 92       	st	X+, r1
    15e8:	9a 95       	dec	r25
    15ea:	e9 f7       	brne	.-6      	; 0x15e6 <Timer1_pwmAdjust+0x58>
    15ec:	89 85       	ldd	r24, Y+9	; 0x09
    15ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f0:	9c 83       	std	Y+4, r25	; 0x04
    15f2:	8b 83       	std	Y+3, r24	; 0x03
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	8d 83       	std	Y+5, r24	; 0x05
    15f8:	8f e0       	ldi	r24, 0x0F	; 15
    15fa:	8e 83       	std	Y+6, r24	; 0x06
    15fc:	82 e0       	ldi	r24, 0x02	; 2
    15fe:	8f 83       	std	Y+7, r24	; 0x07
	Timer1_init(&ConfigPTR);
    1600:	ce 01       	movw	r24, r28
    1602:	01 96       	adiw	r24, 0x01	; 1
    1604:	0e 94 bc 09 	call	0x1378	; 0x1378 <Timer1_init>
}
    1608:	2a 96       	adiw	r28, 0x0a	; 10
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <TWI_init>:
#include "twi.h"
#include "../common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	00 d0       	rcall	.+0      	; 0x1620 <TWI_init+0x6>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = (Config_Ptr->bit_rate);
    1628:	a0 e2       	ldi	r26, 0x20	; 32
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e9 81       	ldd	r30, Y+1	; 0x01
    162e:	fa 81       	ldd	r31, Y+2	; 0x02
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	8c 93       	st	X, r24
	TWSR = 0x00;
    1634:	e1 e2       	ldi	r30, 0x21	; 33
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->address); //0b00000010; // my address = 0x01 :)
    163a:	a2 e2       	ldi	r26, 0x22	; 34
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e9 81       	ldd	r30, Y+1	; 0x01
    1640:	fa 81       	ldd	r31, Y+2	; 0x02
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1648:	e6 e5       	ldi	r30, 0x56	; 86
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	84 e0       	ldi	r24, 0x04	; 4
    164e:	80 83       	st	Z, r24
}
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <TWI_start>:

void TWI_start(void)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1662:	e6 e5       	ldi	r30, 0x56	; 86
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	84 ea       	ldi	r24, 0xA4	; 164
    1668:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    166a:	e6 e5       	ldi	r30, 0x56	; 86
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	88 23       	and	r24, r24
    1672:	dc f7       	brge	.-10     	; 0x166a <TWI_start+0x10>
}
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <TWI_stop>:

void TWI_stop(void)
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1682:	e6 e5       	ldi	r30, 0x56	; 86
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	84 e9       	ldi	r24, 0x94	; 148
    1688:	80 83       	st	Z, r24
}
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	0f 92       	push	r0
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    169c:	e3 e2       	ldi	r30, 0x23	; 35
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    16a4:	e6 e5       	ldi	r30, 0x56	; 86
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	84 e8       	ldi	r24, 0x84	; 132
    16aa:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    16ac:	e6 e5       	ldi	r30, 0x56	; 86
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	88 23       	and	r24, r24
    16b4:	dc f7       	brge	.-10     	; 0x16ac <TWI_writeByte+0x1c>
}
    16b6:	0f 90       	pop	r0
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    16c6:	e6 e5       	ldi	r30, 0x56	; 86
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	84 ec       	ldi	r24, 0xC4	; 196
    16cc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    16ce:	e6 e5       	ldi	r30, 0x56	; 86
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	88 23       	and	r24, r24
    16d6:	dc f7       	brge	.-10     	; 0x16ce <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    16d8:	e3 e2       	ldi	r30, 0x23	; 35
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
}
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    16ec:	e6 e5       	ldi	r30, 0x56	; 86
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	84 e8       	ldi	r24, 0x84	; 132
    16f2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    16f4:	e6 e5       	ldi	r30, 0x56	; 86
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	88 23       	and	r24, r24
    16fc:	dc f7       	brge	.-10     	; 0x16f4 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    16fe:	e3 e2       	ldi	r30, 0x23	; 35
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
}
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	0f 92       	push	r0
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1714:	e1 e2       	ldi	r30, 0x21	; 33
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	88 7f       	andi	r24, 0xF8	; 248
    171c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    171e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1720:	0f 90       	pop	r0
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <UART_init>:
 * Configures frame format
 * enables UART
 * Sets up baud rate
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	2a 97       	sbiw	r28, 0x0a	; 10
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	9c 83       	std	Y+4, r25	; 0x04
    173e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1740:	1a 82       	std	Y+2, r1	; 0x02
    1742:	19 82       	std	Y+1, r1	; 0x01

	/* Double transmission speed for asynchronous mode */
	UCSRA = (1<<U2X);
    1744:	eb e2       	ldi	r30, 0x2B	; 43
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	82 e0       	ldi	r24, 0x02	; 2
    174a:	80 83       	st	Z, r24


	/*Enable transmit and receive for the UART*/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    174c:	ea e2       	ldi	r30, 0x2A	; 42
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	88 e1       	ldi	r24, 0x18	; 24
    1752:	80 83       	st	Z, r24

	/*URSEL bit is set to 1 to specify that we are working on UCRSC to UBRRH*/
	UCSRC_R.Bits.URSEL_Val = 1;
    1754:	e0 e4       	ldi	r30, 0x40	; 64
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	80 68       	ori	r24, 0x80	; 128
    175c:	80 83       	st	Z, r24

	switch(Config_Ptr->bit_data)
    175e:	eb 81       	ldd	r30, Y+3	; 0x03
    1760:	fc 81       	ldd	r31, Y+4	; 0x04
    1762:	80 81       	ld	r24, Z
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	3a 87       	std	Y+10, r19	; 0x0a
    176a:	29 87       	std	Y+9, r18	; 0x09
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	82 30       	cpi	r24, 0x02	; 2
    1772:	91 05       	cpc	r25, r1
    1774:	a9 f1       	breq	.+106    	; 0x17e0 <UART_init+0xb8>
    1776:	29 85       	ldd	r18, Y+9	; 0x09
    1778:	3a 85       	ldd	r19, Y+10	; 0x0a
    177a:	23 30       	cpi	r18, 0x03	; 3
    177c:	31 05       	cpc	r19, r1
    177e:	54 f4       	brge	.+20     	; 0x1794 <UART_init+0x6c>
    1780:	89 85       	ldd	r24, Y+9	; 0x09
    1782:	9a 85       	ldd	r25, Y+10	; 0x0a
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	89 f0       	breq	.+34     	; 0x17aa <UART_init+0x82>
    1788:	29 85       	ldd	r18, Y+9	; 0x09
    178a:	3a 85       	ldd	r19, Y+10	; 0x0a
    178c:	21 30       	cpi	r18, 0x01	; 1
    178e:	31 05       	cpc	r19, r1
    1790:	c9 f0       	breq	.+50     	; 0x17c4 <UART_init+0x9c>
    1792:	4d c0       	rjmp	.+154    	; 0x182e <UART_init+0x106>
    1794:	89 85       	ldd	r24, Y+9	; 0x09
    1796:	9a 85       	ldd	r25, Y+10	; 0x0a
    1798:	83 30       	cpi	r24, 0x03	; 3
    179a:	91 05       	cpc	r25, r1
    179c:	79 f1       	breq	.+94     	; 0x17fc <UART_init+0xd4>
    179e:	29 85       	ldd	r18, Y+9	; 0x09
    17a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    17a2:	24 30       	cpi	r18, 0x04	; 4
    17a4:	31 05       	cpc	r19, r1
    17a6:	b9 f1       	breq	.+110    	; 0x1816 <UART_init+0xee>
    17a8:	42 c0       	rjmp	.+132    	; 0x182e <UART_init+0x106>
	{
	case FIVE_BIT_DATA_MODE:
		UCSRC_R.Bits.UCSZ1To0_Val = 0;
    17aa:	e0 e4       	ldi	r30, 0x40	; 64
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	89 7f       	andi	r24, 0xF9	; 249
    17b2:	80 83       	st	Z, r24
		UCSRB &= ~(1<<UCSZ2);
    17b4:	aa e2       	ldi	r26, 0x2A	; 42
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	ea e2       	ldi	r30, 0x2A	; 42
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	8b 7f       	andi	r24, 0xFB	; 251
    17c0:	8c 93       	st	X, r24
    17c2:	35 c0       	rjmp	.+106    	; 0x182e <UART_init+0x106>
		break;
	case SIX_BIT_DATA_MODE:
		UCSRC_R.Bits.UCSZ1To0_Val = 1;
    17c4:	e0 e4       	ldi	r30, 0x40	; 64
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	89 7f       	andi	r24, 0xF9	; 249
    17cc:	82 60       	ori	r24, 0x02	; 2
    17ce:	80 83       	st	Z, r24
		UCSRB &= ~(1<<UCSZ2);
    17d0:	aa e2       	ldi	r26, 0x2A	; 42
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	ea e2       	ldi	r30, 0x2A	; 42
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	8b 7f       	andi	r24, 0xFB	; 251
    17dc:	8c 93       	st	X, r24
    17de:	27 c0       	rjmp	.+78     	; 0x182e <UART_init+0x106>
		break;
	case SEVEN_BIT_DATA_MODE:
		UCSRC_R.Bits.UCSZ1To0_Val = 2;
    17e0:	e0 e4       	ldi	r30, 0x40	; 64
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	89 7f       	andi	r24, 0xF9	; 249
    17e8:	84 60       	ori	r24, 0x04	; 4
    17ea:	80 83       	st	Z, r24
		UCSRB &= ~(1<<UCSZ2);
    17ec:	aa e2       	ldi	r26, 0x2A	; 42
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	ea e2       	ldi	r30, 0x2A	; 42
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	8b 7f       	andi	r24, 0xFB	; 251
    17f8:	8c 93       	st	X, r24
    17fa:	19 c0       	rjmp	.+50     	; 0x182e <UART_init+0x106>
		break;
	case EIGHT_BIT_DATA_MODE:
		UCSRC_R.Bits.UCSZ1To0_Val = 3;
    17fc:	e0 e4       	ldi	r30, 0x40	; 64
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	86 60       	ori	r24, 0x06	; 6
    1804:	80 83       	st	Z, r24
		UCSRB &= ~(1<<UCSZ2);
    1806:	aa e2       	ldi	r26, 0x2A	; 42
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	ea e2       	ldi	r30, 0x2A	; 42
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	8b 7f       	andi	r24, 0xFB	; 251
    1812:	8c 93       	st	X, r24
    1814:	0c c0       	rjmp	.+24     	; 0x182e <UART_init+0x106>
		break;
	case NINE_BIT_DATA_MODE:
		UCSRC_R.Bits.UCSZ1To0_Val = 3;
    1816:	e0 e4       	ldi	r30, 0x40	; 64
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	86 60       	ori	r24, 0x06	; 6
    181e:	80 83       	st	Z, r24
		UCSRB = UCSRB | (1<<UCSZ2);
    1820:	aa e2       	ldi	r26, 0x2A	; 42
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	ea e2       	ldi	r30, 0x2A	; 42
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	84 60       	ori	r24, 0x04	; 4
    182c:	8c 93       	st	X, r24
		break;
	}

	switch(Config_Ptr->parity)
    182e:	eb 81       	ldd	r30, Y+3	; 0x03
    1830:	fc 81       	ldd	r31, Y+4	; 0x04
    1832:	81 81       	ldd	r24, Z+1	; 0x01
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	38 87       	std	Y+8, r19	; 0x08
    183a:	2f 83       	std	Y+7, r18	; 0x07
    183c:	8f 81       	ldd	r24, Y+7	; 0x07
    183e:	98 85       	ldd	r25, Y+8	; 0x08
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	91 05       	cpc	r25, r1
    1844:	79 f0       	breq	.+30     	; 0x1864 <UART_init+0x13c>
    1846:	2f 81       	ldd	r18, Y+7	; 0x07
    1848:	38 85       	ldd	r19, Y+8	; 0x08
    184a:	22 30       	cpi	r18, 0x02	; 2
    184c:	31 05       	cpc	r19, r1
    184e:	89 f0       	breq	.+34     	; 0x1872 <UART_init+0x14a>
    1850:	8f 81       	ldd	r24, Y+7	; 0x07
    1852:	98 85       	ldd	r25, Y+8	; 0x08
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	91 f4       	brne	.+36     	; 0x187c <UART_init+0x154>
	{
	case DISABLED_PARITY_MODE:
		UCSRC_R.Bits.UPM1To0_Val = 0;
    1858:	e0 e4       	ldi	r30, 0x40	; 64
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	8f 7c       	andi	r24, 0xCF	; 207
    1860:	80 83       	st	Z, r24
    1862:	0c c0       	rjmp	.+24     	; 0x187c <UART_init+0x154>
		break;
	case EVEN_PARITY_MODE:
		UCSRC_R.Bits.UPM1To0_Val = 2;
    1864:	e0 e4       	ldi	r30, 0x40	; 64
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	8f 7c       	andi	r24, 0xCF	; 207
    186c:	80 62       	ori	r24, 0x20	; 32
    186e:	80 83       	st	Z, r24
    1870:	05 c0       	rjmp	.+10     	; 0x187c <UART_init+0x154>
		break;
	case ODD_PARITY_MODE:
		UCSRC_R.Bits.UPM1To0_Val = 3;
    1872:	e0 e4       	ldi	r30, 0x40	; 64
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	80 63       	ori	r24, 0x30	; 48
    187a:	80 83       	st	Z, r24
		break;
	}

	switch(Config_Ptr->stop_bit)
    187c:	eb 81       	ldd	r30, Y+3	; 0x03
    187e:	fc 81       	ldd	r31, Y+4	; 0x04
    1880:	82 81       	ldd	r24, Z+2	; 0x02
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	3e 83       	std	Y+6, r19	; 0x06
    1888:	2d 83       	std	Y+5, r18	; 0x05
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	9e 81       	ldd	r25, Y+6	; 0x06
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	31 f0       	breq	.+12     	; 0x189e <UART_init+0x176>
    1892:	2d 81       	ldd	r18, Y+5	; 0x05
    1894:	3e 81       	ldd	r19, Y+6	; 0x06
    1896:	21 30       	cpi	r18, 0x01	; 1
    1898:	31 05       	cpc	r19, r1
    189a:	39 f0       	breq	.+14     	; 0x18aa <UART_init+0x182>
    189c:	0b c0       	rjmp	.+22     	; 0x18b4 <UART_init+0x18c>
	{
	case ONE_BIT_MODE:
		UCSRC_R.Bits.USBS_Val = 0;
    189e:	e0 e4       	ldi	r30, 0x40	; 64
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	87 7f       	andi	r24, 0xF7	; 247
    18a6:	80 83       	st	Z, r24
    18a8:	05 c0       	rjmp	.+10     	; 0x18b4 <UART_init+0x18c>
		break;
	case TWO_BIT_MODE:
		UCSRC_R.Bits.USBS_Val = 1;
    18aa:	e0 e4       	ldi	r30, 0x40	; 64
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	88 60       	ori	r24, 0x08	; 8
    18b2:	80 83       	st	Z, r24
		break;


	}
	UCSRC_R.Bits.UCPOL_Val = 0;
    18b4:	e0 e4       	ldi	r30, 0x40	; 64
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	8e 7f       	andi	r24, 0xFE	; 254
    18bc:	80 83       	st	Z, r24
	UCSRC_R.Bits.UMSEL_Val = 0;
    18be:	e0 e4       	ldi	r30, 0x40	; 64
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	8f 7b       	andi	r24, 0xBF	; 191
    18c6:	80 83       	st	Z, r24

	/*
	 * URSEL = 1
	 * UCSZ1:0 = 11 for enabling 8-bit mode
	 */
	ubrr_value = (uint16)(((F_CPU/((Config_Ptr->baud_rate) * 8UL)))-1);
    18c8:	eb 81       	ldd	r30, Y+3	; 0x03
    18ca:	fc 81       	ldd	r31, Y+4	; 0x04
    18cc:	83 81       	ldd	r24, Z+3	; 0x03
    18ce:	94 81       	ldd	r25, Z+4	; 0x04
    18d0:	a5 81       	ldd	r26, Z+5	; 0x05
    18d2:	b6 81       	ldd	r27, Z+6	; 0x06
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	aa 1f       	adc	r26, r26
    18da:	bb 1f       	adc	r27, r27
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	aa 1f       	adc	r26, r26
    18e2:	bb 1f       	adc	r27, r27
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	aa 1f       	adc	r26, r26
    18ea:	bb 1f       	adc	r27, r27
    18ec:	9c 01       	movw	r18, r24
    18ee:	ad 01       	movw	r20, r26
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	92 e1       	ldi	r25, 0x12	; 18
    18f4:	aa e7       	ldi	r26, 0x7A	; 122
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	bc 01       	movw	r22, r24
    18fa:	cd 01       	movw	r24, r26
    18fc:	0e 94 90 1b 	call	0x3720	; 0x3720 <__udivmodsi4>
    1900:	da 01       	movw	r26, r20
    1902:	c9 01       	movw	r24, r18
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	9a 83       	std	Y+2, r25	; 0x02
    1908:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = ubrr_value>>8;
    190a:	e0 e4       	ldi	r30, 0x40	; 64
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	9a 81       	ldd	r25, Y+2	; 0x02
    1912:	89 2f       	mov	r24, r25
    1914:	99 27       	eor	r25, r25
    1916:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1918:	e9 e2       	ldi	r30, 0x29	; 41
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	80 83       	st	Z, r24
}
    1920:	2a 96       	adiw	r28, 0x0a	; 10
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <UART_sendByte>:
/*
 * Description:
 * Send byte to another UART device
 */
void UART_sendByte(const uint8 data)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	0f 92       	push	r0
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * wait for the data buffer to be empty
	 * so we can send a byte of data
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    193e:	eb e2       	ldi	r30, 0x2B	; 43
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	88 2f       	mov	r24, r24
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	80 72       	andi	r24, 0x20	; 32
    194a:	90 70       	andi	r25, 0x00	; 0
    194c:	00 97       	sbiw	r24, 0x00	; 0
    194e:	b9 f3       	breq	.-18     	; 0x193e <UART_sendByte+0xc>
	UDR = data;
    1950:	ec e2       	ldi	r30, 0x2C	; 44
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	80 83       	st	Z, r24
}
    1958:	0f 90       	pop	r0
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <UART_receiveByte>:
/*
 * Description:
 * Receive byte from another UART device
 */
uint8 UART_receiveByte(void)
{
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    1968:	eb e2       	ldi	r30, 0x2B	; 43
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	88 23       	and	r24, r24
    1970:	dc f7       	brge	.-10     	; 0x1968 <UART_receiveByte+0x8>
	return UDR;
    1972:	ec e2       	ldi	r30, 0x2C	; 44
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z

}
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	00 d0       	rcall	.+0      	; 0x1984 <UART_sendString+0x6>
    1984:	0f 92       	push	r0
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	9b 83       	std	Y+3, r25	; 0x03
    198c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 index = 0;
    198e:	19 82       	std	Y+1, r1	; 0x01
    1990:	0e c0       	rjmp	.+28     	; 0x19ae <UART_sendString+0x30>
	while(Str[index] != '\0')
	{
		UART_sendByte(Str[index]);
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	9b 81       	ldd	r25, Y+3	; 0x03
    199c:	fc 01       	movw	r30, r24
    199e:	e2 0f       	add	r30, r18
    19a0:	f3 1f       	adc	r31, r19
    19a2:	80 81       	ld	r24, Z
    19a4:	0e 94 99 0c 	call	0x1932	; 0x1932 <UART_sendByte>
		index++;
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	8f 5f       	subi	r24, 0xFF	; 255
    19ac:	89 83       	std	Y+1, r24	; 0x01
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
	uint8 index = 0;
	while(Str[index] != '\0')
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	9b 81       	ldd	r25, Y+3	; 0x03
    19b8:	fc 01       	movw	r30, r24
    19ba:	e2 0f       	add	r30, r18
    19bc:	f3 1f       	adc	r31, r19
    19be:	80 81       	ld	r24, Z
    19c0:	88 23       	and	r24, r24
    19c2:	39 f7       	brne	.-50     	; 0x1992 <UART_sendString+0x14>
	{
		UART_sendByte(Str[index]);
		index++;
	}

}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <UART_receiveString+0xa>
    19da:	0f 92       	push	r0
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	9b 83       	std	Y+3, r25	; 0x03
    19e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    19e4:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = UART_receiveByte();
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	9b 81       	ldd	r25, Y+3	; 0x03
    19f0:	8c 01       	movw	r16, r24
    19f2:	02 0f       	add	r16, r18
    19f4:	13 1f       	adc	r17, r19
    19f6:	0e 94 b0 0c 	call	0x1960	; 0x1960 <UART_receiveByte>
    19fa:	f8 01       	movw	r30, r16
    19fc:	80 83       	st	Z, r24
    19fe:	0f c0       	rjmp	.+30     	; 0x1a1e <UART_receiveString+0x4e>

	while(Str[i] != '#')
	{
		i++;
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	8f 5f       	subi	r24, 0xFF	; 255
    1a04:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a10:	8c 01       	movw	r16, r24
    1a12:	02 0f       	add	r16, r18
    1a14:	13 1f       	adc	r17, r19
    1a16:	0e 94 b0 0c 	call	0x1960	; 0x1960 <UART_receiveByte>
    1a1a:	f8 01       	movw	r30, r16
    1a1c:	80 83       	st	Z, r24
{
	uint8 i = 0;

	Str[i] = UART_receiveByte();

	while(Str[i] != '#')
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	9b 81       	ldd	r25, Y+3	; 0x03
    1a28:	fc 01       	movw	r30, r24
    1a2a:	e2 0f       	add	r30, r18
    1a2c:	f3 1f       	adc	r31, r19
    1a2e:	80 81       	ld	r24, Z
    1a30:	83 32       	cpi	r24, 0x23	; 35
    1a32:	31 f7       	brne	.-52     	; 0x1a00 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_receiveByte();
	}

	Str[i] = '\0';
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3e:	fc 01       	movw	r30, r24
    1a40:	e2 0f       	add	r30, r18
    1a42:	f3 1f       	adc	r31, r19
    1a44:	10 82       	st	Z, r1
}
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	1f 91       	pop	r17
    1a52:	0f 91       	pop	r16
    1a54:	08 95       	ret

00001a56 <Buzzer_init>:
#include <avr/io.h>
#include "BUZZER.h"
void Buzzer_init(void)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	65 e0       	ldi	r22, 0x05	; 5
    1a62:	41 e0       	ldi	r20, 0x01	; 1
    1a64:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	65 e0       	ldi	r22, 0x05	; 5
    1a6c:	40 e0       	ldi	r20, 0x00	; 0
    1a6e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <Buzzer_on>:

void Buzzer_on(void)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	65 e0       	ldi	r22, 0x05	; 5
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <Buzzer_off>:

void Buzzer_off(void)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	65 e0       	ldi	r22, 0x05	; 5
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <DcMotor_Init>:
/*
 * Initializes dc motor pins
 * and sets it at stop mode
 */
void DcMotor_Init(void)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
	/*
	 * setup the direction for the two motor pins through the GPIO driver
	 */
	GPIO_setupPinDirection(DCMOTOR_CONFIG_PORT,DCMOTOR_IN1,PIN_OUTPUT);
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	41 e0       	ldi	r20, 0x01	; 1
    1ab6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_CONFIG_PORT,DCMOTOR_IN2,PIN_OUTPUT);
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	62 e0       	ldi	r22, 0x02	; 2
    1abe:	41 e0       	ldi	r20, 0x01	; 1
    1ac0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>


	/*
	 * Stop at the DC-Motor at the beginning through the GPIO driver
	 */
	GPIO_writePin(DCMOTOR_CONFIG_PORT,DCMOTOR_IN1,LOGIC_LOW);
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(DCMOTOR_CONFIG_PORT,DCMOTOR_IN2,LOGIC_LOW);
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	62 e0       	ldi	r22, 0x02	; 2
    1ad2:	40 e0       	ldi	r20, 0x00	; 0
    1ad4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <DcMotor_Rotate>:

/*
 * controlling speed and direction of rotation
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <DcMotor_Rotate+0x6>
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <DcMotor_Rotate+0x8>
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	3c 83       	std	Y+4, r19	; 0x04
    1af6:	2b 83       	std	Y+3, r18	; 0x03
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	9c 81       	ldd	r25, Y+4	; 0x04
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	91 05       	cpc	r25, r1
    1b00:	29 f1       	breq	.+74     	; 0x1b4c <DcMotor_Rotate+0x6e>
    1b02:	2b 81       	ldd	r18, Y+3	; 0x03
    1b04:	3c 81       	ldd	r19, Y+4	; 0x04
    1b06:	22 30       	cpi	r18, 0x02	; 2
    1b08:	31 05       	cpc	r19, r1
    1b0a:	91 f0       	breq	.+36     	; 0x1b30 <DcMotor_Rotate+0x52>
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	49 f5       	brne	.+82     	; 0x1b66 <DcMotor_Rotate+0x88>
	{
	case OFF:
		PWM_Timer0_Start(LOGIC_LOW);
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <PWM_Timer0_Start>
		GPIO_writePin(DCMOTOR_CONFIG_PORT,DCMOTOR_IN1,LOGIC_LOW);
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(DCMOTOR_CONFIG_PORT,DCMOTOR_IN2,LOGIC_LOW);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	62 e0       	ldi	r22, 0x02	; 2
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1b2e:	1b c0       	rjmp	.+54     	; 0x1b66 <DcMotor_Rotate+0x88>
		break;
	case CW:
		PWM_Timer0_Start(speed);
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <PWM_Timer0_Start>
		GPIO_writePin(DCMOTOR_CONFIG_PORT,DCMOTOR_IN1,LOGIC_HIGH);
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(DCMOTOR_CONFIG_PORT,DCMOTOR_IN2,LOGIC_LOW);
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	62 e0       	ldi	r22, 0x02	; 2
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1b4a:	0d c0       	rjmp	.+26     	; 0x1b66 <DcMotor_Rotate+0x88>
		break;
	case ACW:
		PWM_Timer0_Start(speed);
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <PWM_Timer0_Start>
		GPIO_writePin(DCMOTOR_CONFIG_PORT,DCMOTOR_IN1,LOGIC_LOW);
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(DCMOTOR_CONFIG_PORT,DCMOTOR_IN2,LOGIC_HIGH);
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	62 e0       	ldi	r22, 0x02	; 2
    1b60:	41 e0       	ldi	r20, 0x01	; 1
    1b62:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		break;

	}


}
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <EEPROM_writeByte>:
 *******************************************************************************/
#include "EXTERNAL_EEPROM.h"
#include "../MCAL/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <EEPROM_writeByte+0x6>
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <EEPROM_writeByte+0x8>
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	9a 83       	std	Y+2, r25	; 0x02
    1b82:	89 83       	std	Y+1, r24	; 0x01
    1b84:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1b86:	0e 94 2d 0b 	call	0x165a	; 0x165a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1b8a:	0e 94 85 0b 	call	0x170a	; 0x170a <TWI_getStatus>
    1b8e:	88 30       	cpi	r24, 0x08	; 8
    1b90:	11 f0       	breq	.+4      	; 0x1b96 <EEPROM_writeByte+0x22>
        return ERROR;
    1b92:	1c 82       	std	Y+4, r1	; 0x04
    1b94:	28 c0       	rjmp	.+80     	; 0x1be6 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9a:	80 70       	andi	r24, 0x00	; 0
    1b9c:	97 70       	andi	r25, 0x07	; 7
    1b9e:	88 0f       	add	r24, r24
    1ba0:	89 2f       	mov	r24, r25
    1ba2:	88 1f       	adc	r24, r24
    1ba4:	99 0b       	sbc	r25, r25
    1ba6:	91 95       	neg	r25
    1ba8:	80 6a       	ori	r24, 0xA0	; 160
    1baa:	0e 94 48 0b 	call	0x1690	; 0x1690 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1bae:	0e 94 85 0b 	call	0x170a	; 0x170a <TWI_getStatus>
    1bb2:	88 31       	cpi	r24, 0x18	; 24
    1bb4:	11 f0       	breq	.+4      	; 0x1bba <EEPROM_writeByte+0x46>
        return ERROR; 
    1bb6:	1c 82       	std	Y+4, r1	; 0x04
    1bb8:	16 c0       	rjmp	.+44     	; 0x1be6 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	0e 94 48 0b 	call	0x1690	; 0x1690 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1bc0:	0e 94 85 0b 	call	0x170a	; 0x170a <TWI_getStatus>
    1bc4:	88 32       	cpi	r24, 0x28	; 40
    1bc6:	11 f0       	breq	.+4      	; 0x1bcc <EEPROM_writeByte+0x58>
        return ERROR;
    1bc8:	1c 82       	std	Y+4, r1	; 0x04
    1bca:	0d c0       	rjmp	.+26     	; 0x1be6 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	0e 94 48 0b 	call	0x1690	; 0x1690 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1bd2:	0e 94 85 0b 	call	0x170a	; 0x170a <TWI_getStatus>
    1bd6:	88 32       	cpi	r24, 0x28	; 40
    1bd8:	11 f0       	breq	.+4      	; 0x1bde <EEPROM_writeByte+0x6a>
        return ERROR;
    1bda:	1c 82       	std	Y+4, r1	; 0x04
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1bde:	0e 94 3d 0b 	call	0x167a	; 0x167a <TWI_stop>
	
    return SUCCESS;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	8c 83       	std	Y+4, r24	; 0x04
    1be6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <EEPROM_readByte+0x6>
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <EEPROM_readByte+0x8>
    1bfe:	0f 92       	push	r0
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	7c 83       	std	Y+4, r23	; 0x04
    1c0a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1c0c:	0e 94 2d 0b 	call	0x165a	; 0x165a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1c10:	0e 94 85 0b 	call	0x170a	; 0x170a <TWI_getStatus>
    1c14:	88 30       	cpi	r24, 0x08	; 8
    1c16:	11 f0       	breq	.+4      	; 0x1c1c <EEPROM_readByte+0x26>
        return ERROR;
    1c18:	1d 82       	std	Y+5, r1	; 0x05
    1c1a:	44 c0       	rjmp	.+136    	; 0x1ca4 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	80 70       	andi	r24, 0x00	; 0
    1c22:	97 70       	andi	r25, 0x07	; 7
    1c24:	88 0f       	add	r24, r24
    1c26:	89 2f       	mov	r24, r25
    1c28:	88 1f       	adc	r24, r24
    1c2a:	99 0b       	sbc	r25, r25
    1c2c:	91 95       	neg	r25
    1c2e:	80 6a       	ori	r24, 0xA0	; 160
    1c30:	0e 94 48 0b 	call	0x1690	; 0x1690 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1c34:	0e 94 85 0b 	call	0x170a	; 0x170a <TWI_getStatus>
    1c38:	88 31       	cpi	r24, 0x18	; 24
    1c3a:	11 f0       	breq	.+4      	; 0x1c40 <EEPROM_readByte+0x4a>
        return ERROR;
    1c3c:	1d 82       	std	Y+5, r1	; 0x05
    1c3e:	32 c0       	rjmp	.+100    	; 0x1ca4 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	0e 94 48 0b 	call	0x1690	; 0x1690 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1c46:	0e 94 85 0b 	call	0x170a	; 0x170a <TWI_getStatus>
    1c4a:	88 32       	cpi	r24, 0x28	; 40
    1c4c:	11 f0       	breq	.+4      	; 0x1c52 <EEPROM_readByte+0x5c>
        return ERROR;
    1c4e:	1d 82       	std	Y+5, r1	; 0x05
    1c50:	29 c0       	rjmp	.+82     	; 0x1ca4 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1c52:	0e 94 2d 0b 	call	0x165a	; 0x165a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1c56:	0e 94 85 0b 	call	0x170a	; 0x170a <TWI_getStatus>
    1c5a:	80 31       	cpi	r24, 0x10	; 16
    1c5c:	11 f0       	breq	.+4      	; 0x1c62 <EEPROM_readByte+0x6c>
        return ERROR;
    1c5e:	1d 82       	std	Y+5, r1	; 0x05
    1c60:	21 c0       	rjmp	.+66     	; 0x1ca4 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	9a 81       	ldd	r25, Y+2	; 0x02
    1c66:	80 70       	andi	r24, 0x00	; 0
    1c68:	97 70       	andi	r25, 0x07	; 7
    1c6a:	88 0f       	add	r24, r24
    1c6c:	89 2f       	mov	r24, r25
    1c6e:	88 1f       	adc	r24, r24
    1c70:	99 0b       	sbc	r25, r25
    1c72:	91 95       	neg	r25
    1c74:	81 6a       	ori	r24, 0xA1	; 161
    1c76:	0e 94 48 0b 	call	0x1690	; 0x1690 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1c7a:	0e 94 85 0b 	call	0x170a	; 0x170a <TWI_getStatus>
    1c7e:	80 34       	cpi	r24, 0x40	; 64
    1c80:	11 f0       	breq	.+4      	; 0x1c86 <EEPROM_readByte+0x90>
        return ERROR;
    1c82:	1d 82       	std	Y+5, r1	; 0x05
    1c84:	0f c0       	rjmp	.+30     	; 0x1ca4 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1c86:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <TWI_readByteWithNACK>
    1c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1c90:	0e 94 85 0b 	call	0x170a	; 0x170a <TWI_getStatus>
    1c94:	88 35       	cpi	r24, 0x58	; 88
    1c96:	11 f0       	breq	.+4      	; 0x1c9c <EEPROM_readByte+0xa6>
        return ERROR;
    1c98:	1d 82       	std	Y+5, r1	; 0x05
    1c9a:	04 c0       	rjmp	.+8      	; 0x1ca4 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1c9c:	0e 94 3d 0b 	call	0x167a	; 0x167a <TWI_stop>

    return SUCCESS;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
    1ca4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <LCD_init>:
#include "../common_macros.h"
/*
 * The file is intended to control LCD
 */
void LCD_init(void)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	2e 97       	sbiw	r28, 0x0e	; 14
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
	/* setup the RS as output*/
	GPIO_setupPinDirection(LCD_CONFIGS_PORT, LCD_RS, PIN_OUTPUT);
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	60 e0       	ldi	r22, 0x00	; 0
    1cce:	41 e0       	ldi	r20, 0x01	; 1
    1cd0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	/* setup the Enable pin as output*/
	GPIO_setupPinDirection(LCD_CONFIGS_PORT, LCD_E, PIN_OUTPUT);
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	61 e0       	ldi	r22, 0x01	; 1
    1cd8:	41 e0       	ldi	r20, 0x01	; 1
    1cda:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a0 ea       	ldi	r26, 0xA0	; 160
    1ce4:	b1 e4       	ldi	r27, 0x41	; 65
    1ce6:	8b 87       	std	Y+11, r24	; 0x0b
    1ce8:	9c 87       	std	Y+12, r25	; 0x0c
    1cea:	ad 87       	std	Y+13, r26	; 0x0d
    1cec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	4a ef       	ldi	r20, 0xFA	; 250
    1cfc:	54 e4       	ldi	r21, 0x44	; 68
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	8f 83       	std	Y+7, r24	; 0x07
    1d08:	98 87       	std	Y+8, r25	; 0x08
    1d0a:	a9 87       	std	Y+9, r26	; 0x09
    1d0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	5f e3       	ldi	r21, 0x3F	; 63
    1d1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	2c f4       	brge	.+10     	; 0x1d30 <LCD_init+0x7a>
		__ticks = 1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	3f c0       	rjmp	.+126    	; 0x1dae <LCD_init+0xf8>
	else if (__tmp > 65535)
    1d30:	6f 81       	ldd	r22, Y+7	; 0x07
    1d32:	78 85       	ldd	r23, Y+8	; 0x08
    1d34:	89 85       	ldd	r24, Y+9	; 0x09
    1d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	3f ef       	ldi	r19, 0xFF	; 255
    1d3c:	4f e7       	ldi	r20, 0x7F	; 127
    1d3e:	57 e4       	ldi	r21, 0x47	; 71
    1d40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d44:	18 16       	cp	r1, r24
    1d46:	4c f5       	brge	.+82     	; 0x1d9a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e2       	ldi	r20, 0x20	; 32
    1d56:	51 e4       	ldi	r21, 0x41	; 65
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <LCD_init+0xda>
    1d72:	88 ec       	ldi	r24, 0xC8	; 200
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <LCD_init+0xc8>
    1d82:	9c 83       	std	Y+4, r25	; 0x04
    1d84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	69 f7       	brne	.-38     	; 0x1d72 <LCD_init+0xbc>
    1d98:	14 c0       	rjmp	.+40     	; 0x1dc2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9c:	78 85       	ldd	r23, Y+8	; 0x08
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9e 83       	std	Y+6, r25	; 0x06
    1dac:	8d 83       	std	Y+5, r24	; 0x05
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <LCD_init+0x104>
    1dbe:	9a 83       	std	Y+2, r25	; 0x02
    1dc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
#if(LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PATH, PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE_COMMAND);
#elif (LCD_DATA_BITS_MODE == 4)
	GPIO_setupPinDirection(LCD_DATA_PATH, LCD_DATA_START_BIT, PIN_OUTPUT);
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	62 e0       	ldi	r22, 0x02	; 2
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PATH, LCD_DATA_START_BIT+1, PIN_OUTPUT);
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	63 e0       	ldi	r22, 0x03	; 3
    1dd0:	41 e0       	ldi	r20, 0x01	; 1
    1dd2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PATH, LCD_DATA_START_BIT+2, PIN_OUTPUT);
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	64 e0       	ldi	r22, 0x04	; 4
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PATH, LCD_DATA_START_BIT+3, PIN_OUTPUT);
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	65 e0       	ldi	r22, 0x05	; 5
    1de4:	41 e0       	ldi	r20, 0x01	; 1
    1de6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1dea:	83 e3       	ldi	r24, 0x33	; 51
    1dec:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1df0:	82 e3       	ldi	r24, 0x32	; 50
    1df2:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_COMMAND);
    1df6:	88 e2       	ldi	r24, 0x28	; 40
    1df8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
    1dfc:	8c e0       	ldi	r24, 0x0C	; 12
    1dfe:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <LCD_sendCommand>
}
    1e08:	2e 96       	adiw	r28, 0x0e	; 14
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	c3 56       	subi	r28, 0x63	; 99
    1e28:	d0 40       	sbci	r29, 0x00	; 0
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	fe 01       	movw	r30, r28
    1e36:	ed 59       	subi	r30, 0x9D	; 157
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_RS, LOGIC_LOW);
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1e46:	fe 01       	movw	r30, r28
    1e48:	e1 5a       	subi	r30, 0xA1	; 161
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a0 e8       	ldi	r26, 0x80	; 128
    1e52:	bf e3       	ldi	r27, 0x3F	; 63
    1e54:	80 83       	st	Z, r24
    1e56:	91 83       	std	Z+1, r25	; 0x01
    1e58:	a2 83       	std	Z+2, r26	; 0x02
    1e5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5c:	8e 01       	movw	r16, r28
    1e5e:	05 5a       	subi	r16, 0xA5	; 165
    1e60:	1f 4f       	sbci	r17, 0xFF	; 255
    1e62:	fe 01       	movw	r30, r28
    1e64:	e1 5a       	subi	r30, 0xA1	; 161
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	60 81       	ld	r22, Z
    1e6a:	71 81       	ldd	r23, Z+1	; 0x01
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a ef       	ldi	r20, 0xFA	; 250
    1e76:	54 e4       	ldi	r21, 0x44	; 68
    1e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	f8 01       	movw	r30, r16
    1e82:	80 83       	st	Z, r24
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	a2 83       	std	Z+2, r26	; 0x02
    1e88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e5 5a       	subi	r30, 0xA5	; 165
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	60 81       	ld	r22, Z
    1e92:	71 81       	ldd	r23, Z+1	; 0x01
    1e94:	82 81       	ldd	r24, Z+2	; 0x02
    1e96:	93 81       	ldd	r25, Z+3	; 0x03
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	44 f4       	brge	.+16     	; 0x1eb8 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e7 5a       	subi	r30, 0xA7	; 167
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	91 83       	std	Z+1, r25	; 0x01
    1eb4:	80 83       	st	Z, r24
    1eb6:	64 c0       	rjmp	.+200    	; 0x1f80 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e5 5a       	subi	r30, 0xA5	; 165
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	60 81       	ld	r22, Z
    1ec0:	71 81       	ldd	r23, Z+1	; 0x01
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	3f ef       	ldi	r19, 0xFF	; 255
    1eca:	4f e7       	ldi	r20, 0x7F	; 127
    1ecc:	57 e4       	ldi	r21, 0x47	; 71
    1ece:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed2:	18 16       	cp	r1, r24
    1ed4:	0c f0       	brlt	.+2      	; 0x1ed8 <LCD_sendCommand+0xbe>
    1ed6:	43 c0       	rjmp	.+134    	; 0x1f5e <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	fe 01       	movw	r30, r28
    1eda:	e1 5a       	subi	r30, 0xA1	; 161
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	60 81       	ld	r22, Z
    1ee0:	71 81       	ldd	r23, Z+1	; 0x01
    1ee2:	82 81       	ldd	r24, Z+2	; 0x02
    1ee4:	93 81       	ldd	r25, Z+3	; 0x03
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	51 e4       	ldi	r21, 0x41	; 65
    1eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	8e 01       	movw	r16, r28
    1ef8:	07 5a       	subi	r16, 0xA7	; 167
    1efa:	1f 4f       	sbci	r17, 0xFF	; 255
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	f8 01       	movw	r30, r16
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	80 83       	st	Z, r24
    1f0e:	1f c0       	rjmp	.+62     	; 0x1f4e <LCD_sendCommand+0x134>
    1f10:	fe 01       	movw	r30, r28
    1f12:	e9 5a       	subi	r30, 0xA9	; 169
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	88 ec       	ldi	r24, 0xC8	; 200
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	80 83       	st	Z, r24
    1f1e:	fe 01       	movw	r30, r28
    1f20:	e9 5a       	subi	r30, 0xA9	; 169
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	80 81       	ld	r24, Z
    1f26:	91 81       	ldd	r25, Z+1	; 0x01
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <LCD_sendCommand+0x10e>
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e9 5a       	subi	r30, 0xA9	; 169
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	91 83       	std	Z+1, r25	; 0x01
    1f34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f36:	de 01       	movw	r26, r28
    1f38:	a7 5a       	subi	r26, 0xA7	; 167
    1f3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	e7 5a       	subi	r30, 0xA7	; 167
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	80 81       	ld	r24, Z
    1f44:	91 81       	ldd	r25, Z+1	; 0x01
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	11 96       	adiw	r26, 0x01	; 1
    1f4a:	9c 93       	st	X, r25
    1f4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e7 5a       	subi	r30, 0xA7	; 167
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 81       	ld	r24, Z
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	d1 f6       	brne	.-76     	; 0x1f10 <LCD_sendCommand+0xf6>
    1f5c:	27 c0       	rjmp	.+78     	; 0x1fac <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5e:	8e 01       	movw	r16, r28
    1f60:	07 5a       	subi	r16, 0xA7	; 167
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	fe 01       	movw	r30, r28
    1f66:	e5 5a       	subi	r30, 0xA5	; 165
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	60 81       	ld	r22, Z
    1f6c:	71 81       	ldd	r23, Z+1	; 0x01
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	80 83       	st	Z, r24
    1f80:	de 01       	movw	r26, r28
    1f82:	ab 5a       	subi	r26, 0xAB	; 171
    1f84:	bf 4f       	sbci	r27, 0xFF	; 255
    1f86:	fe 01       	movw	r30, r28
    1f88:	e7 5a       	subi	r30, 0xA7	; 167
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 81       	ld	r24, Z
    1f8e:	91 81       	ldd	r25, Z+1	; 0x01
    1f90:	8d 93       	st	X+, r24
    1f92:	9c 93       	st	X, r25
    1f94:	fe 01       	movw	r30, r28
    1f96:	eb 5a       	subi	r30, 0xAB	; 171
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	80 81       	ld	r24, Z
    1f9c:	91 81       	ldd	r25, Z+1	; 0x01
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <LCD_sendCommand+0x184>
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	eb 5a       	subi	r30, 0xAB	; 171
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	91 83       	std	Z+1, r25	; 0x01
    1faa:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_HIGH);
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	61 e0       	ldi	r22, 0x01	; 1
    1fb0:	41 e0       	ldi	r20, 0x01	; 1
    1fb2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	ef 5a       	subi	r30, 0xAF	; 175
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	a0 e8       	ldi	r26, 0x80	; 128
    1fc2:	bf e3       	ldi	r27, 0x3F	; 63
    1fc4:	80 83       	st	Z, r24
    1fc6:	91 83       	std	Z+1, r25	; 0x01
    1fc8:	a2 83       	std	Z+2, r26	; 0x02
    1fca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fcc:	8e 01       	movw	r16, r28
    1fce:	03 5b       	subi	r16, 0xB3	; 179
    1fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	ef 5a       	subi	r30, 0xAF	; 175
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	60 81       	ld	r22, Z
    1fda:	71 81       	ldd	r23, Z+1	; 0x01
    1fdc:	82 81       	ldd	r24, Z+2	; 0x02
    1fde:	93 81       	ldd	r25, Z+3	; 0x03
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	4a ef       	ldi	r20, 0xFA	; 250
    1fe6:	54 e4       	ldi	r21, 0x44	; 68
    1fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	f8 01       	movw	r30, r16
    1ff2:	80 83       	st	Z, r24
    1ff4:	91 83       	std	Z+1, r25	; 0x01
    1ff6:	a2 83       	std	Z+2, r26	; 0x02
    1ff8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e3 5b       	subi	r30, 0xB3	; 179
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	60 81       	ld	r22, Z
    2002:	71 81       	ldd	r23, Z+1	; 0x01
    2004:	82 81       	ldd	r24, Z+2	; 0x02
    2006:	93 81       	ldd	r25, Z+3	; 0x03
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e8       	ldi	r20, 0x80	; 128
    200e:	5f e3       	ldi	r21, 0x3F	; 63
    2010:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2014:	88 23       	and	r24, r24
    2016:	44 f4       	brge	.+16     	; 0x2028 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2018:	fe 01       	movw	r30, r28
    201a:	e5 5b       	subi	r30, 0xB5	; 181
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	80 83       	st	Z, r24
    2026:	64 c0       	rjmp	.+200    	; 0x20f0 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2028:	fe 01       	movw	r30, r28
    202a:	e3 5b       	subi	r30, 0xB3	; 179
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	60 81       	ld	r22, Z
    2030:	71 81       	ldd	r23, Z+1	; 0x01
    2032:	82 81       	ldd	r24, Z+2	; 0x02
    2034:	93 81       	ldd	r25, Z+3	; 0x03
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	3f ef       	ldi	r19, 0xFF	; 255
    203a:	4f e7       	ldi	r20, 0x7F	; 127
    203c:	57 e4       	ldi	r21, 0x47	; 71
    203e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2042:	18 16       	cp	r1, r24
    2044:	0c f0       	brlt	.+2      	; 0x2048 <LCD_sendCommand+0x22e>
    2046:	43 c0       	rjmp	.+134    	; 0x20ce <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2048:	fe 01       	movw	r30, r28
    204a:	ef 5a       	subi	r30, 0xAF	; 175
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	60 81       	ld	r22, Z
    2050:	71 81       	ldd	r23, Z+1	; 0x01
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	93 81       	ldd	r25, Z+3	; 0x03
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e2       	ldi	r20, 0x20	; 32
    205c:	51 e4       	ldi	r21, 0x41	; 65
    205e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	8e 01       	movw	r16, r28
    2068:	05 5b       	subi	r16, 0xB5	; 181
    206a:	1f 4f       	sbci	r17, 0xFF	; 255
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	f8 01       	movw	r30, r16
    207a:	91 83       	std	Z+1, r25	; 0x01
    207c:	80 83       	st	Z, r24
    207e:	1f c0       	rjmp	.+62     	; 0x20be <LCD_sendCommand+0x2a4>
    2080:	fe 01       	movw	r30, r28
    2082:	e7 5b       	subi	r30, 0xB7	; 183
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	88 ec       	ldi	r24, 0xC8	; 200
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	91 83       	std	Z+1, r25	; 0x01
    208c:	80 83       	st	Z, r24
    208e:	fe 01       	movw	r30, r28
    2090:	e7 5b       	subi	r30, 0xB7	; 183
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	80 81       	ld	r24, Z
    2096:	91 81       	ldd	r25, Z+1	; 0x01
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <LCD_sendCommand+0x27e>
    209c:	fe 01       	movw	r30, r28
    209e:	e7 5b       	subi	r30, 0xB7	; 183
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	91 83       	std	Z+1, r25	; 0x01
    20a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a6:	de 01       	movw	r26, r28
    20a8:	a5 5b       	subi	r26, 0xB5	; 181
    20aa:	bf 4f       	sbci	r27, 0xFF	; 255
    20ac:	fe 01       	movw	r30, r28
    20ae:	e5 5b       	subi	r30, 0xB5	; 181
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	80 81       	ld	r24, Z
    20b4:	91 81       	ldd	r25, Z+1	; 0x01
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	11 96       	adiw	r26, 0x01	; 1
    20ba:	9c 93       	st	X, r25
    20bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20be:	fe 01       	movw	r30, r28
    20c0:	e5 5b       	subi	r30, 0xB5	; 181
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	d1 f6       	brne	.-76     	; 0x2080 <LCD_sendCommand+0x266>
    20cc:	27 c0       	rjmp	.+78     	; 0x211c <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ce:	8e 01       	movw	r16, r28
    20d0:	05 5b       	subi	r16, 0xB5	; 181
    20d2:	1f 4f       	sbci	r17, 0xFF	; 255
    20d4:	fe 01       	movw	r30, r28
    20d6:	e3 5b       	subi	r30, 0xB3	; 179
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	60 81       	ld	r22, Z
    20dc:	71 81       	ldd	r23, Z+1	; 0x01
    20de:	82 81       	ldd	r24, Z+2	; 0x02
    20e0:	93 81       	ldd	r25, Z+3	; 0x03
    20e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	f8 01       	movw	r30, r16
    20ec:	91 83       	std	Z+1, r25	; 0x01
    20ee:	80 83       	st	Z, r24
    20f0:	de 01       	movw	r26, r28
    20f2:	a9 5b       	subi	r26, 0xB9	; 185
    20f4:	bf 4f       	sbci	r27, 0xFF	; 255
    20f6:	fe 01       	movw	r30, r28
    20f8:	e5 5b       	subi	r30, 0xB5	; 181
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	80 81       	ld	r24, Z
    20fe:	91 81       	ldd	r25, Z+1	; 0x01
    2100:	8d 93       	st	X+, r24
    2102:	9c 93       	st	X, r25
    2104:	fe 01       	movw	r30, r28
    2106:	e9 5b       	subi	r30, 0xB9	; 185
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	80 81       	ld	r24, Z
    210c:	91 81       	ldd	r25, Z+1	; 0x01
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <LCD_sendCommand+0x2f4>
    2112:	fe 01       	movw	r30, r28
    2114:	e9 5b       	subi	r30, 0xB9	; 185
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	91 83       	std	Z+1, r25	; 0x01
    211a:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_LOW);
	_delay_ms(1);

#elif (LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT,GET_BIT(command, 4));
    211c:	fe 01       	movw	r30, r28
    211e:	ed 59       	subi	r30, 0x9D	; 157
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 81       	ld	r24, Z
    2124:	88 2f       	mov	r24, r24
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	80 71       	andi	r24, 0x10	; 16
    212a:	90 70       	andi	r25, 0x00	; 0
    212c:	95 95       	asr	r25
    212e:	87 95       	ror	r24
    2130:	95 95       	asr	r25
    2132:	87 95       	ror	r24
    2134:	95 95       	asr	r25
    2136:	87 95       	ror	r24
    2138:	95 95       	asr	r25
    213a:	87 95       	ror	r24
    213c:	98 2f       	mov	r25, r24
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	62 e0       	ldi	r22, 0x02	; 2
    2142:	49 2f       	mov	r20, r25
    2144:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+1,GET_BIT(command, 5));
    2148:	fe 01       	movw	r30, r28
    214a:	ed 59       	subi	r30, 0x9D	; 157
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	80 81       	ld	r24, Z
    2150:	88 2f       	mov	r24, r24
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	80 72       	andi	r24, 0x20	; 32
    2156:	90 70       	andi	r25, 0x00	; 0
    2158:	95 95       	asr	r25
    215a:	87 95       	ror	r24
    215c:	95 95       	asr	r25
    215e:	87 95       	ror	r24
    2160:	95 95       	asr	r25
    2162:	87 95       	ror	r24
    2164:	95 95       	asr	r25
    2166:	87 95       	ror	r24
    2168:	95 95       	asr	r25
    216a:	87 95       	ror	r24
    216c:	98 2f       	mov	r25, r24
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	63 e0       	ldi	r22, 0x03	; 3
    2172:	49 2f       	mov	r20, r25
    2174:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+2,GET_BIT(command, 6));
    2178:	fe 01       	movw	r30, r28
    217a:	ed 59       	subi	r30, 0x9D	; 157
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 81       	ld	r24, Z
    2180:	88 2f       	mov	r24, r24
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	80 74       	andi	r24, 0x40	; 64
    2186:	90 70       	andi	r25, 0x00	; 0
    2188:	08 2e       	mov	r0, r24
    218a:	89 2f       	mov	r24, r25
    218c:	00 0c       	add	r0, r0
    218e:	88 1f       	adc	r24, r24
    2190:	99 0b       	sbc	r25, r25
    2192:	00 0c       	add	r0, r0
    2194:	88 1f       	adc	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	98 2f       	mov	r25, r24
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	64 e0       	ldi	r22, 0x04	; 4
    219e:	49 2f       	mov	r20, r25
    21a0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+3,GET_BIT(command, 7));
    21a4:	fe 01       	movw	r30, r28
    21a6:	ed 59       	subi	r30, 0x9D	; 157
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	80 81       	ld	r24, Z
    21ac:	98 2f       	mov	r25, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	99 27       	eor	r25, r25
    21b2:	99 1f       	adc	r25, r25
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	65 e0       	ldi	r22, 0x05	; 5
    21b8:	49 2f       	mov	r20, r25
    21ba:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    21be:	fe 01       	movw	r30, r28
    21c0:	ed 5b       	subi	r30, 0xBD	; 189
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	a0 e8       	ldi	r26, 0x80	; 128
    21ca:	bf e3       	ldi	r27, 0x3F	; 63
    21cc:	80 83       	st	Z, r24
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	a2 83       	std	Z+2, r26	; 0x02
    21d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d4:	8e 01       	movw	r16, r28
    21d6:	01 5c       	subi	r16, 0xC1	; 193
    21d8:	1f 4f       	sbci	r17, 0xFF	; 255
    21da:	fe 01       	movw	r30, r28
    21dc:	ed 5b       	subi	r30, 0xBD	; 189
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	60 81       	ld	r22, Z
    21e2:	71 81       	ldd	r23, Z+1	; 0x01
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	4a ef       	ldi	r20, 0xFA	; 250
    21ee:	54 e4       	ldi	r21, 0x44	; 68
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	f8 01       	movw	r30, r16
    21fa:	80 83       	st	Z, r24
    21fc:	91 83       	std	Z+1, r25	; 0x01
    21fe:	a2 83       	std	Z+2, r26	; 0x02
    2200:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2202:	fe 01       	movw	r30, r28
    2204:	ff 96       	adiw	r30, 0x3f	; 63
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e8       	ldi	r20, 0x80	; 128
    2214:	5f e3       	ldi	r21, 0x3F	; 63
    2216:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    221a:	88 23       	and	r24, r24
    221c:	2c f4       	brge	.+10     	; 0x2228 <LCD_sendCommand+0x40e>
		__ticks = 1;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9e af       	std	Y+62, r25	; 0x3e
    2224:	8d af       	std	Y+61, r24	; 0x3d
    2226:	46 c0       	rjmp	.+140    	; 0x22b4 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2228:	fe 01       	movw	r30, r28
    222a:	ff 96       	adiw	r30, 0x3f	; 63
    222c:	60 81       	ld	r22, Z
    222e:	71 81       	ldd	r23, Z+1	; 0x01
    2230:	82 81       	ldd	r24, Z+2	; 0x02
    2232:	93 81       	ldd	r25, Z+3	; 0x03
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	64 f5       	brge	.+88     	; 0x229c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2244:	fe 01       	movw	r30, r28
    2246:	ed 5b       	subi	r30, 0xBD	; 189
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	60 81       	ld	r22, Z
    224c:	71 81       	ldd	r23, Z+1	; 0x01
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	93 81       	ldd	r25, Z+3	; 0x03
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e2       	ldi	r20, 0x20	; 32
    2258:	51 e4       	ldi	r21, 0x41	; 65
    225a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	bc 01       	movw	r22, r24
    2264:	cd 01       	movw	r24, r26
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9e af       	std	Y+62, r25	; 0x3e
    2270:	8d af       	std	Y+61, r24	; 0x3d
    2272:	0f c0       	rjmp	.+30     	; 0x2292 <LCD_sendCommand+0x478>
    2274:	88 ec       	ldi	r24, 0xC8	; 200
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9c af       	std	Y+60, r25	; 0x3c
    227a:	8b af       	std	Y+59, r24	; 0x3b
    227c:	8b ad       	ldd	r24, Y+59	; 0x3b
    227e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD_sendCommand+0x466>
    2284:	9c af       	std	Y+60, r25	; 0x3c
    2286:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2288:	8d ad       	ldd	r24, Y+61	; 0x3d
    228a:	9e ad       	ldd	r25, Y+62	; 0x3e
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	9e af       	std	Y+62, r25	; 0x3e
    2290:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2292:	8d ad       	ldd	r24, Y+61	; 0x3d
    2294:	9e ad       	ldd	r25, Y+62	; 0x3e
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	69 f7       	brne	.-38     	; 0x2274 <LCD_sendCommand+0x45a>
    229a:	16 c0       	rjmp	.+44     	; 0x22c8 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229c:	fe 01       	movw	r30, r28
    229e:	ff 96       	adiw	r30, 0x3f	; 63
    22a0:	60 81       	ld	r22, Z
    22a2:	71 81       	ldd	r23, Z+1	; 0x01
    22a4:	82 81       	ldd	r24, Z+2	; 0x02
    22a6:	93 81       	ldd	r25, Z+3	; 0x03
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	9e af       	std	Y+62, r25	; 0x3e
    22b2:	8d af       	std	Y+61, r24	; 0x3d
    22b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    22b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    22b8:	9a af       	std	Y+58, r25	; 0x3a
    22ba:	89 af       	std	Y+57, r24	; 0x39
    22bc:	89 ad       	ldd	r24, Y+57	; 0x39
    22be:	9a ad       	ldd	r25, Y+58	; 0x3a
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <LCD_sendCommand+0x4a6>
    22c4:	9a af       	std	Y+58, r25	; 0x3a
    22c6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_LOW);
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	61 e0       	ldi	r22, 0x01	; 1
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	a0 e8       	ldi	r26, 0x80	; 128
    22d8:	bf e3       	ldi	r27, 0x3F	; 63
    22da:	8d ab       	std	Y+53, r24	; 0x35
    22dc:	9e ab       	std	Y+54, r25	; 0x36
    22de:	af ab       	std	Y+55, r26	; 0x37
    22e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e2:	6d a9       	ldd	r22, Y+53	; 0x35
    22e4:	7e a9       	ldd	r23, Y+54	; 0x36
    22e6:	8f a9       	ldd	r24, Y+55	; 0x37
    22e8:	98 ad       	ldd	r25, Y+56	; 0x38
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	4a ef       	ldi	r20, 0xFA	; 250
    22f0:	54 e4       	ldi	r21, 0x44	; 68
    22f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	89 ab       	std	Y+49, r24	; 0x31
    22fc:	9a ab       	std	Y+50, r25	; 0x32
    22fe:	ab ab       	std	Y+51, r26	; 0x33
    2300:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2302:	69 a9       	ldd	r22, Y+49	; 0x31
    2304:	7a a9       	ldd	r23, Y+50	; 0x32
    2306:	8b a9       	ldd	r24, Y+51	; 0x33
    2308:	9c a9       	ldd	r25, Y+52	; 0x34
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e8       	ldi	r20, 0x80	; 128
    2310:	5f e3       	ldi	r21, 0x3F	; 63
    2312:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2316:	88 23       	and	r24, r24
    2318:	2c f4       	brge	.+10     	; 0x2324 <LCD_sendCommand+0x50a>
		__ticks = 1;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	98 ab       	std	Y+48, r25	; 0x30
    2320:	8f a7       	std	Y+47, r24	; 0x2f
    2322:	3f c0       	rjmp	.+126    	; 0x23a2 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2324:	69 a9       	ldd	r22, Y+49	; 0x31
    2326:	7a a9       	ldd	r23, Y+50	; 0x32
    2328:	8b a9       	ldd	r24, Y+51	; 0x33
    232a:	9c a9       	ldd	r25, Y+52	; 0x34
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	3f ef       	ldi	r19, 0xFF	; 255
    2330:	4f e7       	ldi	r20, 0x7F	; 127
    2332:	57 e4       	ldi	r21, 0x47	; 71
    2334:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2338:	18 16       	cp	r1, r24
    233a:	4c f5       	brge	.+82     	; 0x238e <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    233c:	6d a9       	ldd	r22, Y+53	; 0x35
    233e:	7e a9       	ldd	r23, Y+54	; 0x36
    2340:	8f a9       	ldd	r24, Y+55	; 0x37
    2342:	98 ad       	ldd	r25, Y+56	; 0x38
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e2       	ldi	r20, 0x20	; 32
    234a:	51 e4       	ldi	r21, 0x41	; 65
    234c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	98 ab       	std	Y+48, r25	; 0x30
    2362:	8f a7       	std	Y+47, r24	; 0x2f
    2364:	0f c0       	rjmp	.+30     	; 0x2384 <LCD_sendCommand+0x56a>
    2366:	88 ec       	ldi	r24, 0xC8	; 200
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9e a7       	std	Y+46, r25	; 0x2e
    236c:	8d a7       	std	Y+45, r24	; 0x2d
    236e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2370:	9e a5       	ldd	r25, Y+46	; 0x2e
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	f1 f7       	brne	.-4      	; 0x2372 <LCD_sendCommand+0x558>
    2376:	9e a7       	std	Y+46, r25	; 0x2e
    2378:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237a:	8f a5       	ldd	r24, Y+47	; 0x2f
    237c:	98 a9       	ldd	r25, Y+48	; 0x30
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	98 ab       	std	Y+48, r25	; 0x30
    2382:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2384:	8f a5       	ldd	r24, Y+47	; 0x2f
    2386:	98 a9       	ldd	r25, Y+48	; 0x30
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	69 f7       	brne	.-38     	; 0x2366 <LCD_sendCommand+0x54c>
    238c:	14 c0       	rjmp	.+40     	; 0x23b6 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238e:	69 a9       	ldd	r22, Y+49	; 0x31
    2390:	7a a9       	ldd	r23, Y+50	; 0x32
    2392:	8b a9       	ldd	r24, Y+51	; 0x33
    2394:	9c a9       	ldd	r25, Y+52	; 0x34
    2396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	98 ab       	std	Y+48, r25	; 0x30
    23a0:	8f a7       	std	Y+47, r24	; 0x2f
    23a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a4:	98 a9       	ldd	r25, Y+48	; 0x30
    23a6:	9c a7       	std	Y+44, r25	; 0x2c
    23a8:	8b a7       	std	Y+43, r24	; 0x2b
    23aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <LCD_sendCommand+0x594>
    23b2:	9c a7       	std	Y+44, r25	; 0x2c
    23b4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_HIGH);
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	61 e0       	ldi	r22, 0x01	; 1
    23ba:	41 e0       	ldi	r20, 0x01	; 1
    23bc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	a0 e8       	ldi	r26, 0x80	; 128
    23c6:	bf e3       	ldi	r27, 0x3F	; 63
    23c8:	8f a3       	std	Y+39, r24	; 0x27
    23ca:	98 a7       	std	Y+40, r25	; 0x28
    23cc:	a9 a7       	std	Y+41, r26	; 0x29
    23ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d0:	6f a1       	ldd	r22, Y+39	; 0x27
    23d2:	78 a5       	ldd	r23, Y+40	; 0x28
    23d4:	89 a5       	ldd	r24, Y+41	; 0x29
    23d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	4a ef       	ldi	r20, 0xFA	; 250
    23de:	54 e4       	ldi	r21, 0x44	; 68
    23e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	8b a3       	std	Y+35, r24	; 0x23
    23ea:	9c a3       	std	Y+36, r25	; 0x24
    23ec:	ad a3       	std	Y+37, r26	; 0x25
    23ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23f0:	6b a1       	ldd	r22, Y+35	; 0x23
    23f2:	7c a1       	ldd	r23, Y+36	; 0x24
    23f4:	8d a1       	ldd	r24, Y+37	; 0x25
    23f6:	9e a1       	ldd	r25, Y+38	; 0x26
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e8       	ldi	r20, 0x80	; 128
    23fe:	5f e3       	ldi	r21, 0x3F	; 63
    2400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2404:	88 23       	and	r24, r24
    2406:	2c f4       	brge	.+10     	; 0x2412 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	9a a3       	std	Y+34, r25	; 0x22
    240e:	89 a3       	std	Y+33, r24	; 0x21
    2410:	3f c0       	rjmp	.+126    	; 0x2490 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2412:	6b a1       	ldd	r22, Y+35	; 0x23
    2414:	7c a1       	ldd	r23, Y+36	; 0x24
    2416:	8d a1       	ldd	r24, Y+37	; 0x25
    2418:	9e a1       	ldd	r25, Y+38	; 0x26
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	3f ef       	ldi	r19, 0xFF	; 255
    241e:	4f e7       	ldi	r20, 0x7F	; 127
    2420:	57 e4       	ldi	r21, 0x47	; 71
    2422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2426:	18 16       	cp	r1, r24
    2428:	4c f5       	brge	.+82     	; 0x247c <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242a:	6f a1       	ldd	r22, Y+39	; 0x27
    242c:	78 a5       	ldd	r23, Y+40	; 0x28
    242e:	89 a5       	ldd	r24, Y+41	; 0x29
    2430:	9a a5       	ldd	r25, Y+42	; 0x2a
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e2       	ldi	r20, 0x20	; 32
    2438:	51 e4       	ldi	r21, 0x41	; 65
    243a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	bc 01       	movw	r22, r24
    2444:	cd 01       	movw	r24, r26
    2446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	9a a3       	std	Y+34, r25	; 0x22
    2450:	89 a3       	std	Y+33, r24	; 0x21
    2452:	0f c0       	rjmp	.+30     	; 0x2472 <LCD_sendCommand+0x658>
    2454:	88 ec       	ldi	r24, 0xC8	; 200
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	98 a3       	std	Y+32, r25	; 0x20
    245a:	8f 8f       	std	Y+31, r24	; 0x1f
    245c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    245e:	98 a1       	ldd	r25, Y+32	; 0x20
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <LCD_sendCommand+0x646>
    2464:	98 a3       	std	Y+32, r25	; 0x20
    2466:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2468:	89 a1       	ldd	r24, Y+33	; 0x21
    246a:	9a a1       	ldd	r25, Y+34	; 0x22
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	9a a3       	std	Y+34, r25	; 0x22
    2470:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2472:	89 a1       	ldd	r24, Y+33	; 0x21
    2474:	9a a1       	ldd	r25, Y+34	; 0x22
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	69 f7       	brne	.-38     	; 0x2454 <LCD_sendCommand+0x63a>
    247a:	14 c0       	rjmp	.+40     	; 0x24a4 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247c:	6b a1       	ldd	r22, Y+35	; 0x23
    247e:	7c a1       	ldd	r23, Y+36	; 0x24
    2480:	8d a1       	ldd	r24, Y+37	; 0x25
    2482:	9e a1       	ldd	r25, Y+38	; 0x26
    2484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	9a a3       	std	Y+34, r25	; 0x22
    248e:	89 a3       	std	Y+33, r24	; 0x21
    2490:	89 a1       	ldd	r24, Y+33	; 0x21
    2492:	9a a1       	ldd	r25, Y+34	; 0x22
    2494:	9e 8f       	std	Y+30, r25	; 0x1e
    2496:	8d 8f       	std	Y+29, r24	; 0x1d
    2498:	8d 8d       	ldd	r24, Y+29	; 0x1d
    249a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <LCD_sendCommand+0x682>
    24a0:	9e 8f       	std	Y+30, r25	; 0x1e
    24a2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT,GET_BIT(command, 0));
    24a4:	fe 01       	movw	r30, r28
    24a6:	ed 59       	subi	r30, 0x9D	; 157
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 81       	ld	r24, Z
    24ac:	98 2f       	mov	r25, r24
    24ae:	91 70       	andi	r25, 0x01	; 1
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	62 e0       	ldi	r22, 0x02	; 2
    24b4:	49 2f       	mov	r20, r25
    24b6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+1,GET_BIT(command, 1));
    24ba:	fe 01       	movw	r30, r28
    24bc:	ed 59       	subi	r30, 0x9D	; 157
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	80 81       	ld	r24, Z
    24c2:	88 2f       	mov	r24, r24
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	82 70       	andi	r24, 0x02	; 2
    24c8:	90 70       	andi	r25, 0x00	; 0
    24ca:	95 95       	asr	r25
    24cc:	87 95       	ror	r24
    24ce:	98 2f       	mov	r25, r24
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	63 e0       	ldi	r22, 0x03	; 3
    24d4:	49 2f       	mov	r20, r25
    24d6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+2,GET_BIT(command, 2));
    24da:	fe 01       	movw	r30, r28
    24dc:	ed 59       	subi	r30, 0x9D	; 157
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 81       	ld	r24, Z
    24e2:	88 2f       	mov	r24, r24
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	84 70       	andi	r24, 0x04	; 4
    24e8:	90 70       	andi	r25, 0x00	; 0
    24ea:	95 95       	asr	r25
    24ec:	87 95       	ror	r24
    24ee:	95 95       	asr	r25
    24f0:	87 95       	ror	r24
    24f2:	98 2f       	mov	r25, r24
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	64 e0       	ldi	r22, 0x04	; 4
    24f8:	49 2f       	mov	r20, r25
    24fa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+3,GET_BIT(command, 3));
    24fe:	fe 01       	movw	r30, r28
    2500:	ed 59       	subi	r30, 0x9D	; 157
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	80 81       	ld	r24, Z
    2506:	88 2f       	mov	r24, r24
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	88 70       	andi	r24, 0x08	; 8
    250c:	90 70       	andi	r25, 0x00	; 0
    250e:	95 95       	asr	r25
    2510:	87 95       	ror	r24
    2512:	95 95       	asr	r25
    2514:	87 95       	ror	r24
    2516:	95 95       	asr	r25
    2518:	87 95       	ror	r24
    251a:	98 2f       	mov	r25, r24
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	65 e0       	ldi	r22, 0x05	; 5
    2520:	49 2f       	mov	r20, r25
    2522:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	a0 e8       	ldi	r26, 0x80	; 128
    252c:	bf e3       	ldi	r27, 0x3F	; 63
    252e:	89 8f       	std	Y+25, r24	; 0x19
    2530:	9a 8f       	std	Y+26, r25	; 0x1a
    2532:	ab 8f       	std	Y+27, r26	; 0x1b
    2534:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2536:	69 8d       	ldd	r22, Y+25	; 0x19
    2538:	7a 8d       	ldd	r23, Y+26	; 0x1a
    253a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    253c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	4a ef       	ldi	r20, 0xFA	; 250
    2544:	54 e4       	ldi	r21, 0x44	; 68
    2546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	8d 8b       	std	Y+21, r24	; 0x15
    2550:	9e 8b       	std	Y+22, r25	; 0x16
    2552:	af 8b       	std	Y+23, r26	; 0x17
    2554:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2556:	6d 89       	ldd	r22, Y+21	; 0x15
    2558:	7e 89       	ldd	r23, Y+22	; 0x16
    255a:	8f 89       	ldd	r24, Y+23	; 0x17
    255c:	98 8d       	ldd	r25, Y+24	; 0x18
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e8       	ldi	r20, 0x80	; 128
    2564:	5f e3       	ldi	r21, 0x3F	; 63
    2566:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    256a:	88 23       	and	r24, r24
    256c:	2c f4       	brge	.+10     	; 0x2578 <LCD_sendCommand+0x75e>
		__ticks = 1;
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	9c 8b       	std	Y+20, r25	; 0x14
    2574:	8b 8b       	std	Y+19, r24	; 0x13
    2576:	3f c0       	rjmp	.+126    	; 0x25f6 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2578:	6d 89       	ldd	r22, Y+21	; 0x15
    257a:	7e 89       	ldd	r23, Y+22	; 0x16
    257c:	8f 89       	ldd	r24, Y+23	; 0x17
    257e:	98 8d       	ldd	r25, Y+24	; 0x18
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	3f ef       	ldi	r19, 0xFF	; 255
    2584:	4f e7       	ldi	r20, 0x7F	; 127
    2586:	57 e4       	ldi	r21, 0x47	; 71
    2588:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    258c:	18 16       	cp	r1, r24
    258e:	4c f5       	brge	.+82     	; 0x25e2 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2590:	69 8d       	ldd	r22, Y+25	; 0x19
    2592:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2594:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2596:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e2       	ldi	r20, 0x20	; 32
    259e:	51 e4       	ldi	r21, 0x41	; 65
    25a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9c 8b       	std	Y+20, r25	; 0x14
    25b6:	8b 8b       	std	Y+19, r24	; 0x13
    25b8:	0f c0       	rjmp	.+30     	; 0x25d8 <LCD_sendCommand+0x7be>
    25ba:	88 ec       	ldi	r24, 0xC8	; 200
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	9a 8b       	std	Y+18, r25	; 0x12
    25c0:	89 8b       	std	Y+17, r24	; 0x11
    25c2:	89 89       	ldd	r24, Y+17	; 0x11
    25c4:	9a 89       	ldd	r25, Y+18	; 0x12
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <LCD_sendCommand+0x7ac>
    25ca:	9a 8b       	std	Y+18, r25	; 0x12
    25cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ce:	8b 89       	ldd	r24, Y+19	; 0x13
    25d0:	9c 89       	ldd	r25, Y+20	; 0x14
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	9c 8b       	std	Y+20, r25	; 0x14
    25d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d8:	8b 89       	ldd	r24, Y+19	; 0x13
    25da:	9c 89       	ldd	r25, Y+20	; 0x14
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	69 f7       	brne	.-38     	; 0x25ba <LCD_sendCommand+0x7a0>
    25e0:	14 c0       	rjmp	.+40     	; 0x260a <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e2:	6d 89       	ldd	r22, Y+21	; 0x15
    25e4:	7e 89       	ldd	r23, Y+22	; 0x16
    25e6:	8f 89       	ldd	r24, Y+23	; 0x17
    25e8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	9c 8b       	std	Y+20, r25	; 0x14
    25f4:	8b 8b       	std	Y+19, r24	; 0x13
    25f6:	8b 89       	ldd	r24, Y+19	; 0x13
    25f8:	9c 89       	ldd	r25, Y+20	; 0x14
    25fa:	98 8b       	std	Y+16, r25	; 0x10
    25fc:	8f 87       	std	Y+15, r24	; 0x0f
    25fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2600:	98 89       	ldd	r25, Y+16	; 0x10
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <LCD_sendCommand+0x7e8>
    2606:	98 8b       	std	Y+16, r25	; 0x10
    2608:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_LOW);
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	61 e0       	ldi	r22, 0x01	; 1
    260e:	40 e0       	ldi	r20, 0x00	; 0
    2610:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	a0 e8       	ldi	r26, 0x80	; 128
    261a:	bf e3       	ldi	r27, 0x3F	; 63
    261c:	8b 87       	std	Y+11, r24	; 0x0b
    261e:	9c 87       	std	Y+12, r25	; 0x0c
    2620:	ad 87       	std	Y+13, r26	; 0x0d
    2622:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2624:	6b 85       	ldd	r22, Y+11	; 0x0b
    2626:	7c 85       	ldd	r23, Y+12	; 0x0c
    2628:	8d 85       	ldd	r24, Y+13	; 0x0d
    262a:	9e 85       	ldd	r25, Y+14	; 0x0e
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	4a ef       	ldi	r20, 0xFA	; 250
    2632:	54 e4       	ldi	r21, 0x44	; 68
    2634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	8f 83       	std	Y+7, r24	; 0x07
    263e:	98 87       	std	Y+8, r25	; 0x08
    2640:	a9 87       	std	Y+9, r26	; 0x09
    2642:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2644:	6f 81       	ldd	r22, Y+7	; 0x07
    2646:	78 85       	ldd	r23, Y+8	; 0x08
    2648:	89 85       	ldd	r24, Y+9	; 0x09
    264a:	9a 85       	ldd	r25, Y+10	; 0x0a
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	40 e8       	ldi	r20, 0x80	; 128
    2652:	5f e3       	ldi	r21, 0x3F	; 63
    2654:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2658:	88 23       	and	r24, r24
    265a:	2c f4       	brge	.+10     	; 0x2666 <LCD_sendCommand+0x84c>
		__ticks = 1;
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	9e 83       	std	Y+6, r25	; 0x06
    2662:	8d 83       	std	Y+5, r24	; 0x05
    2664:	3f c0       	rjmp	.+126    	; 0x26e4 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2666:	6f 81       	ldd	r22, Y+7	; 0x07
    2668:	78 85       	ldd	r23, Y+8	; 0x08
    266a:	89 85       	ldd	r24, Y+9	; 0x09
    266c:	9a 85       	ldd	r25, Y+10	; 0x0a
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	3f ef       	ldi	r19, 0xFF	; 255
    2672:	4f e7       	ldi	r20, 0x7F	; 127
    2674:	57 e4       	ldi	r21, 0x47	; 71
    2676:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    267a:	18 16       	cp	r1, r24
    267c:	4c f5       	brge	.+82     	; 0x26d0 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2680:	7c 85       	ldd	r23, Y+12	; 0x0c
    2682:	8d 85       	ldd	r24, Y+13	; 0x0d
    2684:	9e 85       	ldd	r25, Y+14	; 0x0e
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e2       	ldi	r20, 0x20	; 32
    268c:	51 e4       	ldi	r21, 0x41	; 65
    268e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	bc 01       	movw	r22, r24
    2698:	cd 01       	movw	r24, r26
    269a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	9e 83       	std	Y+6, r25	; 0x06
    26a4:	8d 83       	std	Y+5, r24	; 0x05
    26a6:	0f c0       	rjmp	.+30     	; 0x26c6 <LCD_sendCommand+0x8ac>
    26a8:	88 ec       	ldi	r24, 0xC8	; 200
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	9c 83       	std	Y+4, r25	; 0x04
    26ae:	8b 83       	std	Y+3, r24	; 0x03
    26b0:	8b 81       	ldd	r24, Y+3	; 0x03
    26b2:	9c 81       	ldd	r25, Y+4	; 0x04
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <LCD_sendCommand+0x89a>
    26b8:	9c 83       	std	Y+4, r25	; 0x04
    26ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26bc:	8d 81       	ldd	r24, Y+5	; 0x05
    26be:	9e 81       	ldd	r25, Y+6	; 0x06
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	9e 83       	std	Y+6, r25	; 0x06
    26c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c6:	8d 81       	ldd	r24, Y+5	; 0x05
    26c8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	69 f7       	brne	.-38     	; 0x26a8 <LCD_sendCommand+0x88e>
    26ce:	14 c0       	rjmp	.+40     	; 0x26f8 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d0:	6f 81       	ldd	r22, Y+7	; 0x07
    26d2:	78 85       	ldd	r23, Y+8	; 0x08
    26d4:	89 85       	ldd	r24, Y+9	; 0x09
    26d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	9e 83       	std	Y+6, r25	; 0x06
    26e2:	8d 83       	std	Y+5, r24	; 0x05
    26e4:	8d 81       	ldd	r24, Y+5	; 0x05
    26e6:	9e 81       	ldd	r25, Y+6	; 0x06
    26e8:	9a 83       	std	Y+2, r25	; 0x02
    26ea:	89 83       	std	Y+1, r24	; 0x01
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	9a 81       	ldd	r25, Y+2	; 0x02
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <LCD_sendCommand+0x8d6>
    26f4:	9a 83       	std	Y+2, r25	; 0x02
    26f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif

}
    26f8:	cd 59       	subi	r28, 0x9D	; 157
    26fa:	df 4f       	sbci	r29, 0xFF	; 255
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	1f 91       	pop	r17
    270c:	0f 91       	pop	r16
    270e:	08 95       	ret

00002710 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 character)
{
    2710:	0f 93       	push	r16
    2712:	1f 93       	push	r17
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	cd b7       	in	r28, 0x3d	; 61
    271a:	de b7       	in	r29, 0x3e	; 62
    271c:	c3 56       	subi	r28, 0x63	; 99
    271e:	d0 40       	sbci	r29, 0x00	; 0
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	fe 01       	movw	r30, r28
    272c:	ed 59       	subi	r30, 0x9D	; 157
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	80 83       	st	Z, r24
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_RS, LOGIC_HIGH);
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	60 e0       	ldi	r22, 0x00	; 0
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    273c:	fe 01       	movw	r30, r28
    273e:	e1 5a       	subi	r30, 0xA1	; 161
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	a0 e8       	ldi	r26, 0x80	; 128
    2748:	bf e3       	ldi	r27, 0x3F	; 63
    274a:	80 83       	st	Z, r24
    274c:	91 83       	std	Z+1, r25	; 0x01
    274e:	a2 83       	std	Z+2, r26	; 0x02
    2750:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2752:	8e 01       	movw	r16, r28
    2754:	05 5a       	subi	r16, 0xA5	; 165
    2756:	1f 4f       	sbci	r17, 0xFF	; 255
    2758:	fe 01       	movw	r30, r28
    275a:	e1 5a       	subi	r30, 0xA1	; 161
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	60 81       	ld	r22, Z
    2760:	71 81       	ldd	r23, Z+1	; 0x01
    2762:	82 81       	ldd	r24, Z+2	; 0x02
    2764:	93 81       	ldd	r25, Z+3	; 0x03
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	4a ef       	ldi	r20, 0xFA	; 250
    276c:	54 e4       	ldi	r21, 0x44	; 68
    276e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	f8 01       	movw	r30, r16
    2778:	80 83       	st	Z, r24
    277a:	91 83       	std	Z+1, r25	; 0x01
    277c:	a2 83       	std	Z+2, r26	; 0x02
    277e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2780:	fe 01       	movw	r30, r28
    2782:	e5 5a       	subi	r30, 0xA5	; 165
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	60 81       	ld	r22, Z
    2788:	71 81       	ldd	r23, Z+1	; 0x01
    278a:	82 81       	ldd	r24, Z+2	; 0x02
    278c:	93 81       	ldd	r25, Z+3	; 0x03
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e8       	ldi	r20, 0x80	; 128
    2794:	5f e3       	ldi	r21, 0x3F	; 63
    2796:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    279a:	88 23       	and	r24, r24
    279c:	44 f4       	brge	.+16     	; 0x27ae <LCD_displayCharacter+0x9e>
		__ticks = 1;
    279e:	fe 01       	movw	r30, r28
    27a0:	e7 5a       	subi	r30, 0xA7	; 167
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	91 83       	std	Z+1, r25	; 0x01
    27aa:	80 83       	st	Z, r24
    27ac:	64 c0       	rjmp	.+200    	; 0x2876 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    27ae:	fe 01       	movw	r30, r28
    27b0:	e5 5a       	subi	r30, 0xA5	; 165
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	60 81       	ld	r22, Z
    27b6:	71 81       	ldd	r23, Z+1	; 0x01
    27b8:	82 81       	ldd	r24, Z+2	; 0x02
    27ba:	93 81       	ldd	r25, Z+3	; 0x03
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	3f ef       	ldi	r19, 0xFF	; 255
    27c0:	4f e7       	ldi	r20, 0x7F	; 127
    27c2:	57 e4       	ldi	r21, 0x47	; 71
    27c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c8:	18 16       	cp	r1, r24
    27ca:	0c f0       	brlt	.+2      	; 0x27ce <LCD_displayCharacter+0xbe>
    27cc:	43 c0       	rjmp	.+134    	; 0x2854 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ce:	fe 01       	movw	r30, r28
    27d0:	e1 5a       	subi	r30, 0xA1	; 161
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	60 81       	ld	r22, Z
    27d6:	71 81       	ldd	r23, Z+1	; 0x01
    27d8:	82 81       	ldd	r24, Z+2	; 0x02
    27da:	93 81       	ldd	r25, Z+3	; 0x03
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e2       	ldi	r20, 0x20	; 32
    27e2:	51 e4       	ldi	r21, 0x41	; 65
    27e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	8e 01       	movw	r16, r28
    27ee:	07 5a       	subi	r16, 0xA7	; 167
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	bc 01       	movw	r22, r24
    27f4:	cd 01       	movw	r24, r26
    27f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	f8 01       	movw	r30, r16
    2800:	91 83       	std	Z+1, r25	; 0x01
    2802:	80 83       	st	Z, r24
    2804:	1f c0       	rjmp	.+62     	; 0x2844 <LCD_displayCharacter+0x134>
    2806:	fe 01       	movw	r30, r28
    2808:	e9 5a       	subi	r30, 0xA9	; 169
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	88 ec       	ldi	r24, 0xC8	; 200
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	91 83       	std	Z+1, r25	; 0x01
    2812:	80 83       	st	Z, r24
    2814:	fe 01       	movw	r30, r28
    2816:	e9 5a       	subi	r30, 0xA9	; 169
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	80 81       	ld	r24, Z
    281c:	91 81       	ldd	r25, Z+1	; 0x01
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <LCD_displayCharacter+0x10e>
    2822:	fe 01       	movw	r30, r28
    2824:	e9 5a       	subi	r30, 0xA9	; 169
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	91 83       	std	Z+1, r25	; 0x01
    282a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282c:	de 01       	movw	r26, r28
    282e:	a7 5a       	subi	r26, 0xA7	; 167
    2830:	bf 4f       	sbci	r27, 0xFF	; 255
    2832:	fe 01       	movw	r30, r28
    2834:	e7 5a       	subi	r30, 0xA7	; 167
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 81       	ld	r24, Z
    283a:	91 81       	ldd	r25, Z+1	; 0x01
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	11 96       	adiw	r26, 0x01	; 1
    2840:	9c 93       	st	X, r25
    2842:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2844:	fe 01       	movw	r30, r28
    2846:	e7 5a       	subi	r30, 0xA7	; 167
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	80 81       	ld	r24, Z
    284c:	91 81       	ldd	r25, Z+1	; 0x01
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	d1 f6       	brne	.-76     	; 0x2806 <LCD_displayCharacter+0xf6>
    2852:	27 c0       	rjmp	.+78     	; 0x28a2 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2854:	8e 01       	movw	r16, r28
    2856:	07 5a       	subi	r16, 0xA7	; 167
    2858:	1f 4f       	sbci	r17, 0xFF	; 255
    285a:	fe 01       	movw	r30, r28
    285c:	e5 5a       	subi	r30, 0xA5	; 165
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	60 81       	ld	r22, Z
    2862:	71 81       	ldd	r23, Z+1	; 0x01
    2864:	82 81       	ldd	r24, Z+2	; 0x02
    2866:	93 81       	ldd	r25, Z+3	; 0x03
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	f8 01       	movw	r30, r16
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	80 83       	st	Z, r24
    2876:	de 01       	movw	r26, r28
    2878:	ab 5a       	subi	r26, 0xAB	; 171
    287a:	bf 4f       	sbci	r27, 0xFF	; 255
    287c:	fe 01       	movw	r30, r28
    287e:	e7 5a       	subi	r30, 0xA7	; 167
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	80 81       	ld	r24, Z
    2884:	91 81       	ldd	r25, Z+1	; 0x01
    2886:	8d 93       	st	X+, r24
    2888:	9c 93       	st	X, r25
    288a:	fe 01       	movw	r30, r28
    288c:	eb 5a       	subi	r30, 0xAB	; 171
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	80 81       	ld	r24, Z
    2892:	91 81       	ldd	r25, Z+1	; 0x01
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <LCD_displayCharacter+0x184>
    2898:	fe 01       	movw	r30, r28
    289a:	eb 5a       	subi	r30, 0xAB	; 171
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	91 83       	std	Z+1, r25	; 0x01
    28a0:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_HIGH);
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	61 e0       	ldi	r22, 0x01	; 1
    28a6:	41 e0       	ldi	r20, 0x01	; 1
    28a8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    28ac:	fe 01       	movw	r30, r28
    28ae:	ef 5a       	subi	r30, 0xAF	; 175
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a0 e8       	ldi	r26, 0x80	; 128
    28b8:	bf e3       	ldi	r27, 0x3F	; 63
    28ba:	80 83       	st	Z, r24
    28bc:	91 83       	std	Z+1, r25	; 0x01
    28be:	a2 83       	std	Z+2, r26	; 0x02
    28c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c2:	8e 01       	movw	r16, r28
    28c4:	03 5b       	subi	r16, 0xB3	; 179
    28c6:	1f 4f       	sbci	r17, 0xFF	; 255
    28c8:	fe 01       	movw	r30, r28
    28ca:	ef 5a       	subi	r30, 0xAF	; 175
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	60 81       	ld	r22, Z
    28d0:	71 81       	ldd	r23, Z+1	; 0x01
    28d2:	82 81       	ldd	r24, Z+2	; 0x02
    28d4:	93 81       	ldd	r25, Z+3	; 0x03
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	4a ef       	ldi	r20, 0xFA	; 250
    28dc:	54 e4       	ldi	r21, 0x44	; 68
    28de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	f8 01       	movw	r30, r16
    28e8:	80 83       	st	Z, r24
    28ea:	91 83       	std	Z+1, r25	; 0x01
    28ec:	a2 83       	std	Z+2, r26	; 0x02
    28ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28f0:	fe 01       	movw	r30, r28
    28f2:	e3 5b       	subi	r30, 0xB3	; 179
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	60 81       	ld	r22, Z
    28f8:	71 81       	ldd	r23, Z+1	; 0x01
    28fa:	82 81       	ldd	r24, Z+2	; 0x02
    28fc:	93 81       	ldd	r25, Z+3	; 0x03
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e8       	ldi	r20, 0x80	; 128
    2904:	5f e3       	ldi	r21, 0x3F	; 63
    2906:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    290a:	88 23       	and	r24, r24
    290c:	44 f4       	brge	.+16     	; 0x291e <LCD_displayCharacter+0x20e>
		__ticks = 1;
    290e:	fe 01       	movw	r30, r28
    2910:	e5 5b       	subi	r30, 0xB5	; 181
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	91 83       	std	Z+1, r25	; 0x01
    291a:	80 83       	st	Z, r24
    291c:	64 c0       	rjmp	.+200    	; 0x29e6 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    291e:	fe 01       	movw	r30, r28
    2920:	e3 5b       	subi	r30, 0xB3	; 179
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	60 81       	ld	r22, Z
    2926:	71 81       	ldd	r23, Z+1	; 0x01
    2928:	82 81       	ldd	r24, Z+2	; 0x02
    292a:	93 81       	ldd	r25, Z+3	; 0x03
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	3f ef       	ldi	r19, 0xFF	; 255
    2930:	4f e7       	ldi	r20, 0x7F	; 127
    2932:	57 e4       	ldi	r21, 0x47	; 71
    2934:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2938:	18 16       	cp	r1, r24
    293a:	0c f0       	brlt	.+2      	; 0x293e <LCD_displayCharacter+0x22e>
    293c:	43 c0       	rjmp	.+134    	; 0x29c4 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293e:	fe 01       	movw	r30, r28
    2940:	ef 5a       	subi	r30, 0xAF	; 175
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	60 81       	ld	r22, Z
    2946:	71 81       	ldd	r23, Z+1	; 0x01
    2948:	82 81       	ldd	r24, Z+2	; 0x02
    294a:	93 81       	ldd	r25, Z+3	; 0x03
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e2       	ldi	r20, 0x20	; 32
    2952:	51 e4       	ldi	r21, 0x41	; 65
    2954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	8e 01       	movw	r16, r28
    295e:	05 5b       	subi	r16, 0xB5	; 181
    2960:	1f 4f       	sbci	r17, 0xFF	; 255
    2962:	bc 01       	movw	r22, r24
    2964:	cd 01       	movw	r24, r26
    2966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	f8 01       	movw	r30, r16
    2970:	91 83       	std	Z+1, r25	; 0x01
    2972:	80 83       	st	Z, r24
    2974:	1f c0       	rjmp	.+62     	; 0x29b4 <LCD_displayCharacter+0x2a4>
    2976:	fe 01       	movw	r30, r28
    2978:	e7 5b       	subi	r30, 0xB7	; 183
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	88 ec       	ldi	r24, 0xC8	; 200
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	91 83       	std	Z+1, r25	; 0x01
    2982:	80 83       	st	Z, r24
    2984:	fe 01       	movw	r30, r28
    2986:	e7 5b       	subi	r30, 0xB7	; 183
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	80 81       	ld	r24, Z
    298c:	91 81       	ldd	r25, Z+1	; 0x01
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <LCD_displayCharacter+0x27e>
    2992:	fe 01       	movw	r30, r28
    2994:	e7 5b       	subi	r30, 0xB7	; 183
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	91 83       	std	Z+1, r25	; 0x01
    299a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299c:	de 01       	movw	r26, r28
    299e:	a5 5b       	subi	r26, 0xB5	; 181
    29a0:	bf 4f       	sbci	r27, 0xFF	; 255
    29a2:	fe 01       	movw	r30, r28
    29a4:	e5 5b       	subi	r30, 0xB5	; 181
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	80 81       	ld	r24, Z
    29aa:	91 81       	ldd	r25, Z+1	; 0x01
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	11 96       	adiw	r26, 0x01	; 1
    29b0:	9c 93       	st	X, r25
    29b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b4:	fe 01       	movw	r30, r28
    29b6:	e5 5b       	subi	r30, 0xB5	; 181
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	80 81       	ld	r24, Z
    29bc:	91 81       	ldd	r25, Z+1	; 0x01
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	d1 f6       	brne	.-76     	; 0x2976 <LCD_displayCharacter+0x266>
    29c2:	27 c0       	rjmp	.+78     	; 0x2a12 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c4:	8e 01       	movw	r16, r28
    29c6:	05 5b       	subi	r16, 0xB5	; 181
    29c8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ca:	fe 01       	movw	r30, r28
    29cc:	e3 5b       	subi	r30, 0xB3	; 179
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	60 81       	ld	r22, Z
    29d2:	71 81       	ldd	r23, Z+1	; 0x01
    29d4:	82 81       	ldd	r24, Z+2	; 0x02
    29d6:	93 81       	ldd	r25, Z+3	; 0x03
    29d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	f8 01       	movw	r30, r16
    29e2:	91 83       	std	Z+1, r25	; 0x01
    29e4:	80 83       	st	Z, r24
    29e6:	de 01       	movw	r26, r28
    29e8:	a9 5b       	subi	r26, 0xB9	; 185
    29ea:	bf 4f       	sbci	r27, 0xFF	; 255
    29ec:	fe 01       	movw	r30, r28
    29ee:	e5 5b       	subi	r30, 0xB5	; 181
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	80 81       	ld	r24, Z
    29f4:	91 81       	ldd	r25, Z+1	; 0x01
    29f6:	8d 93       	st	X+, r24
    29f8:	9c 93       	st	X, r25
    29fa:	fe 01       	movw	r30, r28
    29fc:	e9 5b       	subi	r30, 0xB9	; 185
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	80 81       	ld	r24, Z
    2a02:	91 81       	ldd	r25, Z+1	; 0x01
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <LCD_displayCharacter+0x2f4>
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e9 5b       	subi	r30, 0xB9	; 185
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	91 83       	std	Z+1, r25	; 0x01
    2a10:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_LOW);
	_delay_ms(1);

#elif (LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT,GET_BIT(character, 4));
    2a12:	fe 01       	movw	r30, r28
    2a14:	ed 59       	subi	r30, 0x9D	; 157
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	80 81       	ld	r24, Z
    2a1a:	88 2f       	mov	r24, r24
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	80 71       	andi	r24, 0x10	; 16
    2a20:	90 70       	andi	r25, 0x00	; 0
    2a22:	95 95       	asr	r25
    2a24:	87 95       	ror	r24
    2a26:	95 95       	asr	r25
    2a28:	87 95       	ror	r24
    2a2a:	95 95       	asr	r25
    2a2c:	87 95       	ror	r24
    2a2e:	95 95       	asr	r25
    2a30:	87 95       	ror	r24
    2a32:	98 2f       	mov	r25, r24
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	62 e0       	ldi	r22, 0x02	; 2
    2a38:	49 2f       	mov	r20, r25
    2a3a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+1,GET_BIT(character, 5));
    2a3e:	fe 01       	movw	r30, r28
    2a40:	ed 59       	subi	r30, 0x9D	; 157
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	80 81       	ld	r24, Z
    2a46:	88 2f       	mov	r24, r24
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	80 72       	andi	r24, 0x20	; 32
    2a4c:	90 70       	andi	r25, 0x00	; 0
    2a4e:	95 95       	asr	r25
    2a50:	87 95       	ror	r24
    2a52:	95 95       	asr	r25
    2a54:	87 95       	ror	r24
    2a56:	95 95       	asr	r25
    2a58:	87 95       	ror	r24
    2a5a:	95 95       	asr	r25
    2a5c:	87 95       	ror	r24
    2a5e:	95 95       	asr	r25
    2a60:	87 95       	ror	r24
    2a62:	98 2f       	mov	r25, r24
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	63 e0       	ldi	r22, 0x03	; 3
    2a68:	49 2f       	mov	r20, r25
    2a6a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+2,GET_BIT(character, 6));
    2a6e:	fe 01       	movw	r30, r28
    2a70:	ed 59       	subi	r30, 0x9D	; 157
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	80 81       	ld	r24, Z
    2a76:	88 2f       	mov	r24, r24
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	80 74       	andi	r24, 0x40	; 64
    2a7c:	90 70       	andi	r25, 0x00	; 0
    2a7e:	08 2e       	mov	r0, r24
    2a80:	89 2f       	mov	r24, r25
    2a82:	00 0c       	add	r0, r0
    2a84:	88 1f       	adc	r24, r24
    2a86:	99 0b       	sbc	r25, r25
    2a88:	00 0c       	add	r0, r0
    2a8a:	88 1f       	adc	r24, r24
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	98 2f       	mov	r25, r24
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	64 e0       	ldi	r22, 0x04	; 4
    2a94:	49 2f       	mov	r20, r25
    2a96:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+3,GET_BIT(character, 7));
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	ed 59       	subi	r30, 0x9D	; 157
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	80 81       	ld	r24, Z
    2aa2:	98 2f       	mov	r25, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	99 27       	eor	r25, r25
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	65 e0       	ldi	r22, 0x05	; 5
    2aae:	49 2f       	mov	r20, r25
    2ab0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	ed 5b       	subi	r30, 0xBD	; 189
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	a0 e8       	ldi	r26, 0x80	; 128
    2ac0:	bf e3       	ldi	r27, 0x3F	; 63
    2ac2:	80 83       	st	Z, r24
    2ac4:	91 83       	std	Z+1, r25	; 0x01
    2ac6:	a2 83       	std	Z+2, r26	; 0x02
    2ac8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aca:	8e 01       	movw	r16, r28
    2acc:	01 5c       	subi	r16, 0xC1	; 193
    2ace:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	ed 5b       	subi	r30, 0xBD	; 189
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	60 81       	ld	r22, Z
    2ad8:	71 81       	ldd	r23, Z+1	; 0x01
    2ada:	82 81       	ldd	r24, Z+2	; 0x02
    2adc:	93 81       	ldd	r25, Z+3	; 0x03
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	4a ef       	ldi	r20, 0xFA	; 250
    2ae4:	54 e4       	ldi	r21, 0x44	; 68
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	f8 01       	movw	r30, r16
    2af0:	80 83       	st	Z, r24
    2af2:	91 83       	std	Z+1, r25	; 0x01
    2af4:	a2 83       	std	Z+2, r26	; 0x02
    2af6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2af8:	fe 01       	movw	r30, r28
    2afa:	ff 96       	adiw	r30, 0x3f	; 63
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	82 81       	ldd	r24, Z+2	; 0x02
    2b02:	93 81       	ldd	r25, Z+3	; 0x03
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e8       	ldi	r20, 0x80	; 128
    2b0a:	5f e3       	ldi	r21, 0x3F	; 63
    2b0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b10:	88 23       	and	r24, r24
    2b12:	2c f4       	brge	.+10     	; 0x2b1e <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	9e af       	std	Y+62, r25	; 0x3e
    2b1a:	8d af       	std	Y+61, r24	; 0x3d
    2b1c:	46 c0       	rjmp	.+140    	; 0x2baa <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2b1e:	fe 01       	movw	r30, r28
    2b20:	ff 96       	adiw	r30, 0x3f	; 63
    2b22:	60 81       	ld	r22, Z
    2b24:	71 81       	ldd	r23, Z+1	; 0x01
    2b26:	82 81       	ldd	r24, Z+2	; 0x02
    2b28:	93 81       	ldd	r25, Z+3	; 0x03
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	3f ef       	ldi	r19, 0xFF	; 255
    2b2e:	4f e7       	ldi	r20, 0x7F	; 127
    2b30:	57 e4       	ldi	r21, 0x47	; 71
    2b32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b36:	18 16       	cp	r1, r24
    2b38:	64 f5       	brge	.+88     	; 0x2b92 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	ed 5b       	subi	r30, 0xBD	; 189
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	60 81       	ld	r22, Z
    2b42:	71 81       	ldd	r23, Z+1	; 0x01
    2b44:	82 81       	ldd	r24, Z+2	; 0x02
    2b46:	93 81       	ldd	r25, Z+3	; 0x03
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	40 e2       	ldi	r20, 0x20	; 32
    2b4e:	51 e4       	ldi	r21, 0x41	; 65
    2b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	bc 01       	movw	r22, r24
    2b5a:	cd 01       	movw	r24, r26
    2b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	9e af       	std	Y+62, r25	; 0x3e
    2b66:	8d af       	std	Y+61, r24	; 0x3d
    2b68:	0f c0       	rjmp	.+30     	; 0x2b88 <LCD_displayCharacter+0x478>
    2b6a:	88 ec       	ldi	r24, 0xC8	; 200
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	9c af       	std	Y+60, r25	; 0x3c
    2b70:	8b af       	std	Y+59, r24	; 0x3b
    2b72:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b74:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	f1 f7       	brne	.-4      	; 0x2b76 <LCD_displayCharacter+0x466>
    2b7a:	9c af       	std	Y+60, r25	; 0x3c
    2b7c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b80:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	9e af       	std	Y+62, r25	; 0x3e
    2b86:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b88:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	69 f7       	brne	.-38     	; 0x2b6a <LCD_displayCharacter+0x45a>
    2b90:	16 c0       	rjmp	.+44     	; 0x2bbe <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b92:	fe 01       	movw	r30, r28
    2b94:	ff 96       	adiw	r30, 0x3f	; 63
    2b96:	60 81       	ld	r22, Z
    2b98:	71 81       	ldd	r23, Z+1	; 0x01
    2b9a:	82 81       	ldd	r24, Z+2	; 0x02
    2b9c:	93 81       	ldd	r25, Z+3	; 0x03
    2b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9e af       	std	Y+62, r25	; 0x3e
    2ba8:	8d af       	std	Y+61, r24	; 0x3d
    2baa:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bac:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bae:	9a af       	std	Y+58, r25	; 0x3a
    2bb0:	89 af       	std	Y+57, r24	; 0x39
    2bb2:	89 ad       	ldd	r24, Y+57	; 0x39
    2bb4:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	f1 f7       	brne	.-4      	; 0x2bb6 <LCD_displayCharacter+0x4a6>
    2bba:	9a af       	std	Y+58, r25	; 0x3a
    2bbc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_LOW);
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	61 e0       	ldi	r22, 0x01	; 1
    2bc2:	40 e0       	ldi	r20, 0x00	; 0
    2bc4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	a0 e8       	ldi	r26, 0x80	; 128
    2bce:	bf e3       	ldi	r27, 0x3F	; 63
    2bd0:	8d ab       	std	Y+53, r24	; 0x35
    2bd2:	9e ab       	std	Y+54, r25	; 0x36
    2bd4:	af ab       	std	Y+55, r26	; 0x37
    2bd6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd8:	6d a9       	ldd	r22, Y+53	; 0x35
    2bda:	7e a9       	ldd	r23, Y+54	; 0x36
    2bdc:	8f a9       	ldd	r24, Y+55	; 0x37
    2bde:	98 ad       	ldd	r25, Y+56	; 0x38
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	4a ef       	ldi	r20, 0xFA	; 250
    2be6:	54 e4       	ldi	r21, 0x44	; 68
    2be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	89 ab       	std	Y+49, r24	; 0x31
    2bf2:	9a ab       	std	Y+50, r25	; 0x32
    2bf4:	ab ab       	std	Y+51, r26	; 0x33
    2bf6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bf8:	69 a9       	ldd	r22, Y+49	; 0x31
    2bfa:	7a a9       	ldd	r23, Y+50	; 0x32
    2bfc:	8b a9       	ldd	r24, Y+51	; 0x33
    2bfe:	9c a9       	ldd	r25, Y+52	; 0x34
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	40 e8       	ldi	r20, 0x80	; 128
    2c06:	5f e3       	ldi	r21, 0x3F	; 63
    2c08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c0c:	88 23       	and	r24, r24
    2c0e:	2c f4       	brge	.+10     	; 0x2c1a <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	98 ab       	std	Y+48, r25	; 0x30
    2c16:	8f a7       	std	Y+47, r24	; 0x2f
    2c18:	3f c0       	rjmp	.+126    	; 0x2c98 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2c1a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c1c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c1e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c20:	9c a9       	ldd	r25, Y+52	; 0x34
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	3f ef       	ldi	r19, 0xFF	; 255
    2c26:	4f e7       	ldi	r20, 0x7F	; 127
    2c28:	57 e4       	ldi	r21, 0x47	; 71
    2c2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c2e:	18 16       	cp	r1, r24
    2c30:	4c f5       	brge	.+82     	; 0x2c84 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c32:	6d a9       	ldd	r22, Y+53	; 0x35
    2c34:	7e a9       	ldd	r23, Y+54	; 0x36
    2c36:	8f a9       	ldd	r24, Y+55	; 0x37
    2c38:	98 ad       	ldd	r25, Y+56	; 0x38
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e2       	ldi	r20, 0x20	; 32
    2c40:	51 e4       	ldi	r21, 0x41	; 65
    2c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	bc 01       	movw	r22, r24
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	98 ab       	std	Y+48, r25	; 0x30
    2c58:	8f a7       	std	Y+47, r24	; 0x2f
    2c5a:	0f c0       	rjmp	.+30     	; 0x2c7a <LCD_displayCharacter+0x56a>
    2c5c:	88 ec       	ldi	r24, 0xC8	; 200
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	9e a7       	std	Y+46, r25	; 0x2e
    2c62:	8d a7       	std	Y+45, r24	; 0x2d
    2c64:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c66:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	f1 f7       	brne	.-4      	; 0x2c68 <LCD_displayCharacter+0x558>
    2c6c:	9e a7       	std	Y+46, r25	; 0x2e
    2c6e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c70:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c72:	98 a9       	ldd	r25, Y+48	; 0x30
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	98 ab       	std	Y+48, r25	; 0x30
    2c78:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c7c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	69 f7       	brne	.-38     	; 0x2c5c <LCD_displayCharacter+0x54c>
    2c82:	14 c0       	rjmp	.+40     	; 0x2cac <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c84:	69 a9       	ldd	r22, Y+49	; 0x31
    2c86:	7a a9       	ldd	r23, Y+50	; 0x32
    2c88:	8b a9       	ldd	r24, Y+51	; 0x33
    2c8a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	98 ab       	std	Y+48, r25	; 0x30
    2c96:	8f a7       	std	Y+47, r24	; 0x2f
    2c98:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c9a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c9c:	9c a7       	std	Y+44, r25	; 0x2c
    2c9e:	8b a7       	std	Y+43, r24	; 0x2b
    2ca0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ca2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	f1 f7       	brne	.-4      	; 0x2ca4 <LCD_displayCharacter+0x594>
    2ca8:	9c a7       	std	Y+44, r25	; 0x2c
    2caa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_HIGH);
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	61 e0       	ldi	r22, 0x01	; 1
    2cb0:	41 e0       	ldi	r20, 0x01	; 1
    2cb2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	a0 e8       	ldi	r26, 0x80	; 128
    2cbc:	bf e3       	ldi	r27, 0x3F	; 63
    2cbe:	8f a3       	std	Y+39, r24	; 0x27
    2cc0:	98 a7       	std	Y+40, r25	; 0x28
    2cc2:	a9 a7       	std	Y+41, r26	; 0x29
    2cc4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc6:	6f a1       	ldd	r22, Y+39	; 0x27
    2cc8:	78 a5       	ldd	r23, Y+40	; 0x28
    2cca:	89 a5       	ldd	r24, Y+41	; 0x29
    2ccc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	4a ef       	ldi	r20, 0xFA	; 250
    2cd4:	54 e4       	ldi	r21, 0x44	; 68
    2cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	8b a3       	std	Y+35, r24	; 0x23
    2ce0:	9c a3       	std	Y+36, r25	; 0x24
    2ce2:	ad a3       	std	Y+37, r26	; 0x25
    2ce4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ce6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ce8:	7c a1       	ldd	r23, Y+36	; 0x24
    2cea:	8d a1       	ldd	r24, Y+37	; 0x25
    2cec:	9e a1       	ldd	r25, Y+38	; 0x26
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	40 e8       	ldi	r20, 0x80	; 128
    2cf4:	5f e3       	ldi	r21, 0x3F	; 63
    2cf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cfa:	88 23       	and	r24, r24
    2cfc:	2c f4       	brge	.+10     	; 0x2d08 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	9a a3       	std	Y+34, r25	; 0x22
    2d04:	89 a3       	std	Y+33, r24	; 0x21
    2d06:	3f c0       	rjmp	.+126    	; 0x2d86 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2d08:	6b a1       	ldd	r22, Y+35	; 0x23
    2d0a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d0c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d0e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	3f ef       	ldi	r19, 0xFF	; 255
    2d14:	4f e7       	ldi	r20, 0x7F	; 127
    2d16:	57 e4       	ldi	r21, 0x47	; 71
    2d18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d1c:	18 16       	cp	r1, r24
    2d1e:	4c f5       	brge	.+82     	; 0x2d72 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d20:	6f a1       	ldd	r22, Y+39	; 0x27
    2d22:	78 a5       	ldd	r23, Y+40	; 0x28
    2d24:	89 a5       	ldd	r24, Y+41	; 0x29
    2d26:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	40 e2       	ldi	r20, 0x20	; 32
    2d2e:	51 e4       	ldi	r21, 0x41	; 65
    2d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	bc 01       	movw	r22, r24
    2d3a:	cd 01       	movw	r24, r26
    2d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	9a a3       	std	Y+34, r25	; 0x22
    2d46:	89 a3       	std	Y+33, r24	; 0x21
    2d48:	0f c0       	rjmp	.+30     	; 0x2d68 <LCD_displayCharacter+0x658>
    2d4a:	88 ec       	ldi	r24, 0xC8	; 200
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	98 a3       	std	Y+32, r25	; 0x20
    2d50:	8f 8f       	std	Y+31, r24	; 0x1f
    2d52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d54:	98 a1       	ldd	r25, Y+32	; 0x20
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	f1 f7       	brne	.-4      	; 0x2d56 <LCD_displayCharacter+0x646>
    2d5a:	98 a3       	std	Y+32, r25	; 0x20
    2d5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d60:	9a a1       	ldd	r25, Y+34	; 0x22
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	9a a3       	std	Y+34, r25	; 0x22
    2d66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d68:	89 a1       	ldd	r24, Y+33	; 0x21
    2d6a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d6c:	00 97       	sbiw	r24, 0x00	; 0
    2d6e:	69 f7       	brne	.-38     	; 0x2d4a <LCD_displayCharacter+0x63a>
    2d70:	14 c0       	rjmp	.+40     	; 0x2d9a <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d72:	6b a1       	ldd	r22, Y+35	; 0x23
    2d74:	7c a1       	ldd	r23, Y+36	; 0x24
    2d76:	8d a1       	ldd	r24, Y+37	; 0x25
    2d78:	9e a1       	ldd	r25, Y+38	; 0x26
    2d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	9a a3       	std	Y+34, r25	; 0x22
    2d84:	89 a3       	std	Y+33, r24	; 0x21
    2d86:	89 a1       	ldd	r24, Y+33	; 0x21
    2d88:	9a a1       	ldd	r25, Y+34	; 0x22
    2d8a:	9e 8f       	std	Y+30, r25	; 0x1e
    2d8c:	8d 8f       	std	Y+29, r24	; 0x1d
    2d8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <LCD_displayCharacter+0x682>
    2d96:	9e 8f       	std	Y+30, r25	; 0x1e
    2d98:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT,GET_BIT(character, 0));
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	ed 59       	subi	r30, 0x9D	; 157
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	80 81       	ld	r24, Z
    2da2:	98 2f       	mov	r25, r24
    2da4:	91 70       	andi	r25, 0x01	; 1
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	62 e0       	ldi	r22, 0x02	; 2
    2daa:	49 2f       	mov	r20, r25
    2dac:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+1,GET_BIT(character, 1));
    2db0:	fe 01       	movw	r30, r28
    2db2:	ed 59       	subi	r30, 0x9D	; 157
    2db4:	ff 4f       	sbci	r31, 0xFF	; 255
    2db6:	80 81       	ld	r24, Z
    2db8:	88 2f       	mov	r24, r24
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	82 70       	andi	r24, 0x02	; 2
    2dbe:	90 70       	andi	r25, 0x00	; 0
    2dc0:	95 95       	asr	r25
    2dc2:	87 95       	ror	r24
    2dc4:	98 2f       	mov	r25, r24
    2dc6:	80 e0       	ldi	r24, 0x00	; 0
    2dc8:	63 e0       	ldi	r22, 0x03	; 3
    2dca:	49 2f       	mov	r20, r25
    2dcc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+2,GET_BIT(character, 2));
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	ed 59       	subi	r30, 0x9D	; 157
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	80 81       	ld	r24, Z
    2dd8:	88 2f       	mov	r24, r24
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	84 70       	andi	r24, 0x04	; 4
    2dde:	90 70       	andi	r25, 0x00	; 0
    2de0:	95 95       	asr	r25
    2de2:	87 95       	ror	r24
    2de4:	95 95       	asr	r25
    2de6:	87 95       	ror	r24
    2de8:	98 2f       	mov	r25, r24
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	64 e0       	ldi	r22, 0x04	; 4
    2dee:	49 2f       	mov	r20, r25
    2df0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH,LCD_DATA_START_BIT+3,GET_BIT(character, 3));
    2df4:	fe 01       	movw	r30, r28
    2df6:	ed 59       	subi	r30, 0x9D	; 157
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	80 81       	ld	r24, Z
    2dfc:	88 2f       	mov	r24, r24
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	88 70       	andi	r24, 0x08	; 8
    2e02:	90 70       	andi	r25, 0x00	; 0
    2e04:	95 95       	asr	r25
    2e06:	87 95       	ror	r24
    2e08:	95 95       	asr	r25
    2e0a:	87 95       	ror	r24
    2e0c:	95 95       	asr	r25
    2e0e:	87 95       	ror	r24
    2e10:	98 2f       	mov	r25, r24
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	65 e0       	ldi	r22, 0x05	; 5
    2e16:	49 2f       	mov	r20, r25
    2e18:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	a0 e8       	ldi	r26, 0x80	; 128
    2e22:	bf e3       	ldi	r27, 0x3F	; 63
    2e24:	89 8f       	std	Y+25, r24	; 0x19
    2e26:	9a 8f       	std	Y+26, r25	; 0x1a
    2e28:	ab 8f       	std	Y+27, r26	; 0x1b
    2e2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	4a ef       	ldi	r20, 0xFA	; 250
    2e3a:	54 e4       	ldi	r21, 0x44	; 68
    2e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	8d 8b       	std	Y+21, r24	; 0x15
    2e46:	9e 8b       	std	Y+22, r25	; 0x16
    2e48:	af 8b       	std	Y+23, r26	; 0x17
    2e4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e50:	8f 89       	ldd	r24, Y+23	; 0x17
    2e52:	98 8d       	ldd	r25, Y+24	; 0x18
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e8       	ldi	r20, 0x80	; 128
    2e5a:	5f e3       	ldi	r21, 0x3F	; 63
    2e5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e60:	88 23       	and	r24, r24
    2e62:	2c f4       	brge	.+10     	; 0x2e6e <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	9c 8b       	std	Y+20, r25	; 0x14
    2e6a:	8b 8b       	std	Y+19, r24	; 0x13
    2e6c:	3f c0       	rjmp	.+126    	; 0x2eec <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2e6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e70:	7e 89       	ldd	r23, Y+22	; 0x16
    2e72:	8f 89       	ldd	r24, Y+23	; 0x17
    2e74:	98 8d       	ldd	r25, Y+24	; 0x18
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	3f ef       	ldi	r19, 0xFF	; 255
    2e7a:	4f e7       	ldi	r20, 0x7F	; 127
    2e7c:	57 e4       	ldi	r21, 0x47	; 71
    2e7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e82:	18 16       	cp	r1, r24
    2e84:	4c f5       	brge	.+82     	; 0x2ed8 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e86:	69 8d       	ldd	r22, Y+25	; 0x19
    2e88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e2       	ldi	r20, 0x20	; 32
    2e94:	51 e4       	ldi	r21, 0x41	; 65
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	9c 8b       	std	Y+20, r25	; 0x14
    2eac:	8b 8b       	std	Y+19, r24	; 0x13
    2eae:	0f c0       	rjmp	.+30     	; 0x2ece <LCD_displayCharacter+0x7be>
    2eb0:	88 ec       	ldi	r24, 0xC8	; 200
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	9a 8b       	std	Y+18, r25	; 0x12
    2eb6:	89 8b       	std	Y+17, r24	; 0x11
    2eb8:	89 89       	ldd	r24, Y+17	; 0x11
    2eba:	9a 89       	ldd	r25, Y+18	; 0x12
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <LCD_displayCharacter+0x7ac>
    2ec0:	9a 8b       	std	Y+18, r25	; 0x12
    2ec2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	9c 8b       	std	Y+20, r25	; 0x14
    2ecc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ece:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	69 f7       	brne	.-38     	; 0x2eb0 <LCD_displayCharacter+0x7a0>
    2ed6:	14 c0       	rjmp	.+40     	; 0x2f00 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eda:	7e 89       	ldd	r23, Y+22	; 0x16
    2edc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ede:	98 8d       	ldd	r25, Y+24	; 0x18
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9c 8b       	std	Y+20, r25	; 0x14
    2eea:	8b 8b       	std	Y+19, r24	; 0x13
    2eec:	8b 89       	ldd	r24, Y+19	; 0x13
    2eee:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef0:	98 8b       	std	Y+16, r25	; 0x10
    2ef2:	8f 87       	std	Y+15, r24	; 0x0f
    2ef4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef6:	98 89       	ldd	r25, Y+16	; 0x10
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <LCD_displayCharacter+0x7e8>
    2efc:	98 8b       	std	Y+16, r25	; 0x10
    2efe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_CONFIGS_PORT, LCD_E, LOGIC_LOW);
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	61 e0       	ldi	r22, 0x01	; 1
    2f04:	40 e0       	ldi	r20, 0x00	; 0
    2f06:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	a0 e8       	ldi	r26, 0x80	; 128
    2f10:	bf e3       	ldi	r27, 0x3F	; 63
    2f12:	8b 87       	std	Y+11, r24	; 0x0b
    2f14:	9c 87       	std	Y+12, r25	; 0x0c
    2f16:	ad 87       	std	Y+13, r26	; 0x0d
    2f18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	4a ef       	ldi	r20, 0xFA	; 250
    2f28:	54 e4       	ldi	r21, 0x44	; 68
    2f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	8f 83       	std	Y+7, r24	; 0x07
    2f34:	98 87       	std	Y+8, r25	; 0x08
    2f36:	a9 87       	std	Y+9, r26	; 0x09
    2f38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f3c:	78 85       	ldd	r23, Y+8	; 0x08
    2f3e:	89 85       	ldd	r24, Y+9	; 0x09
    2f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e8       	ldi	r20, 0x80	; 128
    2f48:	5f e3       	ldi	r21, 0x3F	; 63
    2f4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f4e:	88 23       	and	r24, r24
    2f50:	2c f4       	brge	.+10     	; 0x2f5c <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	9e 83       	std	Y+6, r25	; 0x06
    2f58:	8d 83       	std	Y+5, r24	; 0x05
    2f5a:	3f c0       	rjmp	.+126    	; 0x2fda <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5e:	78 85       	ldd	r23, Y+8	; 0x08
    2f60:	89 85       	ldd	r24, Y+9	; 0x09
    2f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	3f ef       	ldi	r19, 0xFF	; 255
    2f68:	4f e7       	ldi	r20, 0x7F	; 127
    2f6a:	57 e4       	ldi	r21, 0x47	; 71
    2f6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f70:	18 16       	cp	r1, r24
    2f72:	4c f5       	brge	.+82     	; 0x2fc6 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e2       	ldi	r20, 0x20	; 32
    2f82:	51 e4       	ldi	r21, 0x41	; 65
    2f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	9e 83       	std	Y+6, r25	; 0x06
    2f9a:	8d 83       	std	Y+5, r24	; 0x05
    2f9c:	0f c0       	rjmp	.+30     	; 0x2fbc <LCD_displayCharacter+0x8ac>
    2f9e:	88 ec       	ldi	r24, 0xC8	; 200
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	9c 83       	std	Y+4, r25	; 0x04
    2fa4:	8b 83       	std	Y+3, r24	; 0x03
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <LCD_displayCharacter+0x89a>
    2fae:	9c 83       	std	Y+4, r25	; 0x04
    2fb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	9e 83       	std	Y+6, r25	; 0x06
    2fba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc0:	00 97       	sbiw	r24, 0x00	; 0
    2fc2:	69 f7       	brne	.-38     	; 0x2f9e <LCD_displayCharacter+0x88e>
    2fc4:	14 c0       	rjmp	.+40     	; 0x2fee <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc8:	78 85       	ldd	r23, Y+8	; 0x08
    2fca:	89 85       	ldd	r24, Y+9	; 0x09
    2fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	9e 83       	std	Y+6, r25	; 0x06
    2fd8:	8d 83       	std	Y+5, r24	; 0x05
    2fda:	8d 81       	ldd	r24, Y+5	; 0x05
    2fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fde:	9a 83       	std	Y+2, r25	; 0x02
    2fe0:	89 83       	std	Y+1, r24	; 0x01
    2fe2:	89 81       	ldd	r24, Y+1	; 0x01
    2fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <LCD_displayCharacter+0x8d6>
    2fea:	9a 83       	std	Y+2, r25	; 0x02
    2fec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    2fee:	cd 59       	subi	r28, 0x9D	; 157
    2ff0:	df 4f       	sbci	r29, 0xFF	; 255
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	f8 94       	cli
    2ff6:	de bf       	out	0x3e, r29	; 62
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	cd bf       	out	0x3d, r28	; 61
    2ffc:	cf 91       	pop	r28
    2ffe:	df 91       	pop	r29
    3000:	1f 91       	pop	r17
    3002:	0f 91       	pop	r16
    3004:	08 95       	ret

00003006 <LCD_displayString>:

void LCD_displayString(const char *str)
{
    3006:	df 93       	push	r29
    3008:	cf 93       	push	r28
    300a:	00 d0       	rcall	.+0      	; 0x300c <LCD_displayString+0x6>
    300c:	0f 92       	push	r0
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	9b 83       	std	Y+3, r25	; 0x03
    3014:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3016:	19 82       	std	Y+1, r1	; 0x01
    3018:	0e c0       	rjmp	.+28     	; 0x3036 <LCD_displayString+0x30>
	while(str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	28 2f       	mov	r18, r24
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	8a 81       	ldd	r24, Y+2	; 0x02
    3022:	9b 81       	ldd	r25, Y+3	; 0x03
    3024:	fc 01       	movw	r30, r24
    3026:	e2 0f       	add	r30, r18
    3028:	f3 1f       	adc	r31, r19
    302a:	80 81       	ld	r24, Z
    302c:	0e 94 88 13 	call	0x2710	; 0x2710 <LCD_displayCharacter>
		i++;
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	8f 5f       	subi	r24, 0xFF	; 255
    3034:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	28 2f       	mov	r18, r24
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	9b 81       	ldd	r25, Y+3	; 0x03
    3040:	fc 01       	movw	r30, r24
    3042:	e2 0f       	add	r30, r18
    3044:	f3 1f       	adc	r31, r19
    3046:	80 81       	ld	r24, Z
    3048:	88 23       	and	r24, r24
    304a:	39 f7       	brne	.-50     	; 0x301a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	cf 91       	pop	r28
    3054:	df 91       	pop	r29
    3056:	08 95       	ret

00003058 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 col)
{
    3058:	df 93       	push	r29
    305a:	cf 93       	push	r28
    305c:	00 d0       	rcall	.+0      	; 0x305e <LCD_moveCursor+0x6>
    305e:	00 d0       	rcall	.+0      	; 0x3060 <LCD_moveCursor+0x8>
    3060:	0f 92       	push	r0
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	8a 83       	std	Y+2, r24	; 0x02
    3068:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    306a:	8a 81       	ldd	r24, Y+2	; 0x02
    306c:	28 2f       	mov	r18, r24
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	3d 83       	std	Y+5, r19	; 0x05
    3072:	2c 83       	std	Y+4, r18	; 0x04
    3074:	8c 81       	ldd	r24, Y+4	; 0x04
    3076:	9d 81       	ldd	r25, Y+5	; 0x05
    3078:	81 30       	cpi	r24, 0x01	; 1
    307a:	91 05       	cpc	r25, r1
    307c:	c1 f0       	breq	.+48     	; 0x30ae <LCD_moveCursor+0x56>
    307e:	2c 81       	ldd	r18, Y+4	; 0x04
    3080:	3d 81       	ldd	r19, Y+5	; 0x05
    3082:	22 30       	cpi	r18, 0x02	; 2
    3084:	31 05       	cpc	r19, r1
    3086:	2c f4       	brge	.+10     	; 0x3092 <LCD_moveCursor+0x3a>
    3088:	8c 81       	ldd	r24, Y+4	; 0x04
    308a:	9d 81       	ldd	r25, Y+5	; 0x05
    308c:	00 97       	sbiw	r24, 0x00	; 0
    308e:	61 f0       	breq	.+24     	; 0x30a8 <LCD_moveCursor+0x50>
    3090:	19 c0       	rjmp	.+50     	; 0x30c4 <LCD_moveCursor+0x6c>
    3092:	2c 81       	ldd	r18, Y+4	; 0x04
    3094:	3d 81       	ldd	r19, Y+5	; 0x05
    3096:	22 30       	cpi	r18, 0x02	; 2
    3098:	31 05       	cpc	r19, r1
    309a:	69 f0       	breq	.+26     	; 0x30b6 <LCD_moveCursor+0x5e>
    309c:	8c 81       	ldd	r24, Y+4	; 0x04
    309e:	9d 81       	ldd	r25, Y+5	; 0x05
    30a0:	83 30       	cpi	r24, 0x03	; 3
    30a2:	91 05       	cpc	r25, r1
    30a4:	61 f0       	breq	.+24     	; 0x30be <LCD_moveCursor+0x66>
    30a6:	0e c0       	rjmp	.+28     	; 0x30c4 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    30a8:	8b 81       	ldd	r24, Y+3	; 0x03
    30aa:	89 83       	std	Y+1, r24	; 0x01
    30ac:	0b c0       	rjmp	.+22     	; 0x30c4 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    30ae:	8b 81       	ldd	r24, Y+3	; 0x03
    30b0:	80 5c       	subi	r24, 0xC0	; 192
    30b2:	89 83       	std	Y+1, r24	; 0x01
    30b4:	07 c0       	rjmp	.+14     	; 0x30c4 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    30b6:	8b 81       	ldd	r24, Y+3	; 0x03
    30b8:	80 5f       	subi	r24, 0xF0	; 240
    30ba:	89 83       	std	Y+1, r24	; 0x01
    30bc:	03 c0       	rjmp	.+6      	; 0x30c4 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    30be:	8b 81       	ldd	r24, Y+3	; 0x03
    30c0:	80 5b       	subi	r24, 0xB0	; 176
    30c2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	80 68       	ori	r24, 0x80	; 128
    30c8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <LCD_sendCommand>
}
    30cc:	0f 90       	pop	r0
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	cf 91       	pop	r28
    30d8:	df 91       	pop	r29
    30da:	08 95       	ret

000030dc <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row, uint8 column, const char *str)
{
    30dc:	df 93       	push	r29
    30de:	cf 93       	push	r28
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <LCD_displayStringRowColumn+0x6>
    30e2:	00 d0       	rcall	.+0      	; 0x30e4 <LCD_displayStringRowColumn+0x8>
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	89 83       	std	Y+1, r24	; 0x01
    30ea:	6a 83       	std	Y+2, r22	; 0x02
    30ec:	5c 83       	std	Y+4, r21	; 0x04
    30ee:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,column);
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
    30f2:	6a 81       	ldd	r22, Y+2	; 0x02
    30f4:	0e 94 2c 18 	call	0x3058	; 0x3058 <LCD_moveCursor>
	LCD_displayString(str);
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	9c 81       	ldd	r25, Y+4	; 0x04
    30fc:	0e 94 03 18 	call	0x3006	; 0x3006 <LCD_displayString>

}
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	cf 91       	pop	r28
    310a:	df 91       	pop	r29
    310c:	08 95       	ret

0000310e <LCD_integerToString>:

void LCD_integerToString(uint8 data)
{
    310e:	df 93       	push	r29
    3110:	cf 93       	push	r28
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    3116:	6b 97       	sbiw	r28, 0x1b	; 27
    3118:	0f b6       	in	r0, 0x3f	; 63
    311a:	f8 94       	cli
    311c:	de bf       	out	0x3e, r29	; 62
    311e:	0f be       	out	0x3f, r0	; 63
    3120:	cd bf       	out	0x3d, r28	; 61
    3122:	8b 8f       	std	Y+27, r24	; 0x1b
	char buff[26]; /* String to hold the ascii result */
	utoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3124:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3126:	88 2f       	mov	r24, r24
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	9e 01       	movw	r18, r28
    312c:	2f 5f       	subi	r18, 0xFF	; 255
    312e:	3f 4f       	sbci	r19, 0xFF	; 255
    3130:	b9 01       	movw	r22, r18
    3132:	4a e0       	ldi	r20, 0x0A	; 10
    3134:	50 e0       	ldi	r21, 0x00	; 0
    3136:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <utoa>
	LCD_displayString(buff); /* Display the string */
    313a:	ce 01       	movw	r24, r28
    313c:	01 96       	adiw	r24, 0x01	; 1
    313e:	0e 94 03 18 	call	0x3006	; 0x3006 <LCD_displayString>
}
    3142:	6b 96       	adiw	r28, 0x1b	; 27
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	cf 91       	pop	r28
    3150:	df 91       	pop	r29
    3152:	08 95       	ret

00003154 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    3154:	df 93       	push	r29
    3156:	cf 93       	push	r28
    3158:	cd b7       	in	r28, 0x3d	; 61
    315a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <LCD_sendCommand>

}
    3162:	cf 91       	pop	r28
    3164:	df 91       	pop	r29
    3166:	08 95       	ret

00003168 <checkNewPass>:
void checkOldPass(void);
void unlockDoor(void);
 */
void controlDoor(void);
void checkNewPass(void)
{
    3168:	0f 93       	push	r16
    316a:	1f 93       	push	r17
    316c:	df 93       	push	r29
    316e:	cf 93       	push	r28
    3170:	cd b7       	in	r28, 0x3d	; 61
    3172:	de b7       	in	r29, 0x3e	; 62
    3174:	6f 97       	sbiw	r28, 0x1f	; 31
    3176:	0f b6       	in	r0, 0x3f	; 63
    3178:	f8 94       	cli
    317a:	de bf       	out	0x3e, r29	; 62
    317c:	0f be       	out	0x3f, r0	; 63
    317e:	cd bf       	out	0x3d, r28	; 61


	uint8 i;
	uint8 val;
	uint8 check = CORRECT;
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Receiving original password*/
	for(i = 0; i < PASS_LENGTH; i++)
    3184:	1e 8e       	std	Y+30, r1	; 0x1e
    3186:	15 c0       	rjmp	.+42     	; 0x31b2 <checkNewPass+0x4a>
	{
		g_receivedPass[i] = UART_receiveByte();
    3188:	8e 8d       	ldd	r24, Y+30	; 0x1e
    318a:	08 2f       	mov	r16, r24
    318c:	10 e0       	ldi	r17, 0x00	; 0
    318e:	0e 94 b0 0c 	call	0x1960	; 0x1960 <UART_receiveByte>
    3192:	f8 01       	movw	r30, r16
    3194:	e1 57       	subi	r30, 0x71	; 113
    3196:	ff 4f       	sbci	r31, 0xFF	; 255
    3198:	80 83       	st	Z, r24
		LCD_integerToString(g_receivedPass[i]);
    319a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    319c:	88 2f       	mov	r24, r24
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	fc 01       	movw	r30, r24
    31a2:	e1 57       	subi	r30, 0x71	; 113
    31a4:	ff 4f       	sbci	r31, 0xFF	; 255
    31a6:	80 81       	ld	r24, Z
    31a8:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_integerToString>

	uint8 i;
	uint8 val;
	uint8 check = CORRECT;
	/* Receiving original password*/
	for(i = 0; i < PASS_LENGTH; i++)
    31ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31ae:	8f 5f       	subi	r24, 0xFF	; 255
    31b0:	8e 8f       	std	Y+30, r24	; 0x1e
    31b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31b4:	85 30       	cpi	r24, 0x05	; 5
    31b6:	40 f3       	brcs	.-48     	; 0x3188 <checkNewPass+0x20>
		g_receivedPass[i] = UART_receiveByte();
		LCD_integerToString(g_receivedPass[i]);

	}
	/* Receiving original password*/
	for(i = 0; i < PASS_LENGTH; i++)
    31b8:	1e 8e       	std	Y+30, r1	; 0x1e
    31ba:	10 c0       	rjmp	.+32     	; 0x31dc <checkNewPass+0x74>
	{
		if(g_receivedPass[i] != UART_receiveByte())
    31bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31be:	88 2f       	mov	r24, r24
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	fc 01       	movw	r30, r24
    31c4:	e1 57       	subi	r30, 0x71	; 113
    31c6:	ff 4f       	sbci	r31, 0xFF	; 255
    31c8:	10 81       	ld	r17, Z
    31ca:	0e 94 b0 0c 	call	0x1960	; 0x1960 <UART_receiveByte>
    31ce:	18 17       	cp	r17, r24
    31d0:	11 f0       	breq	.+4      	; 0x31d6 <checkNewPass+0x6e>
		{
			check = INCORRECT;
    31d2:	82 e0       	ldi	r24, 0x02	; 2
    31d4:	8d 8f       	std	Y+29, r24	; 0x1d
		g_receivedPass[i] = UART_receiveByte();
		LCD_integerToString(g_receivedPass[i]);

	}
	/* Receiving original password*/
	for(i = 0; i < PASS_LENGTH; i++)
    31d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31d8:	8f 5f       	subi	r24, 0xFF	; 255
    31da:	8e 8f       	std	Y+30, r24	; 0x1e
    31dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31de:	85 30       	cpi	r24, 0x05	; 5
    31e0:	68 f3       	brcs	.-38     	; 0x31bc <checkNewPass+0x54>
			check = INCORRECT;

		}

	}
	UART_sendByte(check);
    31e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31e4:	0e 94 99 0c 	call	0x1932	; 0x1932 <UART_sendByte>

	/*Write password in the eeprom in case of correct*/
	if(check == CORRECT)
    31e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31ea:	81 30       	cpi	r24, 0x01	; 1
    31ec:	09 f0       	breq	.+2      	; 0x31f0 <checkNewPass+0x88>
    31ee:	15 c1       	rjmp	.+554    	; 0x341a <checkNewPass+0x2b2>
	{
		for(i=0;i<PASS_LENGTH;i++)
    31f0:	1e 8e       	std	Y+30, r1	; 0x1e
    31f2:	85 c0       	rjmp	.+266    	; 0x32fe <checkNewPass+0x196>
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	a0 e2       	ldi	r26, 0x20	; 32
    31fa:	b1 e4       	ldi	r27, 0x41	; 65
    31fc:	89 8f       	std	Y+25, r24	; 0x19
    31fe:	9a 8f       	std	Y+26, r25	; 0x1a
    3200:	ab 8f       	std	Y+27, r26	; 0x1b
    3202:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3204:	69 8d       	ldd	r22, Y+25	; 0x19
    3206:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3208:	8b 8d       	ldd	r24, Y+27	; 0x1b
    320a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	4a ef       	ldi	r20, 0xFA	; 250
    3212:	54 e4       	ldi	r21, 0x44	; 68
    3214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	8d 8b       	std	Y+21, r24	; 0x15
    321e:	9e 8b       	std	Y+22, r25	; 0x16
    3220:	af 8b       	std	Y+23, r26	; 0x17
    3222:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3224:	6d 89       	ldd	r22, Y+21	; 0x15
    3226:	7e 89       	ldd	r23, Y+22	; 0x16
    3228:	8f 89       	ldd	r24, Y+23	; 0x17
    322a:	98 8d       	ldd	r25, Y+24	; 0x18
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	40 e8       	ldi	r20, 0x80	; 128
    3232:	5f e3       	ldi	r21, 0x3F	; 63
    3234:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3238:	88 23       	and	r24, r24
    323a:	2c f4       	brge	.+10     	; 0x3246 <checkNewPass+0xde>
		__ticks = 1;
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	9c 8b       	std	Y+20, r25	; 0x14
    3242:	8b 8b       	std	Y+19, r24	; 0x13
    3244:	3f c0       	rjmp	.+126    	; 0x32c4 <checkNewPass+0x15c>
	else if (__tmp > 65535)
    3246:	6d 89       	ldd	r22, Y+21	; 0x15
    3248:	7e 89       	ldd	r23, Y+22	; 0x16
    324a:	8f 89       	ldd	r24, Y+23	; 0x17
    324c:	98 8d       	ldd	r25, Y+24	; 0x18
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	3f ef       	ldi	r19, 0xFF	; 255
    3252:	4f e7       	ldi	r20, 0x7F	; 127
    3254:	57 e4       	ldi	r21, 0x47	; 71
    3256:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    325a:	18 16       	cp	r1, r24
    325c:	4c f5       	brge	.+82     	; 0x32b0 <checkNewPass+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325e:	69 8d       	ldd	r22, Y+25	; 0x19
    3260:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3262:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3264:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	40 e2       	ldi	r20, 0x20	; 32
    326c:	51 e4       	ldi	r21, 0x41	; 65
    326e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	bc 01       	movw	r22, r24
    3278:	cd 01       	movw	r24, r26
    327a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	9c 8b       	std	Y+20, r25	; 0x14
    3284:	8b 8b       	std	Y+19, r24	; 0x13
    3286:	0f c0       	rjmp	.+30     	; 0x32a6 <checkNewPass+0x13e>
    3288:	88 ec       	ldi	r24, 0xC8	; 200
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	9a 8b       	std	Y+18, r25	; 0x12
    328e:	89 8b       	std	Y+17, r24	; 0x11
    3290:	89 89       	ldd	r24, Y+17	; 0x11
    3292:	9a 89       	ldd	r25, Y+18	; 0x12
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	f1 f7       	brne	.-4      	; 0x3294 <checkNewPass+0x12c>
    3298:	9a 8b       	std	Y+18, r25	; 0x12
    329a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329c:	8b 89       	ldd	r24, Y+19	; 0x13
    329e:	9c 89       	ldd	r25, Y+20	; 0x14
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	9c 8b       	std	Y+20, r25	; 0x14
    32a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a6:	8b 89       	ldd	r24, Y+19	; 0x13
    32a8:	9c 89       	ldd	r25, Y+20	; 0x14
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	69 f7       	brne	.-38     	; 0x3288 <checkNewPass+0x120>
    32ae:	14 c0       	rjmp	.+40     	; 0x32d8 <checkNewPass+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b0:	6d 89       	ldd	r22, Y+21	; 0x15
    32b2:	7e 89       	ldd	r23, Y+22	; 0x16
    32b4:	8f 89       	ldd	r24, Y+23	; 0x17
    32b6:	98 8d       	ldd	r25, Y+24	; 0x18
    32b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	9c 8b       	std	Y+20, r25	; 0x14
    32c2:	8b 8b       	std	Y+19, r24	; 0x13
    32c4:	8b 89       	ldd	r24, Y+19	; 0x13
    32c6:	9c 89       	ldd	r25, Y+20	; 0x14
    32c8:	98 8b       	std	Y+16, r25	; 0x10
    32ca:	8f 87       	std	Y+15, r24	; 0x0f
    32cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ce:	98 89       	ldd	r25, Y+16	; 0x10
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	f1 f7       	brne	.-4      	; 0x32d0 <checkNewPass+0x168>
    32d4:	98 8b       	std	Y+16, r25	; 0x10
    32d6:	8f 87       	std	Y+15, r24	; 0x0f
		{

			_delay_ms(10);

			EEPROM_writeByte(PASSWORD_ADDRESS+i,g_receivedPass[i]);
    32d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32da:	88 2f       	mov	r24, r24
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	0e 96       	adiw	r24, 0x0e	; 14
    32e0:	ac 01       	movw	r20, r24
    32e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32e4:	88 2f       	mov	r24, r24
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	fc 01       	movw	r30, r24
    32ea:	e1 57       	subi	r30, 0x71	; 113
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	20 81       	ld	r18, Z
    32f0:	ca 01       	movw	r24, r20
    32f2:	62 2f       	mov	r22, r18
    32f4:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <EEPROM_writeByte>
	UART_sendByte(check);

	/*Write password in the eeprom in case of correct*/
	if(check == CORRECT)
	{
		for(i=0;i<PASS_LENGTH;i++)
    32f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32fa:	8f 5f       	subi	r24, 0xFF	; 255
    32fc:	8e 8f       	std	Y+30, r24	; 0x1e
    32fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3300:	85 30       	cpi	r24, 0x05	; 5
    3302:	08 f4       	brcc	.+2      	; 0x3306 <checkNewPass+0x19e>
    3304:	77 cf       	rjmp	.-274    	; 0x31f4 <checkNewPass+0x8c>
			_delay_ms(10);

			EEPROM_writeByte(PASSWORD_ADDRESS+i,g_receivedPass[i]);
		}

		LCD_clearScreen();
    3306:	0e 94 aa 18 	call	0x3154	; 0x3154 <LCD_clearScreen>
		for(i=0;i<PASS_LENGTH;i++)
    330a:	1e 8e       	std	Y+30, r1	; 0x1e
    330c:	82 c0       	rjmp	.+260    	; 0x3412 <checkNewPass+0x2aa>
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	a0 e2       	ldi	r26, 0x20	; 32
    3314:	b1 e4       	ldi	r27, 0x41	; 65
    3316:	8b 87       	std	Y+11, r24	; 0x0b
    3318:	9c 87       	std	Y+12, r25	; 0x0c
    331a:	ad 87       	std	Y+13, r26	; 0x0d
    331c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    331e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3320:	7c 85       	ldd	r23, Y+12	; 0x0c
    3322:	8d 85       	ldd	r24, Y+13	; 0x0d
    3324:	9e 85       	ldd	r25, Y+14	; 0x0e
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	4a ef       	ldi	r20, 0xFA	; 250
    332c:	54 e4       	ldi	r21, 0x44	; 68
    332e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	8f 83       	std	Y+7, r24	; 0x07
    3338:	98 87       	std	Y+8, r25	; 0x08
    333a:	a9 87       	std	Y+9, r26	; 0x09
    333c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    333e:	6f 81       	ldd	r22, Y+7	; 0x07
    3340:	78 85       	ldd	r23, Y+8	; 0x08
    3342:	89 85       	ldd	r24, Y+9	; 0x09
    3344:	9a 85       	ldd	r25, Y+10	; 0x0a
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e8       	ldi	r20, 0x80	; 128
    334c:	5f e3       	ldi	r21, 0x3F	; 63
    334e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3352:	88 23       	and	r24, r24
    3354:	2c f4       	brge	.+10     	; 0x3360 <checkNewPass+0x1f8>
		__ticks = 1;
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	9e 83       	std	Y+6, r25	; 0x06
    335c:	8d 83       	std	Y+5, r24	; 0x05
    335e:	3f c0       	rjmp	.+126    	; 0x33de <checkNewPass+0x276>
	else if (__tmp > 65535)
    3360:	6f 81       	ldd	r22, Y+7	; 0x07
    3362:	78 85       	ldd	r23, Y+8	; 0x08
    3364:	89 85       	ldd	r24, Y+9	; 0x09
    3366:	9a 85       	ldd	r25, Y+10	; 0x0a
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	3f ef       	ldi	r19, 0xFF	; 255
    336c:	4f e7       	ldi	r20, 0x7F	; 127
    336e:	57 e4       	ldi	r21, 0x47	; 71
    3370:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3374:	18 16       	cp	r1, r24
    3376:	4c f5       	brge	.+82     	; 0x33ca <checkNewPass+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3378:	6b 85       	ldd	r22, Y+11	; 0x0b
    337a:	7c 85       	ldd	r23, Y+12	; 0x0c
    337c:	8d 85       	ldd	r24, Y+13	; 0x0d
    337e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	40 e2       	ldi	r20, 0x20	; 32
    3386:	51 e4       	ldi	r21, 0x41	; 65
    3388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	bc 01       	movw	r22, r24
    3392:	cd 01       	movw	r24, r26
    3394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	9e 83       	std	Y+6, r25	; 0x06
    339e:	8d 83       	std	Y+5, r24	; 0x05
    33a0:	0f c0       	rjmp	.+30     	; 0x33c0 <checkNewPass+0x258>
    33a2:	88 ec       	ldi	r24, 0xC8	; 200
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	9c 83       	std	Y+4, r25	; 0x04
    33a8:	8b 83       	std	Y+3, r24	; 0x03
    33aa:	8b 81       	ldd	r24, Y+3	; 0x03
    33ac:	9c 81       	ldd	r25, Y+4	; 0x04
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <checkNewPass+0x246>
    33b2:	9c 83       	std	Y+4, r25	; 0x04
    33b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b6:	8d 81       	ldd	r24, Y+5	; 0x05
    33b8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	9e 83       	std	Y+6, r25	; 0x06
    33be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c0:	8d 81       	ldd	r24, Y+5	; 0x05
    33c2:	9e 81       	ldd	r25, Y+6	; 0x06
    33c4:	00 97       	sbiw	r24, 0x00	; 0
    33c6:	69 f7       	brne	.-38     	; 0x33a2 <checkNewPass+0x23a>
    33c8:	14 c0       	rjmp	.+40     	; 0x33f2 <checkNewPass+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ca:	6f 81       	ldd	r22, Y+7	; 0x07
    33cc:	78 85       	ldd	r23, Y+8	; 0x08
    33ce:	89 85       	ldd	r24, Y+9	; 0x09
    33d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	9e 83       	std	Y+6, r25	; 0x06
    33dc:	8d 83       	std	Y+5, r24	; 0x05
    33de:	8d 81       	ldd	r24, Y+5	; 0x05
    33e0:	9e 81       	ldd	r25, Y+6	; 0x06
    33e2:	9a 83       	std	Y+2, r25	; 0x02
    33e4:	89 83       	std	Y+1, r24	; 0x01
    33e6:	89 81       	ldd	r24, Y+1	; 0x01
    33e8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	f1 f7       	brne	.-4      	; 0x33ea <checkNewPass+0x282>
    33ee:	9a 83       	std	Y+2, r25	; 0x02
    33f0:	89 83       	std	Y+1, r24	; 0x01
		{


			_delay_ms(10);

			EEPROM_readByte(PASSWORD_ADDRESS+i,&val);
    33f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33f4:	88 2f       	mov	r24, r24
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	0e 96       	adiw	r24, 0x0e	; 14
    33fa:	9e 01       	movw	r18, r28
    33fc:	21 5e       	subi	r18, 0xE1	; 225
    33fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3400:	b9 01       	movw	r22, r18
    3402:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <EEPROM_readByte>
			LCD_integerToString(val);
    3406:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3408:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_integerToString>

			EEPROM_writeByte(PASSWORD_ADDRESS+i,g_receivedPass[i]);
		}

		LCD_clearScreen();
		for(i=0;i<PASS_LENGTH;i++)
    340c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    340e:	8f 5f       	subi	r24, 0xFF	; 255
    3410:	8e 8f       	std	Y+30, r24	; 0x1e
    3412:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3414:	85 30       	cpi	r24, 0x05	; 5
    3416:	08 f4       	brcc	.+2      	; 0x341a <checkNewPass+0x2b2>
    3418:	7a cf       	rjmp	.-268    	; 0x330e <checkNewPass+0x1a6>
			LCD_integerToString(val);
		}
	}


}
    341a:	6f 96       	adiw	r28, 0x1f	; 31
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	1f 91       	pop	r17
    342c:	0f 91       	pop	r16
    342e:	08 95       	ret

00003430 <checkOldPass>:

void checkOldPass(void)
{
    3430:	df 93       	push	r29
    3432:	cf 93       	push	r28
    3434:	cd b7       	in	r28, 0x3d	; 61
    3436:	de b7       	in	r29, 0x3e	; 62
    3438:	62 97       	sbiw	r28, 0x12	; 18
    343a:	0f b6       	in	r0, 0x3f	; 63
    343c:	f8 94       	cli
    343e:	de bf       	out	0x3e, r29	; 62
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	cd bf       	out	0x3d, r28	; 61

	uint8 i;
	uint8 receivedByte;
	uint8 ack = 'i';
    3444:	89 e6       	ldi	r24, 0x69	; 105
    3446:	88 8b       	std	Y+16, r24	; 0x10
	uint8 status = CORRECT;
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	8f 87       	std	Y+15, r24	; 0x0f
    344c:	93 c0       	rjmp	.+294    	; 0x3574 <checkOldPass+0x144>
	while(ack != 'c')
	{
		for(i = 0; i < PASS_LENGTH; i++)
    344e:	19 8a       	std	Y+17, r1	; 0x11
    3450:	87 c0       	rjmp	.+270    	; 0x3560 <checkOldPass+0x130>
		{
			EEPROM_readByte(PASSWORD_ADDRESS+i,&receivedByte);
    3452:	89 89       	ldd	r24, Y+17	; 0x11
    3454:	88 2f       	mov	r24, r24
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	0e 96       	adiw	r24, 0x0e	; 14
    345a:	9e 01       	movw	r18, r28
    345c:	2e 5e       	subi	r18, 0xEE	; 238
    345e:	3f 4f       	sbci	r19, 0xFF	; 255
    3460:	b9 01       	movw	r22, r18
    3462:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <EEPROM_readByte>
			if(UART_receiveByte() != receivedByte)
    3466:	0e 94 b0 0c 	call	0x1960	; 0x1960 <UART_receiveByte>
    346a:	98 2f       	mov	r25, r24
    346c:	8a 89       	ldd	r24, Y+18	; 0x12
    346e:	98 17       	cp	r25, r24
    3470:	11 f0       	breq	.+4      	; 0x3476 <checkOldPass+0x46>
			{
				status = INCORRECT;
    3472:	82 e0       	ldi	r24, 0x02	; 2
    3474:	8f 87       	std	Y+15, r24	; 0x0f
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	a0 e2       	ldi	r26, 0x20	; 32
    347c:	b1 e4       	ldi	r27, 0x41	; 65
    347e:	8b 87       	std	Y+11, r24	; 0x0b
    3480:	9c 87       	std	Y+12, r25	; 0x0c
    3482:	ad 87       	std	Y+13, r26	; 0x0d
    3484:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3486:	6b 85       	ldd	r22, Y+11	; 0x0b
    3488:	7c 85       	ldd	r23, Y+12	; 0x0c
    348a:	8d 85       	ldd	r24, Y+13	; 0x0d
    348c:	9e 85       	ldd	r25, Y+14	; 0x0e
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	4a ef       	ldi	r20, 0xFA	; 250
    3494:	54 e4       	ldi	r21, 0x44	; 68
    3496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	8f 83       	std	Y+7, r24	; 0x07
    34a0:	98 87       	std	Y+8, r25	; 0x08
    34a2:	a9 87       	std	Y+9, r26	; 0x09
    34a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34a6:	6f 81       	ldd	r22, Y+7	; 0x07
    34a8:	78 85       	ldd	r23, Y+8	; 0x08
    34aa:	89 85       	ldd	r24, Y+9	; 0x09
    34ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	40 e8       	ldi	r20, 0x80	; 128
    34b4:	5f e3       	ldi	r21, 0x3F	; 63
    34b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34ba:	88 23       	and	r24, r24
    34bc:	2c f4       	brge	.+10     	; 0x34c8 <checkOldPass+0x98>
		__ticks = 1;
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	9e 83       	std	Y+6, r25	; 0x06
    34c4:	8d 83       	std	Y+5, r24	; 0x05
    34c6:	3f c0       	rjmp	.+126    	; 0x3546 <checkOldPass+0x116>
	else if (__tmp > 65535)
    34c8:	6f 81       	ldd	r22, Y+7	; 0x07
    34ca:	78 85       	ldd	r23, Y+8	; 0x08
    34cc:	89 85       	ldd	r24, Y+9	; 0x09
    34ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	3f ef       	ldi	r19, 0xFF	; 255
    34d4:	4f e7       	ldi	r20, 0x7F	; 127
    34d6:	57 e4       	ldi	r21, 0x47	; 71
    34d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34dc:	18 16       	cp	r1, r24
    34de:	4c f5       	brge	.+82     	; 0x3532 <checkOldPass+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    34e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    34e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	40 e2       	ldi	r20, 0x20	; 32
    34ee:	51 e4       	ldi	r21, 0x41	; 65
    34f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	bc 01       	movw	r22, r24
    34fa:	cd 01       	movw	r24, r26
    34fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	9e 83       	std	Y+6, r25	; 0x06
    3506:	8d 83       	std	Y+5, r24	; 0x05
    3508:	0f c0       	rjmp	.+30     	; 0x3528 <checkOldPass+0xf8>
    350a:	88 ec       	ldi	r24, 0xC8	; 200
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	9c 83       	std	Y+4, r25	; 0x04
    3510:	8b 83       	std	Y+3, r24	; 0x03
    3512:	8b 81       	ldd	r24, Y+3	; 0x03
    3514:	9c 81       	ldd	r25, Y+4	; 0x04
    3516:	01 97       	sbiw	r24, 0x01	; 1
    3518:	f1 f7       	brne	.-4      	; 0x3516 <checkOldPass+0xe6>
    351a:	9c 83       	std	Y+4, r25	; 0x04
    351c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    351e:	8d 81       	ldd	r24, Y+5	; 0x05
    3520:	9e 81       	ldd	r25, Y+6	; 0x06
    3522:	01 97       	sbiw	r24, 0x01	; 1
    3524:	9e 83       	std	Y+6, r25	; 0x06
    3526:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3528:	8d 81       	ldd	r24, Y+5	; 0x05
    352a:	9e 81       	ldd	r25, Y+6	; 0x06
    352c:	00 97       	sbiw	r24, 0x00	; 0
    352e:	69 f7       	brne	.-38     	; 0x350a <checkOldPass+0xda>
    3530:	14 c0       	rjmp	.+40     	; 0x355a <checkOldPass+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3532:	6f 81       	ldd	r22, Y+7	; 0x07
    3534:	78 85       	ldd	r23, Y+8	; 0x08
    3536:	89 85       	ldd	r24, Y+9	; 0x09
    3538:	9a 85       	ldd	r25, Y+10	; 0x0a
    353a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	9e 83       	std	Y+6, r25	; 0x06
    3544:	8d 83       	std	Y+5, r24	; 0x05
    3546:	8d 81       	ldd	r24, Y+5	; 0x05
    3548:	9e 81       	ldd	r25, Y+6	; 0x06
    354a:	9a 83       	std	Y+2, r25	; 0x02
    354c:	89 83       	std	Y+1, r24	; 0x01
    354e:	89 81       	ldd	r24, Y+1	; 0x01
    3550:	9a 81       	ldd	r25, Y+2	; 0x02
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	f1 f7       	brne	.-4      	; 0x3552 <checkOldPass+0x122>
    3556:	9a 83       	std	Y+2, r25	; 0x02
    3558:	89 83       	std	Y+1, r24	; 0x01
	uint8 receivedByte;
	uint8 ack = 'i';
	uint8 status = CORRECT;
	while(ack != 'c')
	{
		for(i = 0; i < PASS_LENGTH; i++)
    355a:	89 89       	ldd	r24, Y+17	; 0x11
    355c:	8f 5f       	subi	r24, 0xFF	; 255
    355e:	89 8b       	std	Y+17, r24	; 0x11
    3560:	89 89       	ldd	r24, Y+17	; 0x11
    3562:	85 30       	cpi	r24, 0x05	; 5
    3564:	08 f4       	brcc	.+2      	; 0x3568 <checkOldPass+0x138>
    3566:	75 cf       	rjmp	.-278    	; 0x3452 <checkOldPass+0x22>
				status = INCORRECT;
			}
			_delay_ms(10);

		}
		UART_sendByte(status);
    3568:	8f 85       	ldd	r24, Y+15	; 0x0f
    356a:	0e 94 99 0c 	call	0x1932	; 0x1932 <UART_sendByte>
		ack = UART_receiveByte();
    356e:	0e 94 b0 0c 	call	0x1960	; 0x1960 <UART_receiveByte>
    3572:	88 8b       	std	Y+16, r24	; 0x10

	uint8 i;
	uint8 receivedByte;
	uint8 ack = 'i';
	uint8 status = CORRECT;
	while(ack != 'c')
    3574:	88 89       	ldd	r24, Y+16	; 0x10
    3576:	83 36       	cpi	r24, 0x63	; 99
    3578:	09 f0       	breq	.+2      	; 0x357c <checkOldPass+0x14c>
    357a:	69 cf       	rjmp	.-302    	; 0x344e <checkOldPass+0x1e>
		}
		UART_sendByte(status);
		ack = UART_receiveByte();
	}

}
    357c:	62 96       	adiw	r28, 0x12	; 18
    357e:	0f b6       	in	r0, 0x3f	; 63
    3580:	f8 94       	cli
    3582:	de bf       	out	0x3e, r29	; 62
    3584:	0f be       	out	0x3f, r0	; 63
    3586:	cd bf       	out	0x3d, r28	; 61
    3588:	cf 91       	pop	r28
    358a:	df 91       	pop	r29
    358c:	08 95       	ret

0000358e <setTimer>:

void setTimer(void)
{
    358e:	df 93       	push	r29
    3590:	cf 93       	push	r28
    3592:	cd b7       	in	r28, 0x3d	; 61
    3594:	de b7       	in	r29, 0x3e	; 62
    3596:	2d 97       	sbiw	r28, 0x0d	; 13
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	de bf       	out	0x3e, r29	; 62
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	cd bf       	out	0x3d, r28	; 61
	Timer1_setCallBack(controlDoor);
    35a2:	82 e0       	ldi	r24, 0x02	; 2
    35a4:	9b e1       	ldi	r25, 0x1B	; 27
    35a6:	0e 94 b5 0a 	call	0x156a	; 0x156a <Timer1_setCallBack>
	Timer1_ConfigType t1Config={0,0,PS_64_T1,NORM_T1,NONE,TOGGLE_T1};
    35aa:	ce 01       	movw	r24, r28
    35ac:	01 96       	adiw	r24, 0x01	; 1
    35ae:	9a 87       	std	Y+10, r25	; 0x0a
    35b0:	89 87       	std	Y+9, r24	; 0x09
    35b2:	e4 e8       	ldi	r30, 0x84	; 132
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	fc 87       	std	Y+12, r31	; 0x0c
    35b8:	eb 87       	std	Y+11, r30	; 0x0b
    35ba:	f8 e0       	ldi	r31, 0x08	; 8
    35bc:	fd 87       	std	Y+13, r31	; 0x0d
    35be:	eb 85       	ldd	r30, Y+11	; 0x0b
    35c0:	fc 85       	ldd	r31, Y+12	; 0x0c
    35c2:	00 80       	ld	r0, Z
    35c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    35c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    35c8:	01 96       	adiw	r24, 0x01	; 1
    35ca:	9c 87       	std	Y+12, r25	; 0x0c
    35cc:	8b 87       	std	Y+11, r24	; 0x0b
    35ce:	e9 85       	ldd	r30, Y+9	; 0x09
    35d0:	fa 85       	ldd	r31, Y+10	; 0x0a
    35d2:	00 82       	st	Z, r0
    35d4:	89 85       	ldd	r24, Y+9	; 0x09
    35d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d8:	01 96       	adiw	r24, 0x01	; 1
    35da:	9a 87       	std	Y+10, r25	; 0x0a
    35dc:	89 87       	std	Y+9, r24	; 0x09
    35de:	9d 85       	ldd	r25, Y+13	; 0x0d
    35e0:	91 50       	subi	r25, 0x01	; 1
    35e2:	9d 87       	std	Y+13, r25	; 0x0d
    35e4:	ed 85       	ldd	r30, Y+13	; 0x0d
    35e6:	ee 23       	and	r30, r30
    35e8:	51 f7       	brne	.-44     	; 0x35be <setTimer+0x30>
	Timer1_init(&t1Config);
    35ea:	ce 01       	movw	r24, r28
    35ec:	01 96       	adiw	r24, 0x01	; 1
    35ee:	0e 94 bc 09 	call	0x1378	; 0x1378 <Timer1_init>
}
    35f2:	2d 96       	adiw	r28, 0x0d	; 13
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	f8 94       	cli
    35f8:	de bf       	out	0x3e, r29	; 62
    35fa:	0f be       	out	0x3f, r0	; 63
    35fc:	cd bf       	out	0x3d, r28	; 61
    35fe:	cf 91       	pop	r28
    3600:	df 91       	pop	r29
    3602:	08 95       	ret

00003604 <controlDoor>:
void controlDoor()
{
    3604:	df 93       	push	r29
    3606:	cf 93       	push	r28
    3608:	cd b7       	in	r28, 0x3d	; 61
    360a:	de b7       	in	r29, 0x3e	; 62
	timerElapse++;
    360c:	80 91 8e 00 	lds	r24, 0x008E
    3610:	8f 5f       	subi	r24, 0xFF	; 255
    3612:	80 93 8e 00 	sts	0x008E, r24
	if(timerElapse == 30)
    3616:	80 91 8e 00 	lds	r24, 0x008E
    361a:	8e 31       	cpi	r24, 0x1E	; 30
    361c:	41 f4       	brne	.+16     	; 0x362e <controlDoor+0x2a>
	{
		DcMotor_Rotate(CW,100);
    361e:	82 e0       	ldi	r24, 0x02	; 2
    3620:	64 e6       	ldi	r22, 0x64	; 100
    3622:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <DcMotor_Rotate>
		UART_sendByte('U');
    3626:	85 e5       	ldi	r24, 0x55	; 85
    3628:	0e 94 99 0c 	call	0x1932	; 0x1932 <UART_sendByte>
    362c:	20 c0       	rjmp	.+64     	; 0x366e <controlDoor+0x6a>

	}
	else if(timerElapse == 36)
    362e:	80 91 8e 00 	lds	r24, 0x008E
    3632:	84 32       	cpi	r24, 0x24	; 36
    3634:	29 f4       	brne	.+10     	; 0x3640 <controlDoor+0x3c>
	{
		DcMotor_Rotate(OFF,0);
    3636:	80 e0       	ldi	r24, 0x00	; 0
    3638:	60 e0       	ldi	r22, 0x00	; 0
    363a:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <DcMotor_Rotate>
    363e:	17 c0       	rjmp	.+46     	; 0x366e <controlDoor+0x6a>

	}
	else if(timerElapse == 66)
    3640:	80 91 8e 00 	lds	r24, 0x008E
    3644:	82 34       	cpi	r24, 0x42	; 66
    3646:	41 f4       	brne	.+16     	; 0x3658 <controlDoor+0x54>
	{
		DcMotor_Rotate(ACW,100);
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	64 e6       	ldi	r22, 0x64	; 100
    364c:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <DcMotor_Rotate>
		UART_sendByte('L');
    3650:	8c e4       	ldi	r24, 0x4C	; 76
    3652:	0e 94 99 0c 	call	0x1932	; 0x1932 <UART_sendByte>
    3656:	0b c0       	rjmp	.+22     	; 0x366e <controlDoor+0x6a>
	}
	else
	{
		Timer1_deInit();
    3658:	0e 94 87 0a 	call	0x150e	; 0x150e <Timer1_deInit>

		DcMotor_Rotate(OFF,0);
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	60 e0       	ldi	r22, 0x00	; 0
    3660:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <DcMotor_Rotate>
		timerElapse = 0;
    3664:	10 92 8e 00 	sts	0x008E, r1
		UART_sendByte('D');
    3668:	84 e4       	ldi	r24, 0x44	; 68
    366a:	0e 94 99 0c 	call	0x1932	; 0x1932 <UART_sendByte>
	}

}
    366e:	cf 91       	pop	r28
    3670:	df 91       	pop	r29
    3672:	08 95       	ret

00003674 <main>:
int main(void)
{
    3674:	df 93       	push	r29
    3676:	cf 93       	push	r28
    3678:	0f 92       	push	r0
    367a:	cd b7       	in	r28, 0x3d	; 61
    367c:	de b7       	in	r29, 0x3e	; 62

	uint8 key;
	UART_init(&U_MC2);
    367e:	8a e7       	ldi	r24, 0x7A	; 122
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	0e 94 94 0b 	call	0x1728	; 0x1728 <UART_init>
	DcMotor_Init();
    3686:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <DcMotor_Init>
	TWI_init(&twiConfig);
    368a:	81 e8       	ldi	r24, 0x81	; 129
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	0e 94 0d 0b 	call	0x161a	; 0x161a <TWI_init>

	LCD_init();
    3692:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_init>
	LCD_displayString("LOL");
    3696:	80 e6       	ldi	r24, 0x60	; 96
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	0e 94 03 18 	call	0x3006	; 0x3006 <LCD_displayString>
	SREG |= (1<<7);
    369e:	af e5       	ldi	r26, 0x5F	; 95
    36a0:	b0 e0       	ldi	r27, 0x00	; 0
    36a2:	ef e5       	ldi	r30, 0x5F	; 95
    36a4:	f0 e0       	ldi	r31, 0x00	; 0
    36a6:	80 81       	ld	r24, Z
    36a8:	80 68       	ori	r24, 0x80	; 128
    36aa:	8c 93       	st	X, r24

	while(1)
	{
		key = UART_receiveByte();
    36ac:	0e 94 b0 0c 	call	0x1960	; 0x1960 <UART_receiveByte>
    36b0:	89 83       	std	Y+1, r24	; 0x01
		if(key == 'N')
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	8e 34       	cpi	r24, 0x4E	; 78
    36b6:	19 f4       	brne	.+6      	; 0x36be <main+0x4a>
		{
			checkNewPass();
    36b8:	0e 94 b4 18 	call	0x3168	; 0x3168 <checkNewPass>
    36bc:	f7 cf       	rjmp	.-18     	; 0x36ac <main+0x38>
		}
		else if(key == '+')
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	8b 32       	cpi	r24, 0x2B	; 43
    36c2:	a1 f7       	brne	.-24     	; 0x36ac <main+0x38>
		{
			checkOldPass();
    36c4:	0e 94 18 1a 	call	0x3430	; 0x3430 <checkOldPass>
			LCD_clearScreen();
    36c8:	0e 94 aa 18 	call	0x3154	; 0x3154 <LCD_clearScreen>
			LCD_displayString("working on it");
    36cc:	84 e6       	ldi	r24, 0x64	; 100
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	0e 94 03 18 	call	0x3006	; 0x3006 <LCD_displayString>
			setTimer();
    36d4:	0e 94 c7 1a 	call	0x358e	; 0x358e <setTimer>
			controlDoor();
    36d8:	0e 94 02 1b 	call	0x3604	; 0x3604 <controlDoor>

			LCD_clearScreen();
    36dc:	0e 94 aa 18 	call	0x3154	; 0x3154 <LCD_clearScreen>
    36e0:	e5 cf       	rjmp	.-54     	; 0x36ac <main+0x38>

000036e2 <__mulsi3>:
    36e2:	62 9f       	mul	r22, r18
    36e4:	d0 01       	movw	r26, r0
    36e6:	73 9f       	mul	r23, r19
    36e8:	f0 01       	movw	r30, r0
    36ea:	82 9f       	mul	r24, r18
    36ec:	e0 0d       	add	r30, r0
    36ee:	f1 1d       	adc	r31, r1
    36f0:	64 9f       	mul	r22, r20
    36f2:	e0 0d       	add	r30, r0
    36f4:	f1 1d       	adc	r31, r1
    36f6:	92 9f       	mul	r25, r18
    36f8:	f0 0d       	add	r31, r0
    36fa:	83 9f       	mul	r24, r19
    36fc:	f0 0d       	add	r31, r0
    36fe:	74 9f       	mul	r23, r20
    3700:	f0 0d       	add	r31, r0
    3702:	65 9f       	mul	r22, r21
    3704:	f0 0d       	add	r31, r0
    3706:	99 27       	eor	r25, r25
    3708:	72 9f       	mul	r23, r18
    370a:	b0 0d       	add	r27, r0
    370c:	e1 1d       	adc	r30, r1
    370e:	f9 1f       	adc	r31, r25
    3710:	63 9f       	mul	r22, r19
    3712:	b0 0d       	add	r27, r0
    3714:	e1 1d       	adc	r30, r1
    3716:	f9 1f       	adc	r31, r25
    3718:	bd 01       	movw	r22, r26
    371a:	cf 01       	movw	r24, r30
    371c:	11 24       	eor	r1, r1
    371e:	08 95       	ret

00003720 <__udivmodsi4>:
    3720:	a1 e2       	ldi	r26, 0x21	; 33
    3722:	1a 2e       	mov	r1, r26
    3724:	aa 1b       	sub	r26, r26
    3726:	bb 1b       	sub	r27, r27
    3728:	fd 01       	movw	r30, r26
    372a:	0d c0       	rjmp	.+26     	; 0x3746 <__udivmodsi4_ep>

0000372c <__udivmodsi4_loop>:
    372c:	aa 1f       	adc	r26, r26
    372e:	bb 1f       	adc	r27, r27
    3730:	ee 1f       	adc	r30, r30
    3732:	ff 1f       	adc	r31, r31
    3734:	a2 17       	cp	r26, r18
    3736:	b3 07       	cpc	r27, r19
    3738:	e4 07       	cpc	r30, r20
    373a:	f5 07       	cpc	r31, r21
    373c:	20 f0       	brcs	.+8      	; 0x3746 <__udivmodsi4_ep>
    373e:	a2 1b       	sub	r26, r18
    3740:	b3 0b       	sbc	r27, r19
    3742:	e4 0b       	sbc	r30, r20
    3744:	f5 0b       	sbc	r31, r21

00003746 <__udivmodsi4_ep>:
    3746:	66 1f       	adc	r22, r22
    3748:	77 1f       	adc	r23, r23
    374a:	88 1f       	adc	r24, r24
    374c:	99 1f       	adc	r25, r25
    374e:	1a 94       	dec	r1
    3750:	69 f7       	brne	.-38     	; 0x372c <__udivmodsi4_loop>
    3752:	60 95       	com	r22
    3754:	70 95       	com	r23
    3756:	80 95       	com	r24
    3758:	90 95       	com	r25
    375a:	9b 01       	movw	r18, r22
    375c:	ac 01       	movw	r20, r24
    375e:	bd 01       	movw	r22, r26
    3760:	cf 01       	movw	r24, r30
    3762:	08 95       	ret

00003764 <__prologue_saves__>:
    3764:	2f 92       	push	r2
    3766:	3f 92       	push	r3
    3768:	4f 92       	push	r4
    376a:	5f 92       	push	r5
    376c:	6f 92       	push	r6
    376e:	7f 92       	push	r7
    3770:	8f 92       	push	r8
    3772:	9f 92       	push	r9
    3774:	af 92       	push	r10
    3776:	bf 92       	push	r11
    3778:	cf 92       	push	r12
    377a:	df 92       	push	r13
    377c:	ef 92       	push	r14
    377e:	ff 92       	push	r15
    3780:	0f 93       	push	r16
    3782:	1f 93       	push	r17
    3784:	cf 93       	push	r28
    3786:	df 93       	push	r29
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
    378c:	ca 1b       	sub	r28, r26
    378e:	db 0b       	sbc	r29, r27
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	de bf       	out	0x3e, r29	; 62
    3796:	0f be       	out	0x3f, r0	; 63
    3798:	cd bf       	out	0x3d, r28	; 61
    379a:	09 94       	ijmp

0000379c <__epilogue_restores__>:
    379c:	2a 88       	ldd	r2, Y+18	; 0x12
    379e:	39 88       	ldd	r3, Y+17	; 0x11
    37a0:	48 88       	ldd	r4, Y+16	; 0x10
    37a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    37a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    37a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    37a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    37aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    37ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    37ae:	b9 84       	ldd	r11, Y+9	; 0x09
    37b0:	c8 84       	ldd	r12, Y+8	; 0x08
    37b2:	df 80       	ldd	r13, Y+7	; 0x07
    37b4:	ee 80       	ldd	r14, Y+6	; 0x06
    37b6:	fd 80       	ldd	r15, Y+5	; 0x05
    37b8:	0c 81       	ldd	r16, Y+4	; 0x04
    37ba:	1b 81       	ldd	r17, Y+3	; 0x03
    37bc:	aa 81       	ldd	r26, Y+2	; 0x02
    37be:	b9 81       	ldd	r27, Y+1	; 0x01
    37c0:	ce 0f       	add	r28, r30
    37c2:	d1 1d       	adc	r29, r1
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	f8 94       	cli
    37c8:	de bf       	out	0x3e, r29	; 62
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	cd bf       	out	0x3d, r28	; 61
    37ce:	ed 01       	movw	r28, r26
    37d0:	08 95       	ret

000037d2 <utoa>:
    37d2:	fb 01       	movw	r30, r22
    37d4:	9f 01       	movw	r18, r30
    37d6:	42 30       	cpi	r20, 0x02	; 2
    37d8:	74 f0       	brlt	.+28     	; 0x37f6 <utoa+0x24>
    37da:	45 32       	cpi	r20, 0x25	; 37
    37dc:	64 f4       	brge	.+24     	; 0x37f6 <utoa+0x24>
    37de:	64 2f       	mov	r22, r20
    37e0:	77 27       	eor	r23, r23
    37e2:	0e 94 0f 1c 	call	0x381e	; 0x381e <__udivmodhi4>
    37e6:	80 5d       	subi	r24, 0xD0	; 208
    37e8:	8a 33       	cpi	r24, 0x3A	; 58
    37ea:	0c f0       	brlt	.+2      	; 0x37ee <utoa+0x1c>
    37ec:	89 5d       	subi	r24, 0xD9	; 217
    37ee:	81 93       	st	Z+, r24
    37f0:	cb 01       	movw	r24, r22
    37f2:	00 97       	sbiw	r24, 0x00	; 0
    37f4:	a1 f7       	brne	.-24     	; 0x37de <utoa+0xc>
    37f6:	10 82       	st	Z, r1
    37f8:	c9 01       	movw	r24, r18
    37fa:	0c 94 ff 1b 	jmp	0x37fe	; 0x37fe <strrev>

000037fe <strrev>:
    37fe:	dc 01       	movw	r26, r24
    3800:	fc 01       	movw	r30, r24
    3802:	67 2f       	mov	r22, r23
    3804:	71 91       	ld	r23, Z+
    3806:	77 23       	and	r23, r23
    3808:	e1 f7       	brne	.-8      	; 0x3802 <strrev+0x4>
    380a:	32 97       	sbiw	r30, 0x02	; 2
    380c:	04 c0       	rjmp	.+8      	; 0x3816 <strrev+0x18>
    380e:	7c 91       	ld	r23, X
    3810:	6d 93       	st	X+, r22
    3812:	70 83       	st	Z, r23
    3814:	62 91       	ld	r22, -Z
    3816:	ae 17       	cp	r26, r30
    3818:	bf 07       	cpc	r27, r31
    381a:	c8 f3       	brcs	.-14     	; 0x380e <strrev+0x10>
    381c:	08 95       	ret

0000381e <__udivmodhi4>:
    381e:	aa 1b       	sub	r26, r26
    3820:	bb 1b       	sub	r27, r27
    3822:	51 e1       	ldi	r21, 0x11	; 17
    3824:	07 c0       	rjmp	.+14     	; 0x3834 <__udivmodhi4_ep>

00003826 <__udivmodhi4_loop>:
    3826:	aa 1f       	adc	r26, r26
    3828:	bb 1f       	adc	r27, r27
    382a:	a6 17       	cp	r26, r22
    382c:	b7 07       	cpc	r27, r23
    382e:	10 f0       	brcs	.+4      	; 0x3834 <__udivmodhi4_ep>
    3830:	a6 1b       	sub	r26, r22
    3832:	b7 0b       	sbc	r27, r23

00003834 <__udivmodhi4_ep>:
    3834:	88 1f       	adc	r24, r24
    3836:	99 1f       	adc	r25, r25
    3838:	5a 95       	dec	r21
    383a:	a9 f7       	brne	.-22     	; 0x3826 <__udivmodhi4_loop>
    383c:	80 95       	com	r24
    383e:	90 95       	com	r25
    3840:	bc 01       	movw	r22, r24
    3842:	cd 01       	movw	r24, r26
    3844:	08 95       	ret

00003846 <_exit>:
    3846:	f8 94       	cli

00003848 <__stop_program>:
    3848:	ff cf       	rjmp	.-2      	; 0x3848 <__stop_program>
